"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[4477],{1076:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>v,contentTitle:()=>u,default:()=>y,frontMatter:()=>w,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"views","title":"Views","description":"s are the building blocks of Doodle apps. They encapsulate state, display content on the screen and respond to user input. Apps typically contain many View instances at runtime. And they often use a wide range of View types that provide specialized rendering and user interactions.","source":"@site/docs/views.mdx","sourceDirName":".","slug":"/views","permalink":"/doodle/docs/views","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"Views"},"sidebar":"tutorialSidebar","previous":{"title":"Displays","permalink":"/doodle/docs/display"},"next":{"title":"Rendering","permalink":"/doodle/docs/rendering"}}');var a=i(4848),r=i(8453),o=i(7269),s=i(4069),l=i(9172);const d="package applications\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass MyApp(display: Display): Application {\n    init {\n        display += view {}\n    }\n    // ...\n\n    override fun shutdown() { /*...*/ }\n}\n//sampleEnd",c='import io.nacular.doodle.core.View\nimport io.nacular.doodle.core.renderProperty\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.text\nimport io.nacular.doodle.geometry.Point\n\n//sampleStart\nclass UserInfo(textMetrics: TextMetrics, name: String, age: Int): View() {\n    var name by renderProperty(name) // causes repaint whenever changed\n    var age  by renderProperty(age )\n    private val nameHeight = textMetrics.height(name)\n\n    override fun render(canvas: Canvas) {\n        canvas.text("name: $name", color = Black)\n        canvas.text("age : $age", at = Point(y = nameHeight), color = Black)\n    }\n}\n//sampleEnd',h="import io.nacular.doodle.core.View\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass VSplitPanel: View() {\n    var left: View? = null\n        set(new) {\n            if (new == field) { return }\n\n            field?.let { children -= it }\n            field = new\n            field?.let { children += it }\n\n            // notify of change\n        }\n\n    val right: View? = null\n    // ...\n\n    private val handle = view {} // private View for splitter\n\n    init {\n        children += handle // add handle to children\n    }\n\n    // ...\n}\n//sampleEnd",p="package viewcreation\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass MyView: View() {\n    // ...\n}\n\nval view1 = MyView()\n\nval view2 = object: View() {\n    // ...\n}\n\nval view3 = view {\n    // ...\n}\n//sampleEnd",w={hide_title:!0,title:"Views"},u="App building blocks",v={},m=[{value:"State and rendering",id:"state-and-rendering",level:2},{value:"View hierarchies",id:"view-hierarchies",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.R)(),...e.components};return l.F||x("api",!1),l.F.RenderProperty||x("api.RenderProperty",!0),l.F.View||x("api.View",!0),l.F.ViewDsl||x("api.ViewDsl",!0),l.F.view||x("api.view",!1),l.F.view.children||x("api.view.children",!0),l.F.view.render||x("api.view.render",!0),l.F.view.rerender||x("api.view.rerender",!0),l.F.view.size||x("api.view.size",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"app-building-blocks",children:"App building blocks"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(l.F.View,{}),"s are the building blocks of Doodle apps. They encapsulate state, display content on the screen and respond to user input. Apps typically contain many ",(0,a.jsx)(n.code,{children:"View"})," instances at runtime. And they often use a wide range of ",(0,a.jsx)(n.code,{children:"View"})," types that provide specialized rendering and user interactions."]}),"\n",(0,a.jsxs)(n.p,{children:["You create a new ",(0,a.jsx)(n.code,{children:"View"})," by instantiating a custom type that extends the ",(0,a.jsx)(l.F.View,{})," base class, instantiating an inline object directly or through the ",(0,a.jsx)(l.F.ViewDsl,{})," DSL."]}),"\n",(0,a.jsx)(s.v,{children:p}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You will see how to get your ",(0,a.jsx)(n.code,{children:"View"}),"s onto the screen when we discuss the ",(0,a.jsx)(n.a,{href:"display",children:"Display"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"state-and-rendering",children:"State and rendering"}),"\n",(0,a.jsxs)(n.p,{children:["Below is an example of a ",(0,a.jsx)(l.F.View,{})," that holds some user data (name and age). It tracks this state and repaints itself whenever any of these properties is changed. This is done using ",(0,a.jsx)(l.F.RenderProperty,{}),", which automatically triggers ",(0,a.jsx)(l.F.view.render,{})," on any value change."]}),"\n",(0,a.jsxs)(n.p,{children:["Notice the ",(0,a.jsx)(l.F.view.render,{})," method in this class. It is responsible for all paint operations for a View, and it gets called whenever a View should be repainted. There are a number of reasons why ",(0,a.jsx)(n.code,{children:"render"})," can be called, including: the first time a ",(0,a.jsx)(n.code,{children:"View"})," is displayed, any time its ",(0,a.jsx)(l.F.view.size,{})," changes, or if there is an explicit call to ",(0,a.jsx)(l.F.view.rerender,{}),"."]}),"\n",(0,a.jsx)(o.T,{functionName:"userInfo",height:"120"}),"\n",(0,a.jsx)(s.v,{children:c}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Learn more about ",(0,a.jsx)(n.a,{href:"rendering",children:"rendering"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"view-hierarchies",children:"View hierarchies"}),"\n",(0,a.jsxs)(n.p,{children:["Apps generally have one or more top-level View with other Views nested in them. Doodle allow you to do the same. You specify which Views will represent your top-level items and add them to the ",(0,a.jsx)(n.a,{href:"display",children:"Display"}),". These Views in turn will typically have nested Views that are either dynamically added, or part of the internal representation of their parent."]}),"\n",(0,a.jsx)(s.v,{children:d}),"\n",(0,a.jsxs)(n.p,{children:["All Views support nested ",(0,a.jsx)(l.F.view.children,{}),". However, they ",(0,a.jsx)(n.code,{children:"protect"})," that list--and other traits related to being a container--by default, to improve encapsulation and API control."]}),"\n",(0,a.jsxs)(n.p,{children:["Consider a split panel. It is reasonable to think about it as having a left and right child (ignoring orientation for now). However, an implementation of this concept might choose to have an additional child to represent the splitter. This choice is an internal detail of the implementation that would be leaked if the ",(0,a.jsx)(l.F.view.children,{})," list were public. Worse, a caller could remove the splitter or add more children than expected and break the behavior."]}),"\n",(0,a.jsx)(n.p,{children:"Doodle helps with these design challenges by letting you selectively expose a View's internals to callers."}),"\n",(0,a.jsx)(s.v,{children:h}),"\n",(0,a.jsxs)(n.p,{children:["This design prevents direct access to the panel's ",(0,a.jsx)(n.code,{children:"children"}),", which side-steps many issues. It also presents are more intuitive and reliable API. ",(0,a.jsx)(n.code,{children:"left"})," and ",(0,a.jsx)(n.code,{children:"right"})," are fairly self-documenting compared to ",(0,a.jsx)(n.code,{children:"children[n]"})," and ",(0,a.jsx)(n.code,{children:"children[m]"}),". Moreover, the panel is able to encapsulate the fact that it uses additional Views for presentation."]})]})}function y(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);