"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[53],{1281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>p,toc:()=>m});var a=t(7462),i=(t(7294),t(3905)),o=(t(8209),t(5488)),r=t(5162),l=t(4903);const d={title:"Overview"},s="Rendering",p={unversionedId:"rendering/overview",id:"rendering/overview",title:"Overview",description:"Rendering is managed entirely by Views. Each View draws its content to the screen via the render",source:"@site/docs/rendering/overview.mdx",sourceDirName:"rendering",slug:"/rendering/overview",permalink:"/doodle/docs/rendering/overview",draft:!1,tags:[],version:"current",frontMatter:{title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Transformations",permalink:"/doodle/docs/transforms"},next:{title:"Text",permalink:"/doodle/docs/rendering/text"}},c={},m=[{value:"Efficient Rendering",id:"efficient-rendering",level:2},{value:"The Canvas",id:"the-canvas",level:2},{value:"Transforms",id:"transforms",level:3},{value:"Pattern Paints",id:"pattern-paints",level:3}],h={toc:m};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rendering"},"Rendering"),(0,i.kt)("p",null,"Rendering is managed entirely by Views. Each View draws its content to the screen via the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L484"},(0,i.kt)("inlineCode",{parentName:"a"},"render")),"\nmethod. Doodle calls this method whenever a View needs a visual update. And it is the simplest way to customize the way a View looks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class RectView: View() {\n    override fun render(canvas: Canvas) {\n        canvas.rect(bounds.atOrigin, Blue.paint)\n    }\n}\n")),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"RectView")," draws a filled rectangle covering its bounds. The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/ColorPaint.kt#L32"},(0,i.kt)("inlineCode",{parentName:"a"},"paint")),"\nextension on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/Color.kt#L12"},(0,i.kt)("inlineCode",{parentName:"a"},"Color")),"\ncreates a new ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/ColorPaint.kt#L5"},(0,i.kt)("inlineCode",{parentName:"a"},"ColorPaint")),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"render")," is automatically called on ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," changes and ",(0,i.kt)("inlineCode",{parentName:"p"},"visible")," changing to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"))),(0,i.kt)("h2",{id:"efficient-rendering"},"Efficient Rendering"),(0,i.kt)("p",null,"Doodle optimizes rendering to avoid re-applying operations when rendering the same content repeatedly. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Timer")," app\nbelow renders the epoch time every millisecond. However, Doodle only updates the changing regions (i.e. the DOM for Web apps). The text in this case."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Doodle uses ",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/measured/"},"Measured")," for time, angles etc.")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(l.l,{functionName:"timer",height:"200",mdxType:"DoodleApp"})),(0,i.kt)(r.Z,{value:"code1",label:"View DSL",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Timer(display: Display, clock: Clock, scheduler: Scheduler): Application {\n    init {\n        display += view {\n            size = Size(200)\n\n            scheduler.every(1 * milliseconds) {\n                rerender()\n            }\n\n            render = {\n                rect(bounds.atOrigin, Stroke(Red))\n                text("${clock.epoch}", color = Black)\n                rect(bounds.at(y = 20.0), color = Green)\n            }\n        }\n    }\n\n    override fun shutdown() {}\n}\n'))),(0,i.kt)(r.Z,{value:"code2",label:"Render Property",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Timer(display: Display, clock: Clock, scheduler: Scheduler): Application {\n    init {\n        display += object: View() {\n            private var time by renderProperty(clock.epoch)\n\n            init {\n                size = Size(200)\n\n                scheduler.every(1 * milliseconds) {\n                    time = clock.epoch\n                }\n            }\n\n            override fun render(canvas: Canvas) {\n                canvas.rect(bounds.atOrigin, Stroke(Red))\n                canvas.text("$time", color = Black)\n                canvas.rect(bounds.at(y = 20.0), color = Green)\n            }\n        }\n    }\n\n    override fun shutdown() {}\n}\n')))),(0,i.kt)("h2",{id:"the-canvas"},"The Canvas"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method provides a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/Canvas.kt#L24"},(0,i.kt)("inlineCode",{parentName:"a"},"Canvas")),"\nonto which a ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," can draw. Canvas offers a rich set of operations for geometric shapes, paths, images, and text. It\nalso supports different ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/Paint.kt#L4"},(0,i.kt)("inlineCode",{parentName:"a"},"Paint")),"\ntypes (i.e. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/ColorPaint.kt#L5"},(0,i.kt)("inlineCode",{parentName:"a"},"ColorPaint")),",\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/LinearGradientPaint.kt#L31"},(0,i.kt)("inlineCode",{parentName:"a"},"LinearGradientPaint")),", and\n",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/rendering/overview#pattern-paints"},"PatternPaint"),") for filling regions."),(0,i.kt)("p",null,"The Canvas provided to ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," has a coordinate system anchored to the View's origin, so ",(0,i.kt)("inlineCode",{parentName:"p"},"0,0")," on the View and Canvas are the same point.\nThe Canvas itself extends in all directions beyond the bounds of the View; but the contents drawn to it will be clipped to the view's\nbounds by default."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Sub-classes can disable clipping by setting ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L123"},(0,i.kt)("inlineCode",{parentName:"a"},"clipCanvasToBounds")),"\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,i.kt)("h3",{id:"transforms"},"Transforms"),(0,i.kt)("p",null,"The canvas can also be transformed using any ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/AffineTransform.kt#L16"},(0,i.kt)("inlineCode",{parentName:"a"},"AffineTransform")),".\nTransforms can also be nested to create combined effects to. Here, the view flips the Canvas horizontally around its mid-point and draws some text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyView: View() {\n    override fun render(canvas: Canvas) {\n        canvas.flipHorizontally(around = width / 2) {\n            text("hello", color = Black)\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"pattern-paints"},"Pattern Paints"),(0,i.kt)("p",null,"Sometimes you need to fill a region with a repeating pattern, like an image or some geometric shapes. Doodle has the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/PatternPaint.kt#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"PatternPaint")),' to make this easy.\nThis paint has a "render" body that provides a powerful and familiar way of creating repeating patterns.'),(0,i.kt)("p",null,"You create this paint by specifying a ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"paint")," lambda, which has access to the full ",(0,i.kt)("inlineCode",{parentName:"p"},"Canvas")," APIs."),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(l.l,{functionName:"patternPaint",height:"300",mdxType:"DoodleApp"})),(0,i.kt)(r.Z,{value:"code",label:"Code",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=io.nacular.doodle.drawing.PatternPaint.kt",title:"io.nacular.doodle.drawing.PatternPaint.kt"},"fun stripedPaint(stripeWidth : Double,\n                 evenRowColor: Color? = null,\n                 oddRowColor : Color? = null,\n                 transform   : AffineTransform2D = Identity) =\nPatternPaint(Size(if (evenRowColor.visible || oddRowColor.visible) stripeWidth else 0.0, 2 * stripeWidth), transform) {\n    evenRowColor?.paint?.let { rect(Rectangle(                  stripeWidth, stripeWidth), it) }\n    oddRowColor?.paint?.let  { rect(Rectangle(0.0, stripeWidth, stripeWidth, stripeWidth), it) }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyView: View() {\n    val stripeWidth = 20.0\n    var paintAngle by renderProperty(0 * degrees)\n\n    override fun render(canvas: Canvas) {\n        val paintCenter = Point(canvas.size.width / 2, canvas.size.height / 2)\n\n        canvas.rect(bounds.atOrigin, stripedPaint(\n                stripeWidth  = stripeWidth,\n                evenRowColor = Red,\n                oddRowColor  = White,\n                transform    = Identity.rotate(around = paintCenter, by = paintAngle)\n        ))\n    }\n}\n")))),(0,i.kt)("p",null,"This app shows how a ",(0,i.kt)("inlineCode",{parentName:"p"},"PatternPaint")," can be transformed using ",(0,i.kt)("inlineCode",{parentName:"p"},"PatternTransform"),", like rotated around its center for example."))}u.isMDXComponent=!0}}]);