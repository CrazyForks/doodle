"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[197],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Hello Doodle","href":"/doodle/docs/introduction","docId":"introduction"},{"type":"link","label":"Installation","href":"/doodle/docs/installation","docId":"installation"},{"type":"link","label":"Applications","href":"/doodle/docs/applications","docId":"applications"},{"type":"link","label":"Views","href":"/doodle/docs/views","docId":"views"},{"type":"category","label":"Displaying Views","items":[{"type":"link","label":"The Display","href":"/doodle/docs/display/overview","docId":"display/overview"},{"type":"link","label":"Where\'s My View?","href":"/doodle/docs/display/gotchas","docId":"display/gotchas"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Rendering","items":[{"type":"link","label":"Overview","href":"/doodle/docs/rendering/overview","docId":"rendering/overview"},{"type":"link","label":"Text","href":"/doodle/docs/rendering/text","docId":"rendering/text"},{"type":"link","label":"Images","href":"/doodle/docs/rendering/images","docId":"rendering/images"},{"type":"link","label":"Colors","href":"/doodle/docs/rendering/colors","docId":"rendering/colors"},{"type":"link","label":"3D","href":"/doodle/docs/rendering/3d","docId":"rendering/3d"},{"type":"link","label":"Behaviors","href":"/doodle/docs/rendering/behaviors","docId":"rendering/behaviors"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Layout","items":[{"type":"link","label":"Positioning","href":"/doodle/docs/layout/overview","docId":"layout/overview"},{"type":"link","label":"Using Layouts","href":"/doodle/docs/layout/layouts","docId":"layout/layouts"},{"type":"link","label":"Constraints","href":"/doodle/docs/layout/constraints","docId":"layout/constraints"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Transforms","href":"/doodle/docs/transforms","docId":"transforms"},{"type":"category","label":"Pointer Input","items":[{"type":"link","label":"Overview","href":"/doodle/docs/pointer_input/overview","docId":"pointer_input/overview"},{"type":"link","label":"Pointer Motion Events","href":"/doodle/docs/pointer_input/pointermotion","docId":"pointer_input/pointermotion"},{"type":"link","label":"Multi-touch Support","href":"/doodle/docs/pointer_input/multitouch","docId":"pointer_input/multitouch"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Keyboard Input","href":"/doodle/docs/keyboard","docId":"keyboard"},{"type":"link","label":"Animations","href":"/doodle/docs/animations","docId":"animations"},{"type":"link","label":"Popups \u2022 Modals","href":"/doodle/docs/modals","docId":"modals"},{"type":"link","label":"Themes","href":"/doodle/docs/themes","docId":"themes"},{"type":"link","label":"Drag \u2022 Drop","href":"/doodle/docs/dragdrop","docId":"dragdrop"},{"type":"category","label":"Component Library","items":[{"type":"link","label":"Catalog","href":"/doodle/docs/ui_components/overview","docId":"ui_components/overview"},{"type":"link","label":"Forms","href":"/doodle/docs/ui_components/form","docId":"ui_components/form"},{"type":"link","label":"Form Controls","href":"/doodle/docs/ui_components/form_controls","docId":"ui_components/form_controls"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Accessibility","href":"/doodle/docs/accessibility","docId":"accessibility"}]},"docs":{"accessibility":{"id":"accessibility","title":"Accessibility","description":"Making truly accessible apps is complex and requires familiarity with a wide range of concepts. The","sidebar":"tutorialSidebar"},"animations":{"id":"animations","title":"Animations","description":"Animations are key to making an app feel modern and interactive. Doodle helps you achieve this with a powerful yet simple set of APIs that let you animate a wide range of things into your app. Everything you need to build sophisticated animations is available via the  interface and its related components.","sidebar":"tutorialSidebar"},"applications":{"id":"applications","title":"Applications","description":"All Doodle apps run within an . It is the entry-point for your business logic, and often the first class you write. Doodle fully initializes your app at constructor time, so there is no additional run or start method to implement. You can provide custom tear-down logic via the shutdown method though.","sidebar":"tutorialSidebar"},"display/gotchas":{"id":"display/gotchas","title":"Where\'s My View?","description":"Top-level Views are shown using the Display object","sidebar":"tutorialSidebar"},"display/overview":{"id":"display/overview","title":"The Display","description":"Top-level Views are shown using the Display object","sidebar":"tutorialSidebar"},"dragdrop":{"id":"dragdrop","title":"Drag \u2022 Drop","description":"Drag-and-drop is a form of data transfer between two Views or a View and an external component. The Views involved can be within a single app, or separate apps; and the external component may be within a 3rd-party app entirely.","sidebar":"tutorialSidebar"},"installation":{"id":"installation","title":"Installation","description":"Get Doodle working for your web or desktop project so you can begin building your user interface.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Hello Doodle","description":"Your first Doodle application.","sidebar":"tutorialSidebar"},"keyboard":{"id":"keyboard","title":"Keyboard Input","description":"Key handling is simple with Doodle; simply include the  when launching your app, and the underlying framework uses it to produce key events.","sidebar":"tutorialSidebar"},"layout/constraints":{"id":"layout/constraints","title":"Constraints","description":"Doodle also supports a constraints based layout that uses linear equations to define placement. This approach lets you write equations that define how several anchor points on a  (based on a provided ) will be placed relative to other Views and the parent View. This covers many of the common layout use cases and is easy to use.","sidebar":"tutorialSidebar"},"layout/layouts":{"id":"layout/layouts","title":"Using Layouts","description":"A  keeps track of a View and its children and automatically arranges the children as sizes change. This happens (by default) whenever View\'s  changes, or one of its children has its  change.","sidebar":"tutorialSidebar"},"layout/overview":{"id":"layout/overview","title":"Positioning","description":"Every View has an ,  position (in pixels) relative to its parent. This is exactly where the View will be rendered--unless it (or an ancestor) also has a . Doodle ensures that there is never a disconnect between a View\'s ,  and render coordinates.","sidebar":"tutorialSidebar"},"modals":{"id":"modals","title":"Popups \u2022 Modals","description":"May apps need to show content above all other content periodically in the form of a popup, or overlay. You can do this manually by adding a top-level  to the , but this has limitations. This approach would subject the View to the Display\'s , so controlling its position would be difficult. Moreover, new Views added to the Display could easily be placed above that View.","sidebar":"tutorialSidebar"},"pointer_input/multitouch":{"id":"pointer_input/multitouch","title":"Multi-touch Support","description":"Pointer events support multiple, simultaneous inputs by default. This covers the multi-touch use-case on mobile and other similar scenarios. The  class contains information about all active s for the current event. This includes those directed at the event target. Apps are therefore able to incorporate this into their pointer handling.","sidebar":"tutorialSidebar"},"pointer_input/overview":{"id":"pointer_input/overview","title":"Overview","description":"Pointer handling is easy with Doodle; simply include the  when launching your app, and the underlying framework uses it to produce key events.","sidebar":"tutorialSidebar"},"pointer_input/pointermotion":{"id":"pointer_input/pointermotion","title":"Pointer Motion Events","description":"Pointer motion events occur whenever a pointer moves within a View. They are treated separately from pointer events because of their high frequency. The PointerModule is also required to enable them. And hit detection follows the same rules as with pointer events.","sidebar":"tutorialSidebar"},"rendering/3d":{"id":"rendering/3d","title":"3D","description":"Canvas offers basic 3D capabilities through the use of s and s. This enables s to display content in a shared 3D space.","sidebar":"tutorialSidebar"},"rendering/behaviors":{"id":"rendering/behaviors","title":"Behaviors","description":"It is common to make a View\'s behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc.","sidebar":"tutorialSidebar"},"rendering/colors":{"id":"rendering/colors","title":"Colors","description":"Doodle supports RGBA colors via the  class. It uses this for things like foregroundColor and backgroundColor, and for fills/strokes via .","sidebar":"tutorialSidebar"},"rendering/images":{"id":"rendering/images","title":"Images","description":"Doodle allows you to load s into your app for rendering using the .","sidebar":"tutorialSidebar"},"rendering/overview":{"id":"rendering/overview","title":"Overview","description":"Rendering is managed entirely by Views. Each  draws its content to a Canvas via the  method. These calls update the screen so the View\'s contents are displayed. Doodle calls render whenever a View needs a visual update. This is the simplest way to define the way a custom View looks.","sidebar":"tutorialSidebar"},"rendering/text":{"id":"rendering/text","title":"Text","description":"All text, whether single or multi-lined, is drawn directly to a Canvas using the  and  methods. Text rendering is also explicit, requiring a position within the canvas and  used to fill it with. The following View draw\'s \\"hello\\" at 0,0 using the default font. But it is possible to change the font, letter, word and line spacing (for multi-lined text) as well.","sidebar":"tutorialSidebar"},"themes":{"id":"themes","title":"Themes","description":"Doodle apps can use s to create a consistent look and behavior across their Views. Doodle has built-in support for a Native and Basic theme (which has a light and dark variant). The  styles controls like buttons, text fields, and scroll panels using the system default styles and behaviors. The  provides a customizable foundation to further build on.","sidebar":"tutorialSidebar"},"transforms":{"id":"transforms","title":"Transforms","description":"Each  is a flat, 2D surface bound to a 2D grid. This means Views can only have an / position, and an area within the plane. However, Views can also be transformed using Affine Transformations (and perspective) that alter the way they are displayed. These transforms allow you to change a View\'s position and shape in the full 3D volume.","sidebar":"tutorialSidebar"},"ui_components/form":{"id":"ui_components/form","title":"Forms","description":"Doodle forms make data collection simple, while still preserving flexibility to build just the right experience. They hide a lot of the complexity associated with mapping visual components to fields, state management, and validation. The result is an intuitive metaphor modeled around the idea of a constructor.","sidebar":"tutorialSidebar"},"ui_components/form_controls":{"id":"ui_components/form_controls","title":"Form Controls","description":"Doodle has many built-in controls that cover a range of data types for forms. These controls come as functions that return s. They are all found within the io.nacular.doodle.controls.form package.","sidebar":"tutorialSidebar"},"ui_components/overview":{"id":"ui_components/overview","title":"Catalog","description":"Doodle has several UI components in the Controls library. Here are a few of the common ones. Access these by adding a dependency to","sidebar":"tutorialSidebar"},"views":{"id":"views","title":"Views","description":"App building blocks","sidebar":"tutorialSidebar"}}}')}}]);