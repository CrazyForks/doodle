"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[930],{694:function(n,e,o){o.r(e),o.d(e,{assets:function(){return c},contentTitle:function(){return p},default:function(){return v},frontMatter:function(){return d},metadata:function(){return m},toc:function(){return u}});var t=o(3117),a=o(102),i=(o(7294),o(3905)),r=o(9877),l=o(8215),s=["components"],d={hide_title:!0,title:"Installing Doodle",description:"Get Doodle working for your web or desktop project so you can begin building your user interface."},p="Installation",m={unversionedId:"installation",id:"installation",title:"Installing Doodle",description:"Get Doodle working for your web or desktop project so you can begin building your user interface.",source:"@site/docs/installation.mdx",sourceDirName:".",slug:"/installation",permalink:"/doodle/docs/installation",tags:[],version:"current",frontMatter:{hide_title:!0,title:"Installing Doodle",description:"Get Doodle working for your web or desktop project so you can begin building your user interface."},sidebar:"tutorialSidebar",previous:{title:"Hello Doodle",permalink:"/doodle/docs/introduction"},next:{title:"Doodle Applications",permalink:"/doodle/docs/applications"}},c={},u=[{value:"Pure Javascript Project",id:"pure-javascript-project",level:2},{value:"Pure JVM Project",id:"pure-jvm-project",level:2},{value:"Multi-platform Project",id:"multi-platform-project",level:2}],g={toc:u};function v(n){var e=n.components,o=(0,a.Z)(n,s);return(0,i.kt)("wrapper",(0,t.Z)({},g,o,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Doodle apps are built using ",(0,i.kt)("a",{parentName:"p",href:"http://www.gradle.org"},"Gradle"),", like other Kotlin JS (Javascript) or Multi-Platform projects.\nLearn more by checking out  the Kotlin ",(0,i.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/getting-started.html"},"docs"),"."),(0,i.kt)("h2",{id:"pure-javascript-project"},"Pure Javascript Project"),(0,i.kt)("p",null,"You can set up a pure Javascript app with the following build scripts."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=build.gradle.kts",title:"build.gradle.kts"},'plugins {\n    id ("org.jetbrains.kotlin.js") version "1.7.10"\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    js().browser()\n\n    val doodleVersion = "0.8.2" // <--- Latest Doodle version\n\n    dependencies {\n        implementation ("io.nacular.doodle:core:$doodleVersion"   )\n        implementation ("io.nacular.doodle:browser:$doodleVersion")\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n}\n'))),(0,i.kt)(l.Z,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"title=build.gradle",title:"build.gradle"},"plugins {\n    id 'org.jetbrains.kotlin.js' version '1.7.10'\n}\n\nversion = '1.0.0'\ngroup   = 'com.my.cool.app'\n\nrepositories {\n    mavenCentral()\n}\n\next {\n    doodle_version = '0.8.2' // <--- Latest Doodle version\n}\n\nkotlin {\n    js().browser()\n\n    dependencies {\n        implementation \"io.nacular.doodle:core:$doodle_version\"\n        implementation \"io.nacular.doodle:browser:$doodle_version\"\n\n        // Optional\n        // implementation \"io.nacular.doodle:controls:$doodle_version\"\n        // implementation \"io.nacular.doodle:animation:$doodle_version\"\n        // implementation \"io.nacular.doodle:themes:$doodle_version\"\n    }\n}\n")))),(0,i.kt)("h2",{id:"pure-jvm-project"},"Pure JVM Project"),(0,i.kt)("p",null,"You can set up a pure JVM app with the following build scripts."),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=build.gradle.kts",title:"build.gradle.kts"},'plugins {\n    id ("org.jetbrains.kotlin.jvm") version "1.7.10"\n    application\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev")\n    }\n}\n\nkotlin {\n    target.compilations.all {\n        kotlinOptions {\n            jvmTarget = "11"\n        }\n    }\n\n    val doodleVersion = "0.8.2" // <--- Latest Doodle version\n\n    dependencies {\n        val osName = System.getProperty("os.name")\n        val targetOs = when {\n            osName == "Mac OS X"       -> "macos"\n            osName.startsWith("Win"  ) -> "windows"\n            osName.startsWith("Linux") -> "linux"\n            else                       -> error("Unsupported OS: $osName")\n        }\n\n        val osArch = System.getProperty("os.arch")\n        val targetArch = when (osArch) {\n            "x86_64", "amd64" -> "x64"\n            "aarch64"         -> "arm64"\n            else              -> error("Unsupported arch: $osArch")\n        }\n\n        val target = "$targetOs-$targetArch"\n\n        implementation ("io.nacular.doodle:core:$doodleVersion"               )\n        implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n}\n\napplication {\n    mainClass.set("YOUR_CLASS")\n}\n'))),(0,i.kt)(l.Z,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"title=build.gradle",title:"build.gradle"},'plugins {\n    id \'org.jetbrains.kotlin.jvm\' version \'1.7.10\'\n    id \'application\'\n}\n\nversion = \'1.0.0\'\ngroup   = \'com.my.cool.app\'\n\nrepositories {\n    mavenCentral()\n    maven {\n        url "https://maven.pkg.jetbrains.space/public/p/compose/dev"\n    }\n}\n\next {\n    doodle_version = \'0.8.2\' // <--- Latest Doodle version\n}\n\nkotlin {\n    target.compilations.all {\n        kotlinOptions {\n            jvmTarget = "11"\n        }\n    }\n\n    dependencies {\n        targetOs = ""\n        osName = System.getProperty("os.name")\n        if      (osName ==         "Mac OS X")  targetOs = "macos"\n        else if (osName.startsWith("Win"     )) targetOs = "windows"\n        else if (osName.startsWith("Linux"   )) targetOs = "linux"\n        else                                    error("Unsupported OS: $osName")\n\n        targetArch = ""\n        osArch = System.getProperty("os.arch")\n        switch (osArch) {\n            case ["x86_64", "amd64"]: targetArch = "x64"  ; break\n            case "aarch64"          : targetArch = "arm64"; break\n            default:                  error("Unsupported arch: $osArch")\n        }\n\n        target = "$targetOs-$targetArch"\n\n        implementation ("io.nacular.doodle:core:$doodleVersion"               )\n        implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n\n        // Optional\n        // implementation "io.nacular.doodle:controls:$doodle_version"\n        // implementation "io.nacular.doodle:animation:$doodle_version"\n        // implementation "io.nacular.doodle:themes:$doodle_version"\n    }\n}\n\napplication {\n    mainClassName = "YOUR_CLASS"\n}\n')))),(0,i.kt)("h2",{id:"multi-platform-project"},"Multi-platform Project"),(0,i.kt)("p",null,"Doodle is a set of Kotlin Multi-platform (MPP) libraries. Which means you can create an MPP for your app as well. The advantage of this\nis that you can write your app entirely (except for ",(0,i.kt)("inlineCode",{parentName:"p"},"main"),") in ",(0,i.kt)("inlineCode",{parentName:"p"},"common")," code and make it available on both Web (JS) and Desktop (JVM). The\nfollowing shows how to create such an app."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"App ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/applications#app-launch"},(0,i.kt)("strong",{parentName:"a"},"launch code"))," is the only portion that needs to be in ",(0,i.kt)("inlineCode",{parentName:"p"},"js")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"jvm"),"."))),(0,i.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=build.gradle.kts",title:"build.gradle.kts"},'plugins {\n    id ("org.jetbrains.kotlin.multiplatform") version "1.7.10"\n    application\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev")\n    }\n}\n\nkotlin {\n    js().browser()\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    val doodleVersion = "0.8.2" // <--- Latest Doodle version\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:core:$doodleVersion")\n\n                // Optional\n                // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n                // implementation ("io.nacular.doodle:animation:$doodleVersion")\n                // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:browser:$doodleVersion")\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                val osName = System.getProperty("os.name")\n                val targetOs = when {\n                    osName == "Mac OS X"       -> "macos"\n                    osName.startsWith("Win"  ) -> "windows"\n                    osName.startsWith("Linux") -> "linux"\n                    else                       -> error("Unsupported OS: $osName")\n                }\n\n                val osArch = System.getProperty("os.arch")\n                val targetArch = when (osArch) {\n                    "x86_64", "amd64" -> "x64"\n                    "aarch64"         -> "arm64"\n                    else              -> error("Unsupported arch: $osArch")\n                }\n\n                val target = "$targetOs-$targetArch"\n\n                implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("YOUR_CLASS")\n}\n'))),(0,i.kt)(l.Z,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"title=build.gradle",title:"build.gradle"},'plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.7.10\'\n    id \'application\'\n}\n\nversion = \'1.0.0\'\ngroup   = \'com.my.cool.app\'\n\nrepositories {\n    mavenCentral()\n    maven {\n        url "https://maven.pkg.jetbrains.space/public/p/compose/dev"\n    }\n}\n\next {\n    doodle_version = \'0.8.2\' // <--- Latest Doodle version\n}\n\nkotlin {\n    js().browser()\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    sourceSets {\n        commonMain.dependencies {\n            implementation "io.nacular.doodle:core:$doodle_version"\n\n            // Optional\n            // implementation "io.nacular.doodle:controls:$doodle_version"\n            // implementation "io.nacular.doodle:animation:$doodle_version"\n            // implementation "io.nacular.doodle:themes:$doodle_version"\n        }\n\n        jsMain.dependencies {\n            implementation "io.nacular.doodle:browser:$doodle_version"\n        }\n\n        jvmMain.dependencies {\n            targetOs = ""\n            osName = System.getProperty("os.name")\n            if      (osName ==         "Mac OS X")  targetOs = "macos"\n            else if (osName.startsWith("Win"     )) targetOs = "windows"\n            else if (osName.startsWith("Linux"   )) targetOs = "linux"\n            else                                    error("Unsupported OS: $osName")\n\n            targetArch = ""\n            osArch = System.getProperty("os.arch")\n            switch (osArch) {\n                case ["x86_64", "amd64"]: targetArch = "x64"  ; break\n                case "aarch64"          : targetArch = "arm64"; break\n                default:                  error("Unsupported arch: $osArch")\n            }\n\n            target = "$targetOs-$targetArch"\n\n            implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n        }\n    }\n}\n\napplication {\n    mainClassName = "YOUR_CLASS"\n}\n')))))}v.isMDXComponent=!0}}]);