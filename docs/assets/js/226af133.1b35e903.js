"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[6],{3078:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>y,contentTitle:()=>h,default:()=>v,frontMatter:()=>c,metadata:()=>u,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),o=(n(8209),n(4866),n(5162),n(4903)),r=n(1912),s=n(1166);const l='package io.nacular.doodle.docs.apps\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.docs.utils.Panel\nimport io.nacular.doodle.drawing.Color.Companion.Gray\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.layout.constraints.constrain\n\nclass ConstraintCreationApp(display: Display, textMetrics: TextMetrics): Application {\n    init {\n        val panel1 = Panel(textMetrics, "Panel 1").apply { backgroundColor = Lightgray }\n        val panel2 = Panel(textMetrics, "Panel 2").apply { backgroundColor = Gray      }\n\n        display += listOf(panel1, panel2)\n\n        // use Layout that follows constraints to position items\n//sampleStart\n        display.layout = constrain(panel1, panel2) { panel1, panel2 ->\n            panel1.top    eq 0\n            panel1.left   eq 0\n            panel1.right  eq parent.right / 3\n            panel1.bottom eq parent.bottom\n\n            panel2.top    eq panel1.top\n            panel2.left   eq panel1.right\n            panel2.right  eq parent.right\n            panel2.bottom eq parent.bottom\n        }\n//sampleEnd\n    }\n\n    override fun shutdown() {}\n}',d='package io.nacular.doodle.docs.apps\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.container\nimport io.nacular.doodle.docs.utils.Panel\nimport io.nacular.doodle.drawing.Color.Companion.Gray\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.Strength.Companion.Strong\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.utils.Resizer\n\nclass ConstraintStrengthApp(display: Display, textMetrics: TextMetrics): Application {\n    init {\n        val panel = Panel(textMetrics, "Panel").apply { backgroundColor = Lightgray }\n\n        display += container {\n            this += panel\n\n            size = Size(400, 300)\n\n//sampleStart\n            layout = constrain(panel) {\n                it.left   eq     0\n                it.width  lessEq 200\n                (it.right eq     parent.right) .. Strong // ignored when conflicts with above constraint\n                it.height eq     parent.height\n            }\n//sampleEnd\n\n            render = { rect(bounds.atOrigin, fill = Gray.paint) }\n\n            // helper to resize container\n            Resizer(this).apply { movable = false }\n        }\n\n        // use Layout that follows constraints to position items\n        display.layout = constrain(display.first(), center)\n\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}',p='package io.nacular.doodle.docs.apps\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.container\nimport io.nacular.doodle.docs.utils.BlueColor\nimport io.nacular.doodle.docs.utils.Panel\nimport io.nacular.doodle.drawing.Color.Companion.Gray\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.Color.Companion.Pink\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.Strength.Companion.Weak\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.utils.Resizer\n\nclass ComplexConstraintsApp(display: Display, textMetrics: TextMetrics): Application {\n    init {\n        val panel1 = Panel(textMetrics, "1").apply { backgroundColor = Pink; width = 350.0; Resizer(this) }\n        val panel2 = Panel(textMetrics, "2").apply { backgroundColor = Gray; width =  50.0; Resizer(this) }\n        val panel3 = Panel(textMetrics, "3").apply { backgroundColor = Lightgray;           Resizer(this) }\n\n        display += container {\n            this += listOf(panel1, panel2, panel3)\n\n            size = Size(400, 300)\n\n            val inset = 5\n\n//sampleStart\n            layout = constrain(panel1, panel2, panel3) { p1, p2, p3 ->\n                p1.top    eq     inset\n                p1.left   eq     inset\n                p1.width  lessEq (parent.width - inset) / 3\n                (p1.width eq     350) .. Weak\n                p1.height eq     parent.height - 2 * inset\n\n                p2.top    eq p1.top\n                p2.left   eq p1.right\n                p2.height eq p1.height\n\n                p3.top    eq p2.top\n                p3.left   eq p2.right\n                p3.height eq p2.height\n\n                p1.width + p2.width + p3.width eq parent.width - 2 * inset\n            }\n//sampleEnd\n\n            render = { rect(bounds.atOrigin, fill = BlueColor.paint) }\n\n            // helper to resize container\n            Resizer(this).apply { movable = false }\n        }\n\n        // use Layout that follows constraints to position items\n        display.layout = constrain(display.first(), center)\n\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}',c={hide_title:!0},h="Constraints",u={unversionedId:"layout/constraints",id:"layout/constraints",title:"Constraints",description:"Doodle also supports a constraints based layout that uses linear equations to define placement. This approach lets you write equations that define how several anchor points on a  (based on a provided ) will be placed relative to other Views and the parent View. This covers many of the common layout use cases and is easy to use.",source:"@site/docs/layout/constraints.mdx",sourceDirName:"layout",slug:"/layout/constraints",permalink:"/doodle/docs/layout/constraints",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Using Layouts",permalink:"/doodle/docs/layout/layouts"},next:{title:"Transforms",permalink:"/doodle/docs/transforms"}},y={},m=[{value:"Creating Constraint Layouts",id:"creating-constraint-layouts",level:2},{value:"Readonly Attributes",id:"readonly-attributes",level:2},{value:"Constraint Strength",id:"constraint-strength",level:2},{value:"Parents Read-only By Default",id:"parents-read-only-by-default",level:2},{value:"Non-siblings Constraints",id:"non-siblings-constraints",level:2},{value:"Constraints Are Live",id:"constraints-are-live",level:2},{value:"Removing Constraints",id:"removing-constraints",level:2}],w={toc:m},g="wrapper";function v(t){let{components:e,...n}=t;return(0,i.kt)(g,(0,a.Z)({},w,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"constraints"},"Constraints"),(0,i.kt)("p",null,"Doodle also supports a constraints based layout that uses linear equations to define placement. This approach lets you write equations that define how several anchor points on a ",(0,i.kt)(s.G7x,null)," (based on a provided ",(0,i.kt)(s.YZb,null),") will be placed relative to other Views and the ",(0,i.kt)("inlineCode",{parentName:"p"},"parent")," View. This covers many of the common layout use cases and is easy to use."),(0,i.kt)("p",null,"Each linear equation is one of the following forms. Where ",(0,i.kt)("inlineCode",{parentName:"p"},"attribute")," refers to anchor points or ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"height"),"."),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nview1.attribute eq        constant1 * view2.attribute + constant2\nview1.attribute lessEq    constant1 * view2.attribute + constant2\nview1.attribute greaterEq constant1 * view2.attribute + constant2\n"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also include multiple Views in a single equation:"),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nview1.width + 2 * view2.width eq parent.width - 10\n"),(0,i.kt)("p",{parentName:"admonition"},"The fact that these are equations (or inequalities) means you can flip the order of attributes and have the same effect, as long as you obey the rules of mathematics and change signs accordingly. So the equation above is the same as:"),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nview1.width + 10 eq parent.width - 2 * view2.width\n")),(0,i.kt)("p",null,"The Constraint system will modify all the attributes provided to it to ensure every equation (or inequality) is satisfied. In the above example, that means updating widths fo ",(0,i.kt)("inlineCode",{parentName:"p"},"view1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"view2")," to ensure they add up to the ",(0,i.kt)("inlineCode",{parentName:"p"},"parent")," width minus 10."),(0,i.kt)("h2",{id:"creating-constraint-layouts"},"Creating Constraint Layouts"),(0,i.kt)("p",null,"Constraint layouts are created using the ",(0,i.kt)("inlineCode",{parentName:"p"},"constrain")," function. This function takes a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"s and a lambda that defines the constraints to apply. For example, the following shows a new layout being created to position and size two panels within a container:"),(0,i.kt)(o.l,{functionName:"createConstraints",height:"300",mdxType:"DoodleApp"}),(0,i.kt)(r.O,{mdxType:"KPlayground"},l),(0,i.kt)("h2",{id:"readonly-attributes"},"Readonly Attributes"),(0,i.kt)("p",null,"Sometimes it is necessary to refer to a View's attribute in a constraint without the risk of changing it. This comes up if a View has some property specified outside the constraint block that should be preserved, of if you simply want ",(0,i.kt)("inlineCode",{parentName:"p"},"readOnly")," access to the attribute."),(0,i.kt)("p",null,"To do this, you simply use the ",(0,i.kt)("inlineCode",{parentName:"p"},"readOnly")," property of the attribute:"),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\n// view1.width won't be modified to satisfy this equation\nview2.width eq view1.width.readOnly * 2\n"),(0,i.kt)("h2",{id:"constraint-strength"},"Constraint Strength"),(0,i.kt)("p",null,"It is possible to define constraints that conflict with each other. Such situations result in an error since they have no clear solution. But you can resolve these conflicts by providing a relative priority or ",(0,i.kt)(s.PsQ,null)," for the constraints in question. This allows the engine to break lower strength constraints when there are conflicts."),(0,i.kt)("p",null,"All constraints have the ",(0,i.kt)("inlineCode",{parentName:"p"},"Required")," strength by default. This is the highest possible strength that tells the engine to enforce such a constraint. But you can specify the strength explicitly as follows."),(0,i.kt)(o.l,{functionName:"constraintStrength",height:"400",mdxType:"DoodleApp"}),(0,i.kt)("p",null,"This results in the panel matching its parent's width whenever it is 200 or less."),(0,i.kt)(r.O,{mdxType:"KPlayground"},d),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Notice that the constraints indicate a weaker priority/strength for the view's right property. This approach allows you to relax certain constraints when there are conflicts.")),(0,i.kt)("p",null,"The following shows a more complex set of constraints that also use strengths and inequality."),(0,i.kt)(o.l,{functionName:"complexConstraints",height:"400",mdxType:"DoodleApp"}),(0,i.kt)(r.O,{mdxType:"KPlayground"},p),(0,i.kt)("h2",{id:"parents-read-only-by-default"},"Parents Read-only By Default"),(0,i.kt)("p",null,"Doodle Layouts are all independent and operate primarily on the contents of their container without modifying the container's size. This helps avoid contention where the container itself is within a Layout that disagrees about the size it should have. Constraints support to this approach by having all attributes of the parent container default to read-only. This means the properties of ",(0,i.kt)("inlineCode",{parentName:"p"},"parent")," will not be modified by any constraint as the default. In effect, all parent attributes can be thought of as pure constants."),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\n// parent.width can be thought of as constant number\nview.width eq parent.width\n"),(0,i.kt)("p",null,"However, it can be very useful to propagate size information up to the parent container. A good example is wanting to ensure the parent is large enough to show its children. This can be done by explicitly designating a parent's attribute as ",(0,i.kt)("inlineCode",{parentName:"p"},"writable"),". Doing so means that attribute ",(0,i.kt)("strong",{parentName:"p"},"will")," be updated as needed to satisfy the constraint."),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\n// parent.width will be updated if needed\nview.width eq parent.width.writable\n"),(0,i.kt)("h2",{id:"non-siblings-constraints"},"Non-siblings Constraints"),(0,i.kt)("p",null,'You can constrain any set of Views, regardless of their hierarchy. But, the Constraint Layout will only update the Views that within the Container it is laying out. All other Views are treated as readOnly. This adjustment happens automatically as the View hierarchy changes. A key consequence is that Views outside the current parent will not conform to any constraints they "participate" in. This avoids the issue of a layout for one container affecting the children of another.'),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nval view1 = view {}\nval view2 = view {}\nval container1 = container {\n    children += view1\n    layout    = constrain(view1, view2) { v1, v2 ->\n        v1.width eq v2.width // v2.width treated as immutable value (i.e. v2.width.readOnly)\n    }\n}\n"),(0,i.kt)("h2",{id:"constraints-are-live"},"Constraints Are Live"),(0,i.kt)("p",null,'The constraint definitions provided when creating a layout are "live", meaning they are invoked on every layout. This makes it easy to capture external variables or use conditional logic in constraints. But it also means care has to be taken to avoid inefficient layouts. Below is an example of a layout that changes behavior based on a threshold variable.'),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nval threshold = 100\n\ncontainer.layout = constrain(view1, view2) { v1, v2 ->\n    // This will result in different constraints being applied dynamically as\n    // container.width crosses the threshold\n    when {\n        container.width < threshold -> it.width eq parent.width / 2\n        else                        -> it.width eq parent.width\n    }\n}\n"),(0,i.kt)("h2",{id:"removing-constraints"},"Removing Constraints"),(0,i.kt)("p",null,"Live constraints make it easy to support conditional logic, which covers most cases where constraints may need to be suppressed. But sometimes it is necessary to remove a set of constraints from a layout entirely. This is done in a very similar way to how we define constraints to begin with. Removing constraints is analogous to removing a handler. That is if we think of a constraint block and the list of Views it targets as a single handler that is invoked whenever a layout is triggered. In that way, removing the constraints requires specifying the same list of Views and the block when removing it."),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nval constraints: ConstraintDslContext.(Bounds, Bounds) -> Unit = { v1, v2 ->\n  // ...\n}\n\nval layout: ConstraintLayout = constrain(view1, view2, constraints)\n\n// remove constraints applied to these views\nlayout.unconstrain(view1, view2, constraints)\n"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The order and number of Views provided to ",(0,i.kt)(s.OA1,null)," must match what was used during ",(0,i.kt)(s.xk2,null),". That is because changing order or arity would result in a different constraint effect than was applied."),(0,i.kt)("p",{parentName:"admonition"},"You should store a reference to the constrain block to ensure it is identified as the same one used during register. Do not do the following"),(0,i.kt)(r.O,{mdxType:"KPlayground"},"\nval layout = constrain(view1) { it.center eq parent.center }\n\n// DO NOT DO THIS\nlayout.unconstraint(view1) { it.center eq parent.center }\n")))}v.isMDXComponent=!0}}]);