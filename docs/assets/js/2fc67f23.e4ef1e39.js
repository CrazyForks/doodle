"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[4408],{9712:(e,n,o)=>{o.d(n,{SI:()=>s,cp:()=>d});var i=o(7624),t=o(4552),a=(o(7793),o(6236),o(7492));const s=[];function r(e){const n={admonition:"admonition",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(n.admonition,{title:"Module Required",type:"info",children:[(0,i.jsxs)("p",{children:["You must include the ",e.link," in your application in order to use these features."]}),(0,i.jsx)(a.A,{children:e.module}),(0,i.jsx)(n.p,{children:"Doodle uses opt-in modules like this to improve bundle size."})]})}function d(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},7912:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>k,contentTitle:()=>m,default:()=>w,frontMatter:()=>h,metadata:()=>v,toc:()=>x});var i=o(7624),t=o(4552),a=o(7492),s=o(3220),r=o(9712);const d="package keyboard\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.KeyboardModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport org.kodein.di.instance\nimport rendering.MyApp\n\n//sampleStart\nfun main() {\n    /** Include [KeyboardModule] when launching your app */\n    application(modules = listOf(KeyboardModule)) {\n        MyApp(instance())\n    }\n}\n\n/**\n * Key events will fire for this app when launched with [KeyboardModule]\n */\nclass MyApp(display: Display): Application {\n    override fun shutdown() {}\n}\n//sampleEnd",l="package focus\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.KeyboardModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.focus.FocusManager\nimport org.kodein.di.instance\n\n//sampleStart\nfun main() {\n    application(modules = listOf(KeyboardModule)) {\n        // FocusManager is available in the KeyboardModule\n        MyApp(display = instance(), focusManager = instance())\n    }\n}\n\nclass MyApp(display: Display, focusManager: FocusManager): Application {\n    init {\n        val view = view {}\n\n        display += view\n\n        // ...\n\n        focusManager.requestFocus(view)\n\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd",p="package keyboard\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.event.KeyEvent\nimport io.nacular.doodle.event.KeyListener\nimport io.nacular.doodle.event.KeyListener.Companion.on\nimport io.nacular.doodle.event.KeyListener.Companion.pressed\n\nfun example(view: View) {\n//sampleStart\n    // Listen to pressed/released via interface override\n    view.keyChanged += object: KeyListener {\n        override fun pressed(event: KeyEvent) {\n            // ..\n        }\n\n        override fun released(event: KeyEvent) {\n            // ..\n        }\n    }\n\n    // Listener to pressed via DSL\n    view.keyChanged += pressed { event -> /* .. */ }\n\n    // Listen to pressed/released via DSL\n    view.keyChanged += on(\n        pressed  = { event -> /* .. */ },\n        released = { event -> /* .. */ },\n    )\n//sampleEnd\n}",c="package keyboard\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.event.KeyListener.Companion.pressed\n\nfun consume(view: View) {\n//sampleStart\n    view.keyChanged += pressed { event ->\n        // ... take action based on event\n\n        event.consume() // indicate that no other listeners should be notified\n    }\n//sampleEnd\n}\n",u='package keyboard\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.event.KeyListener.Companion.pressed\nimport io.nacular.doodle.event.KeyText.Companion.Backspace\nimport io.nacular.doodle.event.KeyText.Companion.Enter\n\nfun virtualKeys(view: View) {\n//sampleStart\n    view.keyChanged += pressed { event ->\n        when (event.key) {\n            Enter     -> { /* ... */ }\n            Backspace -> { /* ... */ }\n            // ...\n        }\n    }\n\n    view.keyChanged += pressed { event ->\n        // this will be user-appropriate text when the key pressed is not\n        // one of the "named" keys (i.e. Tab, Shift, Enter, ...)\n        event.key.text\n    }\n//sampleEnd\n}\n',y="package keyboard\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.event.KeyCode.Companion.AltLeft\nimport io.nacular.doodle.event.KeyCode.Companion.AltRight\nimport io.nacular.doodle.event.KeyCode.Companion.Backspace\nimport io.nacular.doodle.event.KeyListener.Companion.pressed\n\nfun physicalKeys(view: View) {\n//sampleStart\n    view.keyChanged += pressed { event ->\n        when (event.code) {\n            AltLeft   -> { /* ... */ }\n            AltRight  -> { /* ... */ }\n            Backspace -> { /* ... */ }\n            // ...\n        }\n    }\n//sampleEnd\n}\n",h={hide_title:!0,title:"Keyboard"},m=void 0,v={id:"user_input/keyboard",title:"Keyboard",description:"Keyboard input",source:"@site/docs/user_input/keyboard.mdx",sourceDirName:"user_input",slug:"/user_input/keyboard",permalink:"/doodle/docs/user_input/keyboard",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Keyboard"},sidebar:"tutorialSidebar",previous:{title:"Pointer",permalink:"/doodle/docs/user_input/pointer"},next:{title:"Event Sinking | Bubbling",permalink:"/doodle/docs/user_input/eventorder"}},k={},x=[{value:"Keyboard input",id:"keyboard-input",level:2},...r.SI,{value:"Key Listeners",id:"key-listeners",level:2},{value:"Key events",id:"key-events",level:2},{value:"Virtual keys and text",id:"virtual-keys-and-text",level:2},{value:"Physical keys",id:"physical-keys",level:2}];function f(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",strong:"strong",...(0,t.M)(),...e.components};return s.m||b("api",!1),s.m.EventConsume||b("api.EventConsume",!0),s.m.EventSource||b("api.EventSource",!0),s.m.FocusManager||b("api.FocusManager",!0),s.m.KeyEventCode||b("api.KeyEventCode",!0),s.m.KeyEventKey||b("api.KeyEventKey",!0),s.m.KeyListener||b("api.KeyListener",!0),s.m.KeyboardModule||b("api.KeyboardModule",!0),s.m.view||b("api.view",!1),s.m.view.keyChanged||b("api.view.keyChanged",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"keyboard-input",children:"Keyboard input"}),"\n",(0,i.jsxs)(n.p,{children:["Key handling is simple with Doodle; simply include the ",(0,i.jsx)(n.code,{children:"KeyboardModule"})," when launching your app, and the underlying framework uses it to produce key events."]}),"\n",(0,i.jsx)(r.cp,{link:(0,i.jsx)(s.m.KeyboardModule,{}),module:d}),"\n",(0,i.jsx)(n.p,{children:"A View must gain focus in order to begin receiving key events. This ensures that only a single View can receive key events at any time within the app."}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(s.m.FocusManager,{})," to control focus. It is included in the ",(0,i.jsx)(n.code,{children:"KeyboardModule"}),". Just inject it into your app to begin managing the focus."]}),"\n",(0,i.jsx)(a.A,{children:l}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Some controls (i.e. ",(0,i.jsx)(n.a,{href:"../ui_components/overview#textfield",children:"TextField"}),") also manage their focus when styled in the native theme"]})}),"\n",(0,i.jsx)(n.h2,{id:"key-listeners",children:"Key Listeners"}),"\n",(0,i.jsxs)(n.p,{children:["Views are able to receive key events once the ",(0,i.jsx)(s.m.KeyboardModule,{})," is loaded and they have ",(0,i.jsx)(n.code,{children:"focus"}),". You can then attach a ",(0,i.jsx)(s.m.KeyListener,{})," to any View and get notified whenever it has focus and a key is ",(0,i.jsx)(n.strong,{children:"Pressed"})," or ",(0,i.jsx)(n.strong,{children:"Released"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You get these notifications by registering with a View's ",(0,i.jsx)(s.m.view.keyChanged,{})," property."]}),"\n",(0,i.jsx)(a.A,{children:p}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(s.m.KeyListener,{})," has no-op defaults for the 2 events, so you only need to implement the ones you need."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Notice that ",(0,i.jsx)(s.m.view.keyChanged,{}),"--like other observable properties--supports many observers and enables you to add/remove\nan observer any time."]})}),"\n",(0,i.jsx)(n.h2,{id:"key-events",children:"Key events"}),"\n",(0,i.jsxs)(n.p,{children:["The event provided to key listeners carries information about the View it originated from (",(0,i.jsx)(s.m.EventSource,{}),"), and various attributes about the key that was pressed or released."]}),"\n",(0,i.jsxs)(n.p,{children:["Key events are ",(0,i.jsx)(n.strong,{children:"consumable"}),". This means any observer can call ",(0,i.jsx)(s.m.EventConsume,{})," on the event and prevent subsequent listeners from receiving it."]}),"\n",(0,i.jsx)(a.A,{children:c}),"\n",(0,i.jsx)(n.h2,{id:"virtual-keys-and-text",children:"Virtual keys and text"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"KeyEvent"}),"'s ",(0,i.jsx)(s.m.KeyEventKey,{}),' is a layout independent identifier that tells you which "virtual key" was pressed or which text the key can be translated into. Most key handling use-cases should use this property to compare keys.']}),"\n",(0,i.jsx)(a.A,{children:u}),"\n",(0,i.jsx)(n.h2,{id:"physical-keys",children:"Physical keys"}),"\n",(0,i.jsx)(n.p,{children:'Some applications will require the use of "physical" keys instead of virtual ones. This makes sense for games or other apps where the key position on a physical keyboard matters.'}),"\n",(0,i.jsxs)(n.p,{children:["This information comes from ",(0,i.jsx)(n.code,{children:"KeyEvent"}),"'s ",(0,i.jsx)(s.m.KeyEventCode,{}),"."]}),"\n",(0,i.jsx)(a.A,{children:y}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"Physical keys do not take keyboard differences and locale into account; so avoid them if possible"})})]})}function w(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}function b(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);