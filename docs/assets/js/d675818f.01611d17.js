"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[6738],{2418:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Hello Doodle","href":"/doodle/docs/introduction","docId":"introduction","unlisted":false},{"type":"link","label":"Whats New \u2728","href":"/doodle/docs/whatsnew","docId":"whatsnew","unlisted":false},{"type":"link","label":"Migrating to 0.11.0","href":"/doodle/docs/migrating/0.10.x_0.11.0","docId":"migrating/0.10.x_0.11.0","unlisted":false},{"type":"link","label":"Installation","href":"/doodle/docs/installation","docId":"installation","unlisted":false},{"type":"category","label":"Fundamentals","collapsed":false,"items":[{"type":"link","label":"Applications","href":"/doodle/docs/applications","docId":"applications","unlisted":false},{"type":"link","label":"Displays","href":"/doodle/docs/display","docId":"display","unlisted":false},{"type":"link","label":"Views","href":"/doodle/docs/views","docId":"views","unlisted":false},{"type":"link","label":"Rendering","href":"/doodle/docs/rendering","docId":"rendering","unlisted":false},{"type":"link","label":"Layout","href":"/doodle/docs/layout","docId":"layout","unlisted":false},{"type":"link","label":"User Input","href":"/doodle/docs/userinput","docId":"userinput","unlisted":false}],"collapsible":true},{"type":"category","label":"Advanced Topics","items":[{"type":"link","label":"Transforms","href":"/doodle/docs/transforms","docId":"transforms","unlisted":false},{"type":"link","label":"Animation","href":"/doodle/docs/animations","docId":"animations","unlisted":false},{"type":"link","label":"Drag \u2022 Drop","href":"/doodle/docs/dragdrop","docId":"dragdrop","unlisted":false},{"type":"link","label":"Popups \u2022 Modals","href":"/doodle/docs/modals","docId":"modals","unlisted":false},{"type":"link","label":"Theming","href":"/doodle/docs/theming","docId":"theming","unlisted":false},{"type":"link","label":"Accessibility","href":"/doodle/docs/accessibility","docId":"accessibility","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Component Library","collapsed":false,"items":[{"type":"link","label":"Catalog","href":"/doodle/docs/ui_components/overview","docId":"ui_components/overview","unlisted":false},{"type":"link","label":"Forms","href":"/doodle/docs/ui_components/form","docId":"ui_components/form","unlisted":false},{"type":"link","label":"Form Controls","href":"/doodle/docs/ui_components/form_controls","docId":"ui_components/form_controls","unlisted":false}],"collapsible":true},{"type":"category","label":"Troubleshoot","items":[{"type":"link","label":"Where\'s My View?","href":"/doodle/docs/troubleshooting/gotchas","docId":"troubleshooting/gotchas","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Platform Specific","items":[{"type":"link","label":"Desktop","href":"/doodle/docs/platform_specific/desktop","docId":"platform_specific/desktop","unlisted":false},{"type":"link","label":"Web","href":"/doodle/docs/platform_specific/web","docId":"platform_specific/web","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Tutorials","href":"https://nacular.github.io/doodle-tutorials"},{"type":"link","label":"API Docs","href":"https://nacular.github.io/doodle-api/"}]},"docs":{"accessibility":{"id":"accessibility","title":"Accessibility","description":"Making truly accessible apps is complex and requires familiarity with a wide range of concepts. The","sidebar":"tutorialSidebar"},"animations":{"id":"animations","title":"Animation","description":"Animations are key to making an app feel modern and interactive. Doodle helps you achieve this with a powerful yet simple set of APIs that let you animate a wide range of things into your app. Everything you need to build sophisticated animations is available via the  interface and its related components.","sidebar":"tutorialSidebar"},"applications":{"id":"applications","title":"Applications","description":"All Doodle apps run within an . It is the entry-point for your business logic, and often the first class you write. Doodle fully initializes your app at constructor time, so there is no additional run or start method to implement. You can provide custom tear-down logic via the shutdown method though.","sidebar":"tutorialSidebar"},"display":{"id":"display","title":"Displays","description":"The  holds an app\'s  hierarchy within a window, and behaves like a basic container. It is not a View however, so many of the capabilities of Views are not available for the Display.","sidebar":"tutorialSidebar"},"dragdrop":{"id":"dragdrop","title":"Drag \u2022 Drop","description":"Drag-and-drop is a form of data transfer between two Views or a View and an external component. The Views involved can be within a single app, or separate apps; and the external component may be within a 3rd-party app entirely.","sidebar":"tutorialSidebar"},"installation":{"id":"installation","title":"Installation","description":"Supporting a single platform","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Hello Doodle","description":"Your first Doodle application.","sidebar":"tutorialSidebar"},"layout":{"id":"layout","title":"Layout","description":"View bounds","sidebar":"tutorialSidebar"},"migrating/0.10.x_0.11.0":{"id":"migrating/0.10.x_0.11.0","title":"Migrating to 0.11.0","description":"Upgrade to Kotlin 2.0","sidebar":"tutorialSidebar"},"modals":{"id":"modals","title":"Popups \u2022 Modals","description":"May apps need to show content above all other content periodically in the form of a popup, or overlay. You can do this manually by adding a top-level  to the , but this has limitations. This approach would subject the View to the Display\'s , so controlling its position would be difficult. Moreover, new Views added to the Display could easily be placed above that View.","sidebar":"tutorialSidebar"},"platform_specific/desktop":{"id":"platform_specific/desktop","title":"Desktop","description":"Multi-window apps","sidebar":"tutorialSidebar"},"platform_specific/web":{"id":"platform_specific/web","title":"Web","description":"Host apps in HTML elements","sidebar":"tutorialSidebar"},"rendering":{"id":"rendering","title":"Rendering","description":"Doodle automatically manages rendering of Views, and this covers almost all use-cases. Each  draws its content to a Canvas provided during calls to the  method. This either presents the View\'s contents on the screen for the first time or updates them on subsequent calls.","sidebar":"tutorialSidebar"},"theming":{"id":"theming","title":"Theming","description":"Behaviors","sidebar":"tutorialSidebar"},"transforms":{"id":"transforms","title":"Transforms","description":"Each  is a flat, 2D surface bound to a 2D grid. This means Views can only have an / position, and an area within the plane. However, Views can also be transformed using Affine Transformations (and perspective) that alter the way they are displayed. These transforms allow you to change a View\'s position and shape in the full 3D volume.","sidebar":"tutorialSidebar"},"troubleshooting/gotchas":{"id":"troubleshooting/gotchas","title":"Where\'s My View?","description":"The following app has a single top-level view that fills the Display and draws a centered circle.","sidebar":"tutorialSidebar"},"ui_components/form":{"id":"ui_components/form","title":"Forms","description":"Doodle forms make data collection simple, while still preserving flexibility to build just the right experience. They hide a lot of the complexity associated with mapping visual components to fields, state management, and validation. The result is an intuitive metaphor modeled around the idea of a constructor.","sidebar":"tutorialSidebar"},"ui_components/form_controls":{"id":"ui_components/form_controls","title":"Form Controls","description":"Doodle has many built-in controls that cover a range of data types for forms. These controls come as functions that return s. They are all found within the io.nacular.doodle.controls.form package.","sidebar":"tutorialSidebar"},"ui_components/overview":{"id":"ui_components/overview","title":"Catalog","description":"Doodle has several UI components in the controls library that range from the simple (buttons, text-fields), to the complex (like lists and carousels). Below is a selection of the most common ones.","sidebar":"tutorialSidebar"},"userinput":{"id":"userinput","title":"User Input","description":"Pointer handling is easy with Doodle; simply include the PointerModule when launching your app, and the underlying framework uses it to produce key events.","sidebar":"tutorialSidebar"},"views":{"id":"views","title":"Views","description":"s are the building blocks of Doodle apps. They encapsulate state, display content on the screen and respond to user input. Apps typically contain many View instances at runtime. And they often use a wide range of View types that provide specialized rendering and user interactions.","sidebar":"tutorialSidebar"},"whatsnew":{"id":"whatsnew","title":"Whats New \u2728","description":"0.11.0 \u2022 Mar 2025","sidebar":"tutorialSidebar"}}}}')}}]);