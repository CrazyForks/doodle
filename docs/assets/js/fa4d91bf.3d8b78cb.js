"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[930],{1798:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>k,contentTitle:()=>v,default:()=>$,frontMatter:()=>g,metadata:()=>h,toc:()=>b});var t=o(7462),a=(o(7294),o(3905)),i=(o(8209),o(4866)),r=o(5162),l=o(1912);const s='plugins {\n    id ("org.jetbrains.kotlin.js") version "1.7.21"\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    js().browser()\n\n    val doodleVersion = "0.9.1" // <--- Latest Doodle version\n\n    dependencies {\n        implementation ("io.nacular.doodle:core:$doodleVersion"   )\n        implementation ("io.nacular.doodle:browser:$doodleVersion")\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n}',d="plugins {\n    id 'org.jetbrains.kotlin.js' version '1.7.21'\n}\n\nversion = '1.0.0'\ngroup   = 'com.my.cool.app'\n\nrepositories {\n    mavenCentral()\n}\n\next {\n    doodle_version = '0.9.1' // <--- Latest Doodle version\n}\n\nkotlin {\n    js().browser()\n\n    dependencies {\n        implementation \"io.nacular.doodle:core:$doodle_version\"\n        implementation \"io.nacular.doodle:browser:$doodle_version\"\n\n        // Optional\n        // implementation \"io.nacular.doodle:controls:$doodle_version\"\n        // implementation \"io.nacular.doodle:animation:$doodle_version\"\n        // implementation \"io.nacular.doodle:themes:$doodle_version\"\n    }\n}",p='plugins {\n    id ("org.jetbrains.kotlin.jvm") version "1.7.21"\n    application\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev")\n    }\n}\n\nkotlin {\n    target.compilations.all {\n        kotlinOptions {\n            jvmTarget = "11"\n        }\n    }\n\n    val doodleVersion = "0.9.1" // <--- Latest Doodle version\n\n    dependencies {\n        val osName = System.getProperty("os.name")\n        val targetOs = when {\n            osName == "Mac OS X"       -> "macos"\n            osName.startsWith("Win"  ) -> "windows"\n            osName.startsWith("Linux") -> "linux"\n            else                       -> error("Unsupported OS: $osName")\n        }\n\n        val osArch = System.getProperty("os.arch")\n        val targetArch = when (osArch) {\n            "x86_64", "amd64" -> "x64"\n            "aarch64"         -> "arm64"\n            else              -> error("Unsupported arch: $osArch")\n        }\n\n        val target = "$targetOs-$targetArch"\n\n        implementation ("io.nacular.doodle:core:$doodleVersion"               )\n        implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n}\n\napplication {\n    mainClass.set("YOUR_CLASS")\n}',m='plugins {\n    id \'org.jetbrains.kotlin.jvm\' version \'1.7.21\'\n    id \'application\'\n}\n\nversion = \'1.0.0\'\ngroup   = \'com.my.cool.app\'\n\nrepositories {\n    mavenCentral()\n    maven {\n        url "https://maven.pkg.jetbrains.space/public/p/compose/dev"\n    }\n}\n\next {\n    doodle_version = \'0.9.1\' // <--- Latest Doodle version\n}\n\nkotlin {\n    target.compilations.all {\n        kotlinOptions {\n            jvmTarget = "11"\n        }\n    }\n\n    dependencies {\n        targetOs = ""\n        osName = System.getProperty("os.name")\n        if      (osName ==         "Mac OS X")  targetOs = "macos"\n        else if (osName.startsWith("Win"     )) targetOs = "windows"\n        else if (osName.startsWith("Linux"   )) targetOs = "linux"\n        else                                    error("Unsupported OS: $osName")\n\n        targetArch = ""\n        osArch = System.getProperty("os.arch")\n        switch (osArch) {\n            case ["x86_64", "amd64"]: targetArch = "x64"  ; break\n            case "aarch64"          : targetArch = "arm64"; break\n            default:                  error("Unsupported arch: $osArch")\n        }\n\n        target = "$targetOs-$targetArch"\n\n        implementation ("io.nacular.doodle:core:$doodleVersion"               )\n        implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n\n        // Optional\n        // implementation "io.nacular.doodle:controls:$doodle_version"\n        // implementation "io.nacular.doodle:animation:$doodle_version"\n        // implementation "io.nacular.doodle:themes:$doodle_version"\n    }\n}\n\napplication {\n    mainClassName = "YOUR_CLASS"\n}',c='plugins {\n    id ("org.jetbrains.kotlin.multiplatform") version "1.7.21"\n    application\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev")\n    }\n}\n\nkotlin {\n    js().browser()\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    val doodleVersion = "0.9.1" // <--- Latest Doodle version\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:core:$doodleVersion")\n\n                // Optional\n                // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n                // implementation ("io.nacular.doodle:animation:$doodleVersion")\n                // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                implementation ("io.nacular.doodle:browser:$doodleVersion")\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                val osName = System.getProperty("os.name")\n                val targetOs = when {\n                    osName == "Mac OS X"       -> "macos"\n                    osName.startsWith("Win"  ) -> "windows"\n                    osName.startsWith("Linux") -> "linux"\n                    else                       -> error("Unsupported OS: $osName")\n                }\n\n                val osArch = System.getProperty("os.arch")\n                val targetArch = when (osArch) {\n                    "x86_64", "amd64" -> "x64"\n                    "aarch64"         -> "arm64"\n                    else              -> error("Unsupported arch: $osArch")\n                }\n\n                val target = "$targetOs-$targetArch"\n\n                implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n            }\n        }\n    }\n}\n\napplication {\n    mainClass.set("YOUR_CLASS")\n}',u='plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.7.21\'\n    id \'application\'\n}\n\nversion = \'1.0.0\'\ngroup   = \'com.my.cool.app\'\n\nrepositories {\n    mavenCentral()\n    maven {\n        url "https://maven.pkg.jetbrains.space/public/p/compose/dev"\n    }\n}\n\next {\n    doodle_version = \'0.9.1\' // <--- Latest Doodle version\n}\n\nkotlin {\n    js().browser()\n\n    jvm {\n        withJava()\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = "11"\n            }\n        }\n    }\n\n    sourceSets {\n        commonMain.dependencies {\n            implementation "io.nacular.doodle:core:$doodle_version"\n\n            // Optional\n            // implementation "io.nacular.doodle:controls:$doodle_version"\n            // implementation "io.nacular.doodle:animation:$doodle_version"\n            // implementation "io.nacular.doodle:themes:$doodle_version"\n        }\n\n        jsMain.dependencies {\n            implementation "io.nacular.doodle:browser:$doodle_version"\n        }\n\n        jvmMain.dependencies {\n            targetOs = ""\n            osName = System.getProperty("os.name")\n            if      (osName ==         "Mac OS X")  targetOs = "macos"\n            else if (osName.startsWith("Win"     )) targetOs = "windows"\n            else if (osName.startsWith("Linux"   )) targetOs = "linux"\n            else                                    error("Unsupported OS: $osName")\n\n            targetArch = ""\n            osArch = System.getProperty("os.arch")\n            switch (osArch) {\n                case ["x86_64", "amd64"]: targetArch = "x64"  ; break\n                case "aarch64"          : targetArch = "arm64"; break\n                default:                  error("Unsupported arch: $osArch")\n            }\n\n            target = "$targetOs-$targetArch"\n\n            implementation ("io.nacular.doodle:desktop-jvm-$target:$doodleVersion") // Desktop apps are tied to specific platforms\n        }\n    }\n}\n\napplication {\n    mainClassName = "YOUR_CLASS"\n}',g={hide_title:!0,description:"Get Doodle working for your web or desktop project so you can begin building your user interface."},v="Installation",h={unversionedId:"installation",id:"installation",title:"Installation",description:"Get Doodle working for your web or desktop project so you can begin building your user interface.",source:"@site/docs/installation.mdx",sourceDirName:".",slug:"/installation",permalink:"/doodle/docs/installation",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0,description:"Get Doodle working for your web or desktop project so you can begin building your user interface."},sidebar:"tutorialSidebar",previous:{title:"Hello Doodle",permalink:"/doodle/docs/introduction"},next:{title:"Applications",permalink:"/doodle/docs/applications"}},k={},b=[{value:"Pure Javascript Project",id:"pure-javascript-project",level:2},{value:"build.gradle.kts",id:"buildgradlekts",level:4},{value:"build.gradle",id:"buildgradle",level:4},{value:"Pure JVM Project",id:"pure-jvm-project",level:2},{value:"build.gradle.kts",id:"buildgradlekts-1",level:4},{value:"build.gradle",id:"buildgradle-1",level:4},{value:"Multi-platform Project",id:"multi-platform-project",level:2},{value:"build.gradle.kts",id:"buildgradlekts-2",level:4},{value:"build.gradle",id:"buildgradle-2",level:4}],y={toc:b},j="wrapper";function $(n){let{components:e,...o}=n;return(0,a.kt)(j,(0,t.Z)({},y,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Doodle apps are built using ",(0,a.kt)("a",{parentName:"p",href:"http://www.gradle.org"},"Gradle"),", like other Kotlin JS (Javascript) or Multi-Platform projects.\nLearn more by checking out  the Kotlin ",(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/getting-started.html"},"docs"),"."),(0,a.kt)("h2",{id:"pure-javascript-project"},"Pure Javascript Project"),(0,a.kt)("p",null,"You can set up a pure Javascript app with the following build scripts."),(0,a.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"Kotlin",mdxType:"TabItem"},(0,a.kt)("h4",{id:"buildgradlekts"},"build.gradle.kts"),(0,a.kt)(l.O,{mdxType:"KPlayground"},s)),(0,a.kt)(r.Z,{value:"Groovy",mdxType:"TabItem"},(0,a.kt)("h4",{id:"buildgradle"},"build.gradle"),(0,a.kt)(l.O,{language:"groovy",mdxType:"KPlayground"},d))),(0,a.kt)("h2",{id:"pure-jvm-project"},"Pure JVM Project"),(0,a.kt)("p",null,"You can set up a pure JVM app with the following build scripts."),(0,a.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"Kotlin",mdxType:"TabItem"},(0,a.kt)("h4",{id:"buildgradlekts-1"},"build.gradle.kts"),(0,a.kt)(l.O,{mdxType:"KPlayground"},p)),(0,a.kt)(r.Z,{value:"Groovy",mdxType:"TabItem"},(0,a.kt)("h4",{id:"buildgradle-1"},"build.gradle"),(0,a.kt)(l.O,{language:"groovy",mdxType:"KPlayground"},m))),(0,a.kt)("h2",{id:"multi-platform-project"},"Multi-platform Project"),(0,a.kt)("p",null,"Doodle is a set of Kotlin Multi-platform (MPP) libraries. Which means you can create an MPP for your app as well. The advantage of this\nis that you can write your app entirely (except for ",(0,a.kt)("inlineCode",{parentName:"p"},"main"),") in ",(0,a.kt)("inlineCode",{parentName:"p"},"common")," code and make it available on both Web (JS) and Desktop (JVM). The\nfollowing shows how to create such an app."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"App ",(0,a.kt)("a",{parentName:"p",href:"/doodle/docs/applications#app-launch"},(0,a.kt)("strong",{parentName:"a"},"launch code"))," is the only portion that needs to be in ",(0,a.kt)("inlineCode",{parentName:"p"},"js")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"jvm"),".")),(0,a.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"Kotlin",mdxType:"TabItem"},(0,a.kt)("h4",{id:"buildgradlekts-2"},"build.gradle.kts"),(0,a.kt)(l.O,{mdxType:"KPlayground"},c)),(0,a.kt)(r.Z,{value:"Groovy",mdxType:"TabItem"},(0,a.kt)("h4",{id:"buildgradle-2"},"build.gradle"),(0,a.kt)(l.O,{language:"groovy",mdxType:"KPlayground"},u))))}$.isMDXComponent=!0}}]);