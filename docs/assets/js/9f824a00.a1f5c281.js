"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[8980],{8872:(n,e,o)=>{o.d(e,{o:()=>d});var i=o(1504),t=o(8556),a=o.n(t),s=o(312),r=o(1130),p=(o(5544),o(7624));class d extends i.Component{constructor(n){super(n),n.args&&(this.args=JSON.parse(n.args)),this.height=n.height,this.functionName="reactComponent",this.ref=i.createRef()}componentDidMount(){let n=this.ref.current.children[1];this.ref.current.removeChild(this.ref.current.children[1]),this.app=a()[this.functionName](this.ref.current.children[0],n)}componentWillUnmount(){this.app}render(){return(0,p.jsxs)("div",{className:s.c.doodle,ref:this.ref,children:[(0,p.jsx)("div",{style:{position:"relative",height:this.height+"px"}}),(0,p.jsx)(r.cp,{})]})}}},839:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>m,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>w});var i=o(7624),t=o(4552),a=(o(7793),o(6236),o(5272),o(7492)),s=(o(8872),o(3220)),r=o(7196),p=o(9540),d=o(7696);const c={hide_title:!0,title:"Desktop"},l=void 0,u={id:"platform_specific/desktop",title:"Desktop",description:"Multi-window apps",source:"@site/docs/platform_specific/desktop.mdx",sourceDirName:"platform_specific",slug:"/platform_specific/desktop",permalink:"/doodle/docs/platform_specific/desktop",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Desktop"},sidebar:"tutorialSidebar",previous:{title:"Where's My View?",permalink:"/doodle/docs/troubleshooting/gotchas"},next:{title:"Web",permalink:"/doodle/docs/platform_specific/web"}},m={},w=[{value:"Multi-window apps",id:"multi-window-apps",level:2},{value:"Native window menus",id:"native-window-menus",level:2},{value:"Native context menus",id:"native-context-menus",level:2}];function h(n){const e={admonition:"admonition",code:"code",h2:"h2",p:"p",...(0,t.M)(),...n.components};return s.m||v("api",!1),s.m.Display||v("api.Display",!0),s.m.WindowGroup||v("api.WindowGroup",!0),s.m.windowGroup||v("api.windowGroup",!1),s.m.windowGroup.main||v("api.windowGroup.main",!0),s.m.windowGroup.mainDisplay||v("api.windowGroup.mainDisplay",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"multi-window-apps",children:"Multi-window apps"}),"\n",(0,i.jsxs)(e.p,{children:["Apps for Desktop can create/manage multiple windows using the ",(0,i.jsx)(s.m.WindowGroup,{})," interface. Simply inject it into your app to get started. The API provides access to an app's ",(0,i.jsx)(s.m.windowGroup.main,{})," window as well as methods for creating new windows."]}),"\n",(0,i.jsx)(a.A,{children:r.c}),"\n",(0,i.jsx)(e.admonition,{type:"tip",children:(0,i.jsxs)(e.p,{children:["There's no need to inject ",(0,i.jsx)(s.m.Display,{})," if you already inject ",(0,i.jsx)(s.m.WindowGroup,{}),". That's because the injected ",(0,i.jsx)(e.code,{children:"Display"})," is equivalent to ",(0,i.jsx)(s.m.windowGroup.mainDisplay,{})]})}),"\n",(0,i.jsx)(e.h2,{id:"native-window-menus",children:"Native window menus"}),"\n",(0,i.jsx)(e.p,{children:"Apps can set up native menus for their windows. This looks a lot like working with the existing menu APIs, but it results in changes to the OS window decoration. These menus are just as interactive as the in-app ones as well, meaning they trigger events when the user interacts with them."}),"\n",(0,i.jsx)(a.A,{children:p.c}),"\n",(0,i.jsx)(e.h2,{id:"native-context-menus",children:"Native context menus"}),"\n",(0,i.jsx)(e.p,{children:"Apps can set up native context/popup menus for their windows. The API is very similar to native menus."}),"\n",(0,i.jsx)(a.A,{children:d.c})]})}function f(n={}){const{wrapper:e}={...(0,t.M)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}function v(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}},7196:(n,e,o)=>{o.d(e,{c:()=>i});const i='package display\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.WindowGroup\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.layout.constraints.fill\n\n//sampleStart\nclass MyCoolApp(windows: WindowGroup): Application {\n    init {\n        // main window\'s display, same as if Display were injected\n        windows.main.apply {\n            title = "Main Window"\n\n            // manipulate main window\'s display\n            display += view {}\n        }\n\n        // create a new window\n        windows {\n            title                = "A New Window!"\n            size                 = Size(500)\n            enabled              = false\n            resizable            = false\n            triesToAlwaysBeOnTop = true\n\n            // manipulate the new window\'s display\n            display += view {}\n            display.layout = constrain(display.first(), fill)\n\n            closed += {\n                // handle window close\n            }\n        }\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd'},7696:(n,e,o)=>{o.d(e,{c:()=>i});const i='package display\n\nimport io.nacular.doodle.controls.popupmenu.MenuBehavior.ItemInfo\nimport io.nacular.doodle.core.Icon\nimport io.nacular.doodle.core.Window\nimport io.nacular.doodle.geometry.Point\n\nfun contextMenu(window: Window, icon1: Icon<ItemInfo>, icon2: Icon<ItemInfo>) {\n//sampleStart\n    window.popupMenu(at = Point()) {\n        action("Do action 2", icon1) { /*..*/ }\n        menu("Sub menu") {\n            action("Do action sub", icon = icon2) { /*..*/ }\n            separator()\n            prompt("Some Prompt sub") { /*..*/ }\n        }\n        separator()\n        prompt("Some Prompt") { /*..*/ }\n    }\n//sampleEnd\n}'},9540:(n,e,o)=>{o.d(e,{c:()=>i});const i='package display\n\nimport io.nacular.doodle.controls.popupmenu.MenuBehavior.ItemInfo\nimport io.nacular.doodle.core.Icon\nimport io.nacular.doodle.core.Window\n\nfun example(window: Window, icon1: Icon<ItemInfo>, icon2: Icon<ItemInfo>) {\n//sampleStart\n    window.menuBar {\n        menu("Menu 1") {\n            action("Do action 2", icon1) { /*..*/ }\n            menu("Sub menu") {\n                action("Do action sub", icon = icon2) { /*..*/ }\n                separator()\n                prompt("Some Prompt sub") { /*..*/ }\n            }\n            separator()\n            prompt("Some Prompt") { /*..*/ }\n        }\n\n        menu("Menu 2") {\n            // ...\n        }\n    }\n//sampleEnd\n}'}}]);