"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[444],{2146:function(e,a,t){t.r(a),t.d(a,{assets:function(){return h},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return u}});var n=t(3117),o=t(102),i=(t(7294),t(3905)),l=t(9877),r=t(8215),s=t(3138),d=["components"],m={hide_title:!0},c="UI Components Overview",p={unversionedId:"ui_components/overview",id:"ui_components/overview",title:"UI Components Overview",description:"Doodle has several UI components in the Controls library. Here are a few of the common ones. Access these by adding a dependency to",source:"@site/docs/ui_components/overview.mdx",sourceDirName:"ui_components",slug:"/ui_components/overview",permalink:"/doodle/docs/ui_components/overview",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Drag & Drop",permalink:"/doodle/docs/dragdrop"},next:{title:"Forms",permalink:"/doodle/docs/ui_components/form"}},h={},u=[{value:"Label",id:"label",level:3},{value:"TextField",id:"textfield",level:3},{value:"PushButton",id:"pushbutton",level:3},{value:"CheckBox",id:"checkbox",level:3},{value:"RadioButton",id:"radiobutton",level:3},{value:"Switch",id:"switch",level:3},{value:"Photo",id:"photo",level:3},{value:"ProgressBar",id:"progressbar",level:3},{value:"Slider",id:"slider",level:3},{value:"CircularSlider",id:"circularslider",level:3},{value:"RangeSlider",id:"rangeslider",level:3},{value:"CircularRangeSlider",id:"circularrangeslider",level:3},{value:"Spinner",id:"spinner",level:3},{value:"Dropdown",id:"dropdown",level:3},{value:"StarRater",id:"starrater",level:3},{value:"List",id:"list",level:3},{value:"Tree",id:"tree",level:3},{value:"Table",id:"table",level:3},{value:"Grid Panel",id:"grid-panel",level:3},{value:"SplitPanel",id:"splitpanel",level:3},{value:"TabbedPanel",id:"tabbedpanel",level:3},{value:"ColorPicker",id:"colorpicker",level:3},{value:"MonthPanel",id:"monthpanel",level:3},{value:"DaysOfTheWeekPanel",id:"daysoftheweekpanel",level:3},{value:"Custom Calendar",id:"custom-calendar",level:3},{value:"Form",id:"form",level:3}],k={toc:u};function v(e){var a=e.components,t=(0,o.Z)(e,d);return(0,i.kt)("wrapper",(0,n.Z)({},k,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ui-components-overview"},"UI Components Overview"),(0,i.kt)("p",null,"Doodle has several UI components in the Controls library. Here are a few of the common ones. Access these by adding a dependency to\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Controls")," library in your build file."),(0,i.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=build.gradle.kts",title:"build.gradle.kts"},'//...\n\ndependencies {\n     implementation ("io.nacular.doodle:controls:$doodleVersion")\n}\n\n//...\n'))),(0,i.kt)(r.Z,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"title=build.gradle",title:"build.gradle"},'//...\n\ndependencies {\n     implementation "io.nacular.doodle:controls:$doodle_version"\n}\n\n//...\n')))),(0,i.kt)("p",null,"Most of these components rely entirely on their ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L7"},(0,i.kt)("inlineCode",{parentName:"a"},"Behavior"))," for rendering. Moreover, they do not have\ndefaults for them to minimize bundle size. So you need to specify behaviors explicitly or use a ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/themes"},(0,i.kt)("strong",{parentName:"a"},"Theme"))," that provides\nthem for the controls you use."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"label"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/text/Label.kt#L27"},"Label")),(0,i.kt)("p",null,"Holds and displays text with support for basic styling."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"label",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val label = Label("Some Text")\n\n// styled using basicLabelBehavior()\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<Label>")," like ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/text/Label.kt#L20"},(0,i.kt)("inlineCode",{parentName:"a"},"LabelBehavior"))))))),(0,i.kt)("h3",{id:"textfield"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/text/TextField.kt#L20"},"TextField")),(0,i.kt)("p",null,"Provides simple (un-styled) text input."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"textField",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val textField = TextField().apply {\n    mask = '*'\n    fitText = true\n    borderVisible = false\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Requires a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/text/TextField.kt#L16"},(0,i.kt)("inlineCode",{parentName:"a"},"TextFieldBehavior")),".\nThe module ",(0,i.kt)("inlineCode",{parentName:"p"},"NativeTextFieldBehavior")," provides one."))))),(0,i.kt)("p",null,"TextFields can also be customized using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/native/NativeTextFieldBehavior.kt#L9"},(0,i.kt)("inlineCode",{parentName:"a"},"NativeTextFieldBehaviorModifier")),".\nSee the code sample for how this is achieved."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"styledTextField",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CustomTextFieldBehavior(textField: TextField, animate: Animator): NativeTextFieldBehaviorModifier {\n    var valid by observable(true) { _,_ ->\n        textField.rerender()\n    }\n\n    private var animation: Animation? by observable(null) { old,_ ->\n        old?.cancel()\n    }\n\n    private var animationProgress by observable(1f) { _,_ ->\n        textField.rerenderNow()\n    }\n\n    init {\n        textField.acceptsThemes   = false\n        textField.borderVisible   = false\n        textField.backgroundColor = Transparent\n        textField.focusChanged += { _,_,_ ->\n            animation = (animate (0f to 1f) using speedUpSlowDown(250 * Time.milliseconds)) { animationProgress = it }\n        }\n    }\n\n    override fun install(view: TextField) {\n        super.install(view)\n\n        view.enabledChanged += { _,_,_ ->\n            view.rerender()\n        }\n    }\n\n    // Allows the modifier to render the TextField's background. There is also an option to render the foreground, but this\n    // modifier does not do so.\n    override fun renderBackground(textField: TextField, canvas: Canvas) {\n        val startX     = if (textField.hasFocus) textField.width / 2 * (1 - animationProgress) else 0.0\n        val endX       = if (textField.hasFocus) textField.width / 2 * (1 + animationProgress) else textField.width\n        val color      = (if (valid) Black else Red).let { when {\n            !textField.enabled -> it.lighter()\n            else               -> it\n        } }\n        val thickColor = color.let {\n            when {\n                !textField.hasFocus -> interpolate(it, it.opacity(0f), animationProgress)\n                else                -> it\n            }\n        }\n\n        canvas.line(start = Point(startX, textField.height - 2.0), end = Point(endX,            textField.height - 2.0), Stroke(thickness = 1.0, fill = thickColor.paint))\n        canvas.line(start = Point(0.0,    textField.height - 1.0), end = Point(textField.width, textField.height - 1.0), Stroke(thickness = 1.0, fill = color.paint     ))\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val animate        : Animator               // can be injected into app when Animator module is used\nval textFieldStyler: NativeTextFieldStyler  // can be injected into app when nativeTextFieldBehavior module is used\n\nval textField = TextField().apply {\n    acceptsThemes = false\n    behavior = textFieldStyler(this, CustomTextFieldBehavior(this, animate))\n}\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/Animator.kt#L45"},(0,i.kt)("inlineCode",{parentName:"a"},"Animator")),"\nis available via the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/Animator.kt"},(0,i.kt)("inlineCode",{parentName:"a"},"Animator")," Module"),"\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animation")," library, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/native/NativeTextFieldBehavior.kt#L32"},(0,i.kt)("inlineCode",{parentName:"a"},"NativeTextFieldStyler")),"\nis available whenever the ",(0,i.kt)("inlineCode",{parentName:"p"},"nativeTextFieldBehavior")," module (located in ",(0,i.kt)("inlineCode",{parentName:"p"},"io.nacular.doodle.theme.native"),") is included."))))),(0,i.kt)("h3",{id:"pushbutton"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/buttons/PushButton.kt#L9"},"PushButton")),(0,i.kt)("p",null,"A component that triggers an action when pressed; usually with the pointer or keyboard."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"button",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val button = PushButton("BUTTON").apply {\n    fired += {\n        println("Hey! That Hurt!")\n    }\n}\n\n// themed via `basicButtonBehavior()`\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"There are several types of buttons available, including ToggleButton, CheckBox, and RadioButton. Rendering requires\na ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<Button>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/theme/native/NativeTheme.kt#L47"},(0,i.kt)("inlineCode",{parentName:"a"},"NativeTheme")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L393"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme")),"\nprovide versions."))))),(0,i.kt)("h3",{id:"checkbox"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/buttons/CheckBox.kt#L9"},"CheckBox")),(0,i.kt)("p",null,"A toggle component that represents an on/off state and is triggered when pressed; usually with the pointer or keyboard."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"checkbox",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val checkbox = CheckBox("CHECKBOX").apply {\n    selectedChanged += { _,_,new ->\n        println("Checkbox selected: $new, indeterminate: $indeterminate")\n    }\n}\n\n// themed via `basicCheckBoxBehavior()`\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"There are several types of buttons available, including ToggleButton, CheckBox, and RadioButton. Rendering requires\na ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<Buton>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/theme/native/NativeTheme.kt#L47"},(0,i.kt)("inlineCode",{parentName:"a"},"NativeTheme")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L529"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme")),"\nprovide versions."))))),(0,i.kt)("h3",{id:"radiobutton"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/buttons/RadioButton.kt#L9"},"RadioButton")),(0,i.kt)("p",null,"A toggle component that represents an on/off state and is triggered when pressed; usually with the pointer or keyboard. RadioButtons are typically\nused in lists with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/buttons/ButtonGroup.kt#L9"},(0,i.kt)("inlineCode",{parentName:"a"},"ButtonGroup")),"\nto represent the selection of a single item from this list."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"radioButton",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val checkbox = RadioButton("RADIO BUTTON").apply {\n    selectedChanged += { _,_,new ->\n        println("Radio selected: $new")\n    }\n}\n\n// themed via `basicRadioButtonBehavior()`\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"There are several types of buttons available, including ToggleButton, CheckBox, and RadioButton. Rendering requires\na ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<Buton>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/theme/native/NativeTheme.kt#L47"},(0,i.kt)("inlineCode",{parentName:"a"},"NativeTheme")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L557"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme")),"\nprovide versions."))))),(0,i.kt)("h3",{id:"switch"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/buttons/Switch.kt#L5"},"Switch")),(0,i.kt)("p",null,"A toggle component that triggers an action when selected; usually with the pointer or keyboard."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"switch",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val switch Switch().apply {\n    size = Size(50, 30)\n    selectedChanged += { _,_,new ->\n        println("Switch selected: $new")\n    }\n}\n\n// themed via `basicSwitchBehavior()`\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Switches are just ",(0,i.kt)("inlineCode",{parentName:"p"},"ToggleButton"),"s and can therefore be styled using any ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<Button>"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"BasicTheme"),"\nprovide one via ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L579"},(0,i.kt)("inlineCode",{parentName:"a"},"basicSwitchBehavior")),"."))))),(0,i.kt)("h3",{id:"photo"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/Photo.kt#L9"},"Photo")),(0,i.kt)("p",null,"Images in Doodle are not Views, they are more like text, in that you render them directly to a Canvas.\nThe Photo component provides a simple wrapper around an Image."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"photo",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val photo = Photo(image).apply {\n    size = Size(100, 200)\n}\n")))),(0,i.kt)("h3",{id:"progressbar"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ProgressBar.kt#L7"},"ProgressBar")),(0,i.kt)("p",null,"Represents a value within a specified range that usually indicates progress toward some goal. It provides notifications when\nits value or range changes. Specify a range by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClosedRange")," or ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ConfinedRangeModel.kt#L22"},(0,i.kt)("inlineCode",{parentName:"a"},"ConfinedValueModel")),"\nin the constructor."),(0,i.kt)("p",null,"ProgressBar is a specialization of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ProgressIndicator.kt#L11"},(0,i.kt)("inlineCode",{parentName:"a"},"ProgressIndicator")),",\nwhich should be used for more generalized progress display (i.e. circular)"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"progress",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val progressBar = ProgressBar() // creates a bar that ranges form 0 - 100\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<ProgressBar>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L606"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"vertical",label:"Vertical",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"progress",args:'["vertical"]',height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val progressBar = ProgressBar(orientation = Vertical) // creates a bar that ranges form 0 - 100\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<ProgressBar>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L606"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)("p",null,"ProgressIndicators can also take different shapes. Here's an example that uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/CircularProgressBehavior.kt#L23"},(0,i.kt)("inlineCode",{parentName:"a"},"CircularProgressBehavior")),"."),(0,i.kt)(s.B,{functionName:"circularProgress",height:"200",mdxType:"DoodleCodeBlock"}),(0,i.kt)("p",null,"This one draws a path using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/PathProgressBarBehavior.kt#L20"},(0,i.kt)("inlineCode",{parentName:"a"},"PathProgressBehavior")),"."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"pathProgress",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val blueColor = Color(0x5AE0FCu) opacity 0.85f\n\nobject: ProgressIndicator() {\n    init {\n        size     = Size(200, 100)\n        progress = 0.25\n        behavior = PathProgressIndicatorBehavior(\n            pathMetrics,          // injected\n            path                = path("M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80")!!,\n            foreground          = LinearGradientPaint(Black, blueColor, Origin, Point(width, 0.0)),\n            foregroundThickness = 5.0,\n            background          = Lightgray.paint,\n            backgroundThickness = 5.0\n        )\n    }\n}\n')))),(0,i.kt)("h3",{id:"slider"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/range/Slider.kt#L16"},"Slider")),(0,i.kt)("p",null,"Sliders hold a strongly typed value within a specified range and allow the user to change the value. It provides notifications when\nits value or range changes. Specify a range by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClosedRange")," or ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ConfinedRangeModel.kt#L22"},(0,i.kt)("inlineCode",{parentName:"a"},"ConfinedValueModel")),"\nin the constructor."),(0,i.kt)("p",null,"You can also confine the values to a predefined set within the range by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"ticks")," count and setting\n",(0,i.kt)("inlineCode",{parentName:"p"},"snapToTicks")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". This will pin the slider values to an evenly spaced set of points along its range."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All Sliders (including CircularSlider) are strongly typed. Which means you can create ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer")," sliders that\nsnap to each integer value. Therefore, it is not necessary to specify ",(0,i.kt)("inlineCode",{parentName:"p"},"ticks")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"snapToTicks")," to ensure\nthey only land on whole numbers."),(0,i.kt)("p",{parentName:"div"},"It is possible to still restrict their range further using these properties however. Then, they will only take on\ninteger values that match the tick count."))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"slider",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val slider = Slider<Double>().apply {\n    size = Size(200, 15)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<Slider>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L421"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"slider",args:'["vertical"]',height:"250",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val slider = Slider<Double>(orientation = Vertical).apply {\n    size = Size(200, 15)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n")))),(0,i.kt)("h3",{id:"circularslider"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/range/CircularSlider.kt#L14"},"CircularSlider")),(0,i.kt)("p",null,"CircularSlider behaves just like a regular Slider, except it is meant to be a ring. This means it provides notifications when\nits value or range changes and these can be specified by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClosedRange")," or ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ConfinedRangeModel.kt#L22"},(0,i.kt)("inlineCode",{parentName:"a"},"ConfinedValueModel")),"\nin the constructor."),(0,i.kt)("p",null,"Like Slider, you can also confine the values to a predefined set within the range by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"ticks")," count and setting\n",(0,i.kt)("inlineCode",{parentName:"p"},"snapToTicks")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". This will pin the slider values to an evenly spaced set of points along its range."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"slider",args:'["circular"]',height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val slider = CircularSlider().apply {\n    size = Size(100, 100)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<CircularSlider>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L677"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)("h3",{id:"rangeslider"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/range/RangeSlider.kt#L16"},"RangeSlider")),(0,i.kt)("p",null,"Range sliders hold a strongly typed inner range within a specified outer range and allow the user to change these values. It provides notifications when\nits either changes. Specify the ranges by passing ",(0,i.kt)("inlineCode",{parentName:"p"},"ClosedRange"),"s or a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ConfinedRangeModel.kt#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"ConfinedRangeModel")),"\nin the constructor."),(0,i.kt)("p",null,"You can also confine the inner range using a ",(0,i.kt)("inlineCode",{parentName:"p"},"ticks")," count and setting ",(0,i.kt)("inlineCode",{parentName:"p"},"snapToTicks")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", just like regular ranges. This will pin the values of the inner range to an evenly spaced set of points along its range."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"RangeSliders (and CircularRangeSlider) are strongly typed like normal ranges."))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"rangeSlider",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val slider = RangeSlider<Double>().apply {\n    size = Size(200, 15)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<RangeSlider>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L443"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"vertical",label:"Vertical",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"rangeSlider",args:'["vertical"]',height:"250",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val slider = RangeSlider<Double>(orientation = Vertical).apply {\n    size = Size(200, 15)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<RangeSlider>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L443"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)("h3",{id:"circularrangeslider"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/range/CircularRangeSlider.kt#L14"},"CircularRangeSlider")),(0,i.kt)("p",null,"CircularRangeSlider behaves just like a regular RangeSlider, except it is meant to be a ring."),(0,i.kt)("p",null,"Like RangeSlider, you can also confine the values to a predefined set within the range by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"ticks")," count and setting\n",(0,i.kt)("inlineCode",{parentName:"p"},"snapToTicks")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". This will pin the slider values to an evenly spaced set of points along its range."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"rangeSlider",args:'["circular"]',height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val slider = CircularRangeSlider().apply {\n    size = Size(100, 100)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior<CircularRangeSlider>"),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L698"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)("h3",{id:"spinner"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/spinner/Spinner.kt#L55"},"Spinner")),(0,i.kt)("p",null,"Spinner is a list data structure analog that lets you represent a list of items where only one is visible (selected) at a time.\nThey work well when the list of options is relatively small, or the input is an incremental value: like the number of items to purchase."),(0,i.kt)("p",null,"Spinner takes a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/spinner/Spinner.kt#L18"},(0,i.kt)("inlineCode",{parentName:"a"},"Model"))," that works like an ",(0,i.kt)("inlineCode",{parentName:"p"},"Iterator"),". This allows them to represent an open-ended list of items that do not need\nto be loaded up front."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"spinner",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val spinner1 = Spinner(1..9 step 2)\nval spinner2 = Spinner(listOf("Monday", "Tuesday", "Wednesday"))\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/spinner/Spinner.kt#L31"},(0,i.kt)("inlineCode",{parentName:"a"},"SpinnerBehavior")),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L481"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)("h3",{id:"dropdown"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/dropdown/Dropdown.kt#L48"},"Dropdown")),(0,i.kt)("p",null,"Dropdown is a list data structure similar to Spinner. It also lets you represent a list of choices where only one is visible (selected) at a time.\nBut unlike a Spinner, the choices are shown in a list when the control is activated. They work well when the list of options is relatively small."),(0,i.kt)("p",null,"Dropdown takes a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ListModel.kt#L12"},(0,i.kt)("inlineCode",{parentName:"a"},"ListModel"))," that works like an ",(0,i.kt)("inlineCode",{parentName:"p"},"Iterator"),". This allows them to represent an open-ended list of items that do not need\nto be loaded up front."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"dropdown",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val dropdown1 = Dropdown(1..9 step 2)\nval dropdown2 = Dropdown(listOf("Left", "Center", "Right"))\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Rendering requires a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/dropdown/Dropdown.kt#L22"},(0,i.kt)("inlineCode",{parentName:"a"},"DropdownBehavior")),". ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L755"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme"))," provides one."))))),(0,i.kt)("h3",{id:"starrater"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/StarRater.kt#L36"},"StarRater")),(0,i.kt)("p",null,"A highly customizable control that displays a rating between ","[0, n]"," using stars. It also lets the user change the underlying value."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"starRater",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val stars = StarRater(displayRounded = 0f, max = 5).apply {\n    bounds           = Rectangle(200, 50)\n    innerRadiusRatio = 0.6f\n    minSpacing       = 15.0\n}\n")))),(0,i.kt)("h3",{id:"list"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/list/List.kt#L104"},"List")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," control is a visual analog to the list data structure. It is a ",(0,i.kt)("strong",{parentName:"p"},"readonly"),", ordered, generic collection of items with random\naccess to its members."),(0,i.kt)("p",null,"You need 2 things to create a List: a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ListModel.kt#L12"},(0,i.kt)("inlineCode",{parentName:"a"},"ListModel")),",\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ItemVisualizer.kt#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"ItemVisualizer")),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You also need to provide a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/list/List.kt#L49"},(0,i.kt)("inlineCode",{parentName:"a"},"ListBehavior"))," or use a ",(0,i.kt)("inlineCode",{parentName:"p"},"Theme")," with one since List delegates rendering.\nThe examples below use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L179"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicListBehavior"))," which is also available as a module within ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L260"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTheme")),"."))),(0,i.kt)("p",null,"The model represents the data within the List, and the visualizer provides a way to translate each item to a ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," that will be rendered within\nthe List."),(0,i.kt)("p",null,"Lists provide memory optimization by only rendering the contents within their viewport, recycling items to display\nnew rows. The default setting caches 10 extra items; but this can be changed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"scrollCache")," property when creating\nthe List."),(0,i.kt)("p",null,"The following shows a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/list/DynamicList.kt#L20"},(0,i.kt)("inlineCode",{parentName:"a"},"DynamicList")),"\nof countries (a custom data class). These Lists are useful when the underlying model can change after creation.\nThis demo loads images asynchronously and adds new countries to the model as they load. The demo also illustrates a\ncustom visualizer that represents each country as a name label and flag image."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"list",height:"300",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val model = SimpleMutableListModel<Country>()\n\nlaunch {\n    listOf(\n        "United Kingdom" to "images/197374.svg",\n        "United States"  to "images/197484.svg",\n        "France"         to "images/197560.svg",\n        "Germany"        to "images/197571.svg",\n        "Spain"          to "images/197593.svg",\n        // ...\n        ).\n    sortedBy { it.first }.map { (name, path) ->\n        imageLoader.load(path)?.let { image ->\n            model.add(Country(name, image))\n        }\n    }\n}\n\nval list = DynamicList(\n    model,\n    selectionModel = MultiSelectionModel(),\n    itemVisualizer = CountryVisualizer(textVisualizer)\n).apply {\n    cellAlignment = fill\n}\n\n// Launched within an app that uses basicHorizontalListBehavior\napplication(modules = listOf(/*...*/ basicListBehavior())) {\n    // ...\n}\n\n')))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"columns",label:"Columns",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"verticalList",height:"300",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val list = VerticalDynamicList(\n    model,\n    selectionModel = MultiSelectionModel(),\n    itemVisualizer = CountryVisualizer(textVisualizer)\n    numColumns     = 3\n).apply {\n    cellAlignment = fill\n}\n\n// Launched within an app that uses basicHorizontalListBehavior\napplication(modules = listOf(/*...*/ basicListBehavior())) {\n    // ...\n}\n")))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"rows",label:"Rows",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"horizontalList",height:"300",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val list = HorizontalDynamicList(\n    model,\n    selectionModel = MultiSelectionModel(),\n    itemVisualizer = CountryVisualizer(textVisualizer)\n    numRows        = 3\n).apply {\n    cellAlignment = fill\n}\n\n// Launched within an app that uses basicHorizontalListBehavior\napplication(modules = listOf(/*...*/ basicHorizontalListBehavior())) {\n    // ...\n}\n")))),(0,i.kt)("p",null,"This List displays a set of countries, with each having a name and flag image. A ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicList")," is used here because\nthe underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," changes as each country is added asynchronously when its image loads."),(0,i.kt)("div",{style:{fontSize:"10px",textAlign:"right",color:"gray"}},"Icons made by ",(0,i.kt)("a",{style:{color:"gray"},href:"https://www.flaticon.com/authors/freepik",title:"Freepik"},"Freepik")," from ",(0,i.kt)("a",{style:{color:"gray"},href:"https://www.flaticon.com/",title:"Flaticon"},"www.flaticon.com")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/list/DynamicList.kt#L20"},(0,i.kt)("inlineCode",{parentName:"a"},"DynamicList")),"\nis readonly (though its models may change), while ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/list/MutableList.kt#L49"},(0,i.kt)("inlineCode",{parentName:"a"},"MutableList"))," is read/write."))),(0,i.kt)("h3",{id:"tree"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/tree/Tree.kt#L74"},"Tree")),(0,i.kt)("p",null,"The Tree control is a visual analog to the tree data structure. It is a ",(0,i.kt)("strong",{parentName:"p"},"readonly"),", hierarchical, generic collection of items that are accessible\nvia a numeric path."),(0,i.kt)("p",null,"You need 2 things to create a Tree: a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/TreeModel.kt#L10"},(0,i.kt)("inlineCode",{parentName:"a"},"TreeModel")),",\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ItemVisualizer.kt#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"ItemVisualizer")),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You also need to provide a Behavior or use a Theme with one since Tree delegates rendering."))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"tree",height:"300",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val root = rootNode("") {\n    node("Applications")\n    node("Desktop"     )\n    node("Documents"   ) {\n        node("Image.jpg")\n        node("Todos.txt")\n    }\n    node("Downloads"    )\n    node("Movies"       )\n    node("Music"        ) {\n        node("Track1.mp3")\n        node("Track2.mp3")\n        node("Track3.mp3")\n        node("Track4.mp3")\n    }\n    node("Photos"        ) {\n        node("Capture1.jpg")\n        node("Capture2.jpg")\n        node("Capture3.jpg")\n        node("Capture4.jpg")\n    }\n}\n\nval tree = Tree(\n    SimpleTreeModel(root),\n    highlightingTextVisualizer,\n    MultiSelectionModel()\n)\n')),(0,i.kt)("p",null,"This creates a Tree from the nodes defined. This demo also places the Tree in a resizable ScrollPanel; but that code is excluded\nfor simplicity. Trees--like Lists--provide memory optimized rendering."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Trees require a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/theme/TreeBehavior.kt#L14"},(0,i.kt)("inlineCode",{parentName:"a"},"TreeBehavior")),"\nfor rendering. ",(0,i.kt)("inlineCode",{parentName:"p"},"BasicTheme")," provides one."))))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/tree/DynamicTree.kt#L16"},(0,i.kt)("inlineCode",{parentName:"a"},"DynamicTree")),"\nis readonly (though its models may change), while ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/tree/MutableTree.kt#L20"},(0,i.kt)("inlineCode",{parentName:"a"},"MutableTree"))," is read/write."))),(0,i.kt)("h3",{id:"table"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/table/Table.kt#L30"},"Table")),(0,i.kt)("p",null,"Tables are very similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Lists")," (",(0,i.kt)("strong",{parentName:"p"},"readonly")," analog to the list data structure). They are like Lists that can display structured\ndata for each entry they hold."),(0,i.kt)("p",null,"Tables are strongly typed and homogeneous, like Lists. So each item is of some type ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>"),". The values of each column are therefore\nderivable from each ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," in the table. The Table below contains a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"Person")," and has columns for the ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"age"),", and gender\nfor each item. Columns can also produce arbitrary values, which is done to show the index of each item."),(0,i.kt)("p",null,"Each column's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/table/ColumnFactory.kt#L38"},(0,i.kt)("inlineCode",{parentName:"a"},"CellVisualizer")),"\nultimately controls what is displayed in it. The visualizer is given the value of each element in that column to produce a View. So the\nName column gets a ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", while the Male column gets a ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),". The first column has values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Unit"),", and uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"RowNumberGenerator")," to\ndisplay the index of each item."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/table/DynamicTable.kt#L65"},(0,i.kt)("inlineCode",{parentName:"a"},"DynamicTable")),"\nsupports changes to its model, and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/table/MutableTable.kt#L29"},(0,i.kt)("inlineCode",{parentName:"a"},"MutableTable"))," allows editing."))),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"table",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'data class Person(val name: String, val age: Int, val isMale: Boolean)\n\nfun male  (name: String, age: Int) = Person(name, age, isMale = true )\nfun female(name: String, age: Int) = Person(name, age, isMale = false)\n\nval textVisualizer  = HighlightingTextVisualizer(textMetrics)\nval indexVisualizer = object: CellVisualizer<Unit> {\n    override fun invoke(item: Unit, previous: View?, context: CellInfo<Unit>) =\n        textVisualizer("${context.index + 1}", previous, context)\n}\n\nval data = listOf(female("Alice", 53), male("Bob", 35), male("Jack", 8), female("Jill", 5))\n\nval table = Table(data, MultiSelectionModel()) {\n    column(label("#"   ),             indexVisualizer         ) { minWidth =  50.0; width =  50.0; maxWidth = 150.0; cellAlignment = center }\n    column(label("Name"), { name   }, textVisualizer          ) { minWidth = 100.0;                                                         }\n    column(label("Age" ), { age    }, toString(textVisualizer)) { minWidth = 100.0; width = 100.0; maxWidth = 150.0                         }\n    column(label("Male"), { isMale }, BooleanVisualizer()     ) { minWidth = 100.0; width = 100.0; maxWidth = 150.0; cellAlignment = center }\n}\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Tables require a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/table/TableBehavior.kt#L135"},(0,i.kt)("inlineCode",{parentName:"a"},"TableBehavior")),"\nfor rendering. ",(0,i.kt)("inlineCode",{parentName:"p"},"BasicTheme")," provides one."))))),(0,i.kt)("h3",{id:"grid-panel"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/GridPanel.kt#L51"},"Grid Panel")),(0,i.kt)("p",null,"This control manages a generic list of ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"s and displays them within a grid layout. Items can be added to or removed from the panel. Each item\nadded indicates the row/column it sits at and the number of rows / columns it spans. This, along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"rowSizingPolicy")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"columnSizingPolicy"),"\ncontrol how the items are ultimately laid out."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"gridPanel",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val panel = GridPanel().apply {\n    rowSpacing         = { 10.0 }\n    columnSpacing      = { 10.0 }\n    rowSizingPolicy    = FitPanel // FitContent, or custom policy\n    columnSizingPolicy = FitPanel // FitContent, or custom policy\n\n    add(view1, columnSpan = 2)      // defaults to row = 0, col = 0\n    add(view2, row = 1, column = 0)\n    add(view3, row = 1, column = 1)\n    add(view4, row = 2, column = 2)\n    add(view5, row = 0, column = 2, rowSpan = 2)\n    add(view6, row = 2, column = 0)\n    add(view7, row = 2, column = 1)\n\n    size = Size(200)\n\n    Resizer(this).apply { movable = false }\n\n    // ...\n}\n")))),(0,i.kt)("h3",{id:"splitpanel"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/SplitPanel.kt#L18"},"SplitPanel")),(0,i.kt)("p",null,"This control divides a region into two areas, each occupied by a View. It also allows the user to change the portion of its viewport\ndedicated to either view."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"vertical",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"splitPanel",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"horizontal",label:"Horizontal",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"splitPanel",args:"[false]",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},"import io.nacular.doodle.utils.Orientation.Vertical",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val panel = SplitPanel(Vertical /*| Horizontal*/).apply {\n    size      = Size(500, 300)\n    firstItem = ScrollPanel(CircularView(250.0))\n    lastItem  = Photo(image)\n    ratio     = 1f / 3\n    insets    = Insets(2.0)\n}\n\n// styled using basicSplitPanelBehavior()\n")))),(0,i.kt)("p",null,"This shows how you might nest horizontal and vertical SplitPanels."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"vertical",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"multiSplitPanel",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val list = List(1..10, toString(TextVisualizer()), SingleItemSelectionModel(), fitContent = emptySet()).apply {\n    cellAlignment = { left = parent.left + 10 }\n}\nval main = panel(textMetrics, "1",    shadow = null, cornerRadius = 0.0)\nval info = panel(textMetrics, "info", shadow = null, cornerRadius = 0.0)\n\nval panel = SplitPanel(orientation = Horizontal).apply {\n    size      = Size(500, 300)\n    firstItem = SplitPanel().apply {\n        firstItem = ScrollPanel(list).apply {\n            contentWidthConstraints  = { parent.width  }\n            contentHeightConstraints = { max(idealHeight or height, parent.height) }\n        }\n        lastItem  = main\n        ratio     = 1f / 3\n    }\n\n    ratio    = 2f / 3\n    lastItem = info\n\n    Resizer(this).apply { movable = false }\n}\n\n/**\n * Launched using\n * ----------------------------\n * basicListBehavior(),\n * basicLabelBehavior(),\n * basicSplitPanelBehavior(showDivider = true),\n * nativeScrollPanelBehavior()\n */\n')))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Requires a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/theme/SplitPanelBehavior.kt#L16"},(0,i.kt)("inlineCode",{parentName:"a"},"SplitPanelBehavior")),"\nfor rendering. ",(0,i.kt)("inlineCode",{parentName:"p"},"BasicTheme")," provides one."))),(0,i.kt)("h3",{id:"tabbedpanel"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/TabbedPanel.kt#L59"},"TabbedPanel")),(0,i.kt)("p",null,"This control manages a generic list of items and displays them one at a time using an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ItemVisualizer.kt#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"ItemVisualizer")),'. Each item is generally\ntracked with a visual "tab" that allows selection of particular items in the list.'),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"tabbedPanel",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val object1: View\nval object2: View\nval object3: View\nval object4: View\n\n// Each tab preview shows hardcoded names\nval tabVisualizer = object: ItemVisualizer<View, Any> {\n    private val textVisualizer = TextVisualizer(textMetrics)\n    private val mapping = mapOf(\n            object1 to "Circle",\n            object2 to "Second Tab",\n            object3 to "Cool Photo",\n            object4 to "Tab 4"\n    )\n\n    override fun invoke(item: View, previous: View?, context: Any) =\n        textVisualizer(mapping[item] ?: "Unknown")\n}\n\n// Each object is displayed within a ScrollPanel\nval panel = TabbedPanel(\n    ScrollPanelVisualizer(),\n    tabVisualizer,\n    object1,\n    object2,\n    object3,\n    object4\n).apply {\n    size = Size(500, 300)\n\n    Resizer(this).apply { movable = false }\n}\n')))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This control requires a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/TabbedPanel.kt#L22"},(0,i.kt)("inlineCode",{parentName:"a"},"TabbedPanelBehavior")),"\nfor rendering. This demo uses the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L732"},(0,i.kt)("inlineCode",{parentName:"a"},"basicTabbedPanelBehavior")),"\nmodule which installs ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/tabbedpanel/BasicTabbedPanelBehavior.kt#L538"},(0,i.kt)("inlineCode",{parentName:"a"},"BasicTabbedPanelBehavior"))))),(0,i.kt)("h3",{id:"colorpicker"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/ColorPicker.kt#L44"},"ColorPicker")),(0,i.kt)("p",null,"This control allows a user to pick an RGB color by specifying a hue and opacity."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"colorPicker",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val picker = ColorPicker(Color.Black).apply {\n    size = Size(300, 300)\n    // ...\n}\n\nprintln("Selected color is ${picker.color}")\n\npicker.changed += { _, old, new ->\n    println("Color changed from: $old to $new")\n}\n')))),(0,i.kt)("h3",{id:"monthpanel"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/date/MonthPanel.kt#L46"},"MonthPanel")),(0,i.kt)("p",null,"This control displays the days of a given month. It does not display a header with the day of the week though. This functionality is provided separately in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"DaysOfTheWeekPanel"),". This simplifies reuse as a core component of calendars. Excluding the header means the ",(0,i.kt)("inlineCode",{parentName:"p"},"MonthPanel")," can be used in vertically scrolling\ncalendars where the days are pinned to the top. Or in horizontal setups where the days are attached to it (within a container that has both panels)."),(0,i.kt)("p",null,"The panel can either show or hide days in the adjacent months using ",(0,i.kt)("inlineCode",{parentName:"p"},"showAdjacentMonths"),". It can also start at any day of the week via the ",(0,i.kt)("inlineCode",{parentName:"p"},"weekStart")," property."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"monthPanel",height:"400",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val today = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date\n\nval monthPanel = MonthPanel(today, /*itemVisualizer, selectionModel*/).apply {\n    size = Size(300)\n    // ...\n}\n\n// styled using basicMonthPanelBehavior()\n")))),(0,i.kt)("h3",{id:"daysoftheweekpanel"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/date/DaysOfTheWeekPanel.kt#L18"},"DaysOfTheWeekPanel")),(0,i.kt)("p",null,"This control is meant as a header for the ",(0,i.kt)("inlineCode",{parentName:"p"},"MonthPanel"),". It shows days of the week starting at the given ",(0,i.kt)("inlineCode",{parentName:"p"},"weekStart")," property."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"daysOfWeek",height:"200",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val monthPanel = DaysOfTheWeekPanel(weekStart = MONDAY).apply {\n    // ...\n}\n\n/*\nstyled using basicDaysOfTheWeekPanelBehavior(defaultVisualizer = itemVisualizer { day, previous, _ ->\n    val text = StyledText(day.name.take(1))\n\n    when (previous) {\n        is Label -> previous.apply    { fitText = emptySet(); this.styledText = text }\n        else     -> Label(text).apply { fitText = emptySet()                         }\n    }\n})\n*/\n")))),(0,i.kt)("h3",{id:"custom-calendar"},"Custom Calendar"),(0,i.kt)("p",null,"This shows the ",(0,i.kt)("inlineCode",{parentName:"p"},"MonthPanel")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DaysOfTheWeekPanel")," being used to create a simple vertical calendar with one column. This calendar uses a ",(0,i.kt)("inlineCode",{parentName:"p"},"List<LocalDate>"),"\nwith a model that contains the months of the current year. Each date in the list is visualized using a custom View that simply holds a label and\n",(0,i.kt)("inlineCode",{parentName:"p"},"MonthPanel"),". These are updated as the list scrolls and items are recycled."),(0,i.kt)("p",null,"The custom View provides a visualizer to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MonthPanel")," that controls the colors for each day as well as the background selection rendering."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"calendar",height:"450",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"code",label:"Code",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="CalendarDemo App"',title:'"CalendarDemo','App"':!0},"// Not shown for brevity\n// ------------------------------------------------------------------------------------------------------------\n// MonthModel      - produces a sequence of LocalDates based on the range provided to it\n// NamedMonthPanel - is a simple decorator around MonthPanel that has a label for the month name and year\n// CalendarDay     - handles pointer events and renders a centered label with circular background when selected\n\nclass CalendarDemo(display: Display, themeManager: ThemeManager, theme: DynamicTheme): Application {\n    init {\n        themeManager.selected    = theme\n        val today                = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date\n        val sharedSelectionModel = SingleItemSelectionModel<LocalDate>()\n        val offsetMonths         = 20\n\n        val monthList = List(\n            model          = MonthModel(today - DatePeriod(months = offsetMonths) .. today + DatePeriod(months = offsetMonths)),\n            itemVisualizer = itemVisualizer { item, previous, _ ->\n                when (previous) {\n                    is NamedMonthPanel -> previous.also { it.monthPanel.setDate(item) }\n                    else               -> NamedMonthPanel(item,\n                        itemVisualizer { day, previous, panel ->\n                            when (previous) {\n                                is CalendarDay -> previous.apply { update(panel, day) }\n                                else           -> CalendarDay(today, day, panel)\n                            }\n                        },\n                        selectionModel = sharedSelectionModel\n                    ).apply {\n                        // modify wrapped MonthPanel within NamedMonthPanel\n                        monthPanel.showAdjacentMonths = true\n                    }\n                }\n            },\n            scrollCache = 0,\n            fitContent  = emptySet(),\n        ).apply {\n            behavior      = basicVerticalListBehavior(itemHeight = 300.0, /*...*/)\n            cellAlignment = fill\n            acceptsThemes = false\n\n            displayChange += { _,_,_ ->\n                scrollTo(offsetMonths)\n            }\n        }\n\n        display += object: View() {\n            init {\n                clipCanvasToBounds = false\n\n                children += DaysOfTheWeekPanel()\n                children += ScrollPanel(monthList).apply {\n                    size = Size(300, 300)\n                    contentWidthConstraints = { parent.width }\n                }\n\n                layout = constrain(children[0], children[1]) { header, scroll ->\n                    header.width = parent.width\n                    header.height = constant(50.0)\n                    scroll.top    = header.bottom\n                    scroll.width  = parent.width\n                    scroll.bottom = parent.bottom\n                }\n\n                bounds = Rectangle(300, 320)\n            }\n\n            override fun render(canvas: Canvas) {\n                canvas.outerShadow(vertical = 10.0, blurRadius = 10.0, color = Black.opacity(0.5f)) {\n                    rect(bounds.atOrigin, color = Color(0xccccccu).inverted)\n                }\n            }\n        }\n\n        // ...\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Launching CalendarDemo"',title:'"Launching','CalendarDemo"':!0},"\n// This code would usually be in `main`\n\nprivate val appModules = listOf(\n    basicLabelBehavior             (),\n    basicMonthPanelBehavior        (),\n    nativeScrollPanelBehavior      (),\n    basicDaysOfTheWeekPanelBehavior(background = Transparent.paint, defaultVisualizer = itemVisualizer { day, previous, _ ->\n        val text = StyledText(day.name.take(1), foreground = White.paint)\n\n        when (previous) {\n            is Label -> previous.apply    { fitText = emptySet(); this.styledText = text }\n            else     -> Label(text).apply { fitText = emptySet()                         }\n        }\n    }),\n)\n\noperator fun invoke(root: HTMLElement) = application(root, modules = appModules) {\n    CalendarDemo(instance(), instance(), instance())\n}\n\n")))),(0,i.kt)("h3",{id:"form"},(0,i.kt)("a",{parentName:"h3",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/form/Form.kt#L52"},"Form")),(0,i.kt)("p",null,"Forms provide a way of collecting structured data from a user. This is generally quite complex given the wide range of visual representations,\ndata types, and validation steps usually involved. Doodle simplifies this entire flow with a single control that offers full customization and\ntype safety."),(0,i.kt)("p",null,"This example shows the use of validating text inputs, a radio list, and a sub form to gather some data about a person."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"demo",label:"Demo",mdxType:"TabItem"},(0,i.kt)(s.B,{functionName:"form",height:"600",mdxType:"DoodleCodeBlock"})),(0,i.kt)(r.Z,{value:"usage",label:"Usage",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.controls.form.Form\nimport io.nacular.doodle.controls.form.LabeledConfig\nimport io.nacular.doodle.controls.form.TextFieldConfig\nimport io.nacular.doodle.controls.form.form\nimport io.nacular.doodle.controls.form.labeled\nimport io.nacular.doodle.controls.form.map\nimport io.nacular.doodle.controls.form.radioList\nimport io.nacular.doodle.controls.form.textField\nimport io.nacular.doodle.controls.form.verticalLayout\n// ... other imports\n\nfun <T> LabeledConfig.textFieldConfig(placeHolder: String = "", errorText: StyledText? = null): TextFieldConfig<T>.() -> Unit = {\n    val initialHelperText  = help.styledText\n    help.font              = smallFont\n    textField.placeHolder  = placeHolder\n    onInvalid              = { if (!textField.hasFocus) help.styledText = errorText ?: it.message?.let { Red(it) } ?: help.styledText }\n    onValid                = { help.styledText = initialHelperText                                                                    }\n}\n\nval submit = PushButton("Submit").apply {\n    enabled = false\n    size    = Size(100, 32)\n}\n\nval twoDigitNumber = Regex("^1[0-5]\\\\d|^[1-9]\\\\d|^[1-9]")\n\nenum class Gender { Male, Female }\n\nval form = Form { this (\n    + labeled("Name", help = "3+ letters") {\n        textField(Regex(".{3,}"), config = textFieldConfig("Enter your name"))\n    },\n    + labeled("Age", help = "1 or 2 digit number") {\n        textField(twoDigitNumber, ToStringIntEncoder, config = textFieldConfig())\n    },\n    // Binding an initial value\n    Female to labeled("Gender") {\n        radioList(Male, Female) { spacing = 12.0 }\n    },\n    // Forms can be nested\n    + form<Pair<String, Int>> { this (\n        + labeled("Text [Sub-form]", help = "Can be blank") {\n            textField(Regex(".*"), config = textFieldConfig())\n        },\n        + labeled("Number [Sub-form]", help = "1 to 10") {\n            textField(twoDigitNumber, ToStringIntEncoder, validator = { it <= 10 }, config = textFieldConfig())\n        }\n    ) { first, second ->\n        first to second\n    }},\n    onInvalid = { submit.enabled = false },\n) { name, age, gender, pair ->\n    submit.enabled = true\n    println("[Form valid] Name: $name, Age: $age, Gender: $gender, Sub-form: $pair") // <---- check console for output\n}}.apply {\n    // configure the Form view itself\n    size      = Size(300, 100)\n    focusable = false\n    layout    = verticalLayout(this, spacing = 12.0, itemHeight = 32.0)\n}\n')))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Form fields can bind to any type and use any ","[View]"," for display. This is done using a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/form/Form.kt#L18"},(0,i.kt)("inlineCode",{parentName:"a"},"FieldVisualizer")),"\nor the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/form/Form.kt#L42"},(0,i.kt)("inlineCode",{parentName:"a"},"field"))," dsl."))))}v.isMDXComponent=!0}}]);