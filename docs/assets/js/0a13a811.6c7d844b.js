"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[4331],{8030:(e,n,i)=>{i.d(n,{Ay:()=>h,RM:()=>s});var a=i(4848),o=i(8453),t=i(5537),r=i(9329),l=i(4069);const s=[];function d(e){const n={admonition:"admonition",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(n.admonition,{title:"Library Required",type:"info",children:[(0,a.jsxs)("p",{children:["You will need to add the ",e.link," library to your app's dependencies."]}),(0,a.jsxs)(t.A,{groupId:"language",children:[(0,a.jsxs)(r.A,{value:"Kotlin",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"build.gradle.kts"})}),(0,a.jsx)(l.v,{children:e.kotlin})]}),(0,a.jsxs)(r.A,{value:"Groovy",children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"build.gradle"})}),(0,a.jsx)(l.v,{children:e.groovy})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8382:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>P,contentTitle:()=>S,default:()=>D,frontMatter:()=>C,metadata:()=>a,toc:()=>M});const a=JSON.parse('{"id":"theming","title":"Theming","description":"Behaviors","source":"@site/docs/theming.mdx","sourceDirName":".","slug":"/theming","permalink":"/doodle/docs/theming","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Theming","hide_title":true},"sidebar":"tutorialSidebar","previous":{"title":"Popups \u2022 Modals","permalink":"/doodle/docs/modals"},"next":{"title":"Accessibility","permalink":"/doodle/docs/accessibility"}}');var o=i(4848),t=i(8453),r=i(5537),l=i(9329),s=i(8030),d=i(7269),h=i(4069),c=i(9172);const m="package rendering\n\nimport io.nacular.doodle.controls.text.TextField\nimport io.nacular.doodle.drawing.Color.Companion.Darkgray\nimport io.nacular.doodle.drawing.Color.Companion.White\n\nfun example() {\n//sampleStart\n    val textField = TextField().apply {\n        backgroundColor = Darkgray\n        foregroundColor = White\n        borderVisible   = false\n    }\n//sampleEnd\n}",p="package rendering\n\nimport io.nacular.doodle.controls.buttons.Button\nimport io.nacular.doodle.core.Behavior\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.geometry.Point\n\n//sampleStart\nclass MyBehavior: Behavior<Button> {\n    override fun install              (view: Button                ) {}\n    override fun render               (view: Button, canvas: Canvas) {}\n    override fun contains             (view: Button, point : Point ) = point in view.bounds\n    override fun clipCanvasToBounds   (view: Button                ) = true\n    override fun mirrorWhenRightToLeft(view: Button                ) = view.mirrorWhenRightLeft\n    override fun uninstall            (view: Button                ) {}\n}\n//sampleEnd",u="package rendering\n\nimport io.nacular.doodle.core.Behavior\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.core.behavior\n\n//sampleStart\nclass AView: View() {\n    // ...\n    var behavior: Behavior<AView>? by behavior()\n}\n//sampleEnd",v="package rendering\n\nimport io.nacular.doodle.controls.panels.TabbedPanel\nimport io.nacular.doodle.controls.panels.TabbedPanelBehavior\nimport io.nacular.doodle.core.Layout.Companion.simpleLayout\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.utils.diff.Differences\n\n//sampleStart\nclass MyTabbedPanelBehavior: TabbedPanelBehavior<Any>() {\n    override fun install(view: TabbedPanel<Any>) {\n        // children and layout accessible to TabbedPanelBehavior subclasses\n        view        += view {}\n        view.layout  = simpleLayout { views, min, current, max, insets ->\n            // ...\n            current\n        }\n    }\n\n    override fun uninstall(view: TabbedPanel<Any>) {\n        view.children.clear()\n        view.layout = null\n    }\n\n    override fun itemsChanged(panel: TabbedPanel<Any>, differences: Differences<Any>) {\n        // ...\n    }\n\n    override fun selectionChanged(panel: TabbedPanel<Any>, new: Any?, newIndex: Int?, old: Any?, oldIndex: Int?) {\n        // ...\n    }\n}\n\nfun usage(tabbedPanel: TabbedPanel<Any>) {\n    tabbedPanel.behavior = MyTabbedPanelBehavior()\n}\n//sampleEnd",g='dependencies {\n    implementation ("io.nacular.doodle:themes:$doodleVersion")\n}',b='//sampleStart\ndependencies {\n    implementation "io.nacular.doodle:themes:$doodle_version"\n}\n//sampleEnd',T="package themes\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.theme.Scene\nimport io.nacular.doodle.theme.Theme\n\n//sampleStart\nclass MyTheme: Theme {\n    override fun install(scene: Scene) {\n        //\n    }\n\n    override fun install(view: View) {\n        //\n    }\n}\n//sampleEnd",y="package themes\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.NativeTheme\nimport org.kodein.di.instance\n\n//sampleStart\nclass SomeApp(display: Display, manager: ThemeManager, theme: Theme): Application {\n    init {\n        manager.selected = theme\n\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application(modules = listOf(NativeTheme)) {\n        SomeApp(display = instance(), manager = instance(), theme = instance())\n    }\n}\n//sampleEnd",f="package themes\n\nimport io.nacular.doodle.controls.ProgressBar\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.controls.range.Slider\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.theme.Scene\nimport io.nacular.doodle.theme.Theme\n\n//sampleStart\nclass NaiveTheme: Theme {\n    override fun install(scene: Scene) = scene.forEachView {\n        install(it)\n    }\n\n    override fun install(view: View) {\n        when (view) {\n            is Slider<*>   -> { /* it.behavior = ... */ }\n            is PushButton  -> { /* it.behavior = ... */ }\n            is ProgressBar -> { /* it.behavior = ... */ }\n            // ...\n        }\n    }\n}\n//sampleEnd",x="package themes\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\n\n//sampleStart\n/**\n * [NaiveTheme]'s static implementation leads to lots of dependencies that are\n * not used in [SimpleApp]. This includes the View and Behavior classes it uses.\n */\nclass SimpleApp(display: Display, manager: ThemeManager, theme: Theme): Application {\n    init {\n        manager.selected = theme\n\n        display += PushButton()\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd",B="package themes.dynamic\n\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeButtonBehavior\nimport org.kodein.di.instance\nimport themes.SimpleApp\n\n//sampleStart\nfun main() {\n\n    // DynamicThemes require a list of Behavior modules since the\n    // Theme itself is essentially a Behavior filter.\n    // These modules are added to the list of app modules as follows\n\n    application(modules = listOf(nativeButtonBehavior(), /* other modules */)) {\n\n        // The nativeButtonBehavior module also makes ThemeManager and Theme\n        // available by default; so there's no need to use additional modules\n        // for them.\n\n        SimpleApp(display = instance(), manager = instance(), theme = instance())\n    }\n}\n//sampleEnd",w="package io.nacular.doodle.docs.apps\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.list.List\nimport io.nacular.doodle.controls.panels.ScrollPanel\nimport io.nacular.doodle.controls.toString\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.center\nimport io.nacular.doodle.docs.utils.controlBackgroundColor\nimport io.nacular.doodle.docs.utils.highlightingTextVisualizer\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.geometry.centered\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.ThemePicker\nimport io.nacular.doodle.theme.adhoc.DynamicTheme\nimport io.nacular.doodle.theme.adhoc.plus\nimport io.nacular.doodle.user.UserPreferences\nimport io.nacular.doodle.user.UserPreferences.ColorScheme\nimport io.nacular.doodle.user.UserPreferences.ColorScheme.Dark\nimport io.nacular.doodle.utils.Resizer\n\nclass ThemeApp(\n                display        : Display,\n    private val themeManager   : ThemeManager,\n                nativeTheme    : DynamicTheme,\n                basicTheme     : DynamicTheme,\n                basicDarkTheme : DynamicTheme,\n    private val userPreferences: UserPreferences\n): Application {\n    private val lightTheme = nativeTheme + basicTheme\n    private val darkTheme  = nativeTheme + basicDarkTheme\n\n    // Monitor changes to the OS color scheme\n    private val colorSchemeChanged = { _: UserPreferences, _: ColorScheme, new: ColorScheme ->\n        themeManager.selected = when (new) {\n            Dark -> darkTheme\n            else -> lightTheme\n        }\n    }\n\n    private val themePicker = setupThemeControls()\n\n    private val list = List(\n        progression    = 1..1000,\n        itemVisualizer = toString(highlightingTextVisualizer()),\n        selectionModel = MultiSelectionModel(),\n    ).apply {\n        cellAlignment = {\n            it.left    eq 2\n            it.centerY eq parent.centerY\n        }\n    }\n\n    init {\n        display.children += themePicker\n        display.children += ScrollPanel(list).apply {\n            suggestBounds(Rectangle(300, 200).centered(display.center))\n\n            contentWidthConstraints = { it eq parent.width - verticalScrollBarWidth }\n\n            Resizer(this, movable = false)\n        }\n\n        display.layout = constrain(themePicker) {\n            it.top     eq parent.bottom - it.height.readOnly - 10\n            it.centerX eq parent.centerX\n        }\n\n        display.fill(controlBackgroundColor.paint)\n    }\n\n//sampleStart\n    private fun setupThemeControls(): ThemePicker {\n        userPreferences.colorSchemeChanged += colorSchemeChanged\n\n        themeManager.themes += setOf(lightTheme, darkTheme)\n\n        themeManager.selected = when (userPreferences.colorScheme) {\n            Dark -> darkTheme\n            else -> lightTheme\n        }\n\n        return ThemePicker(themeManager).apply { suggestSize(Size(280, 30)) }\n    }\n//sampleEnd\n\n    override fun shutdown() {\n        userPreferences.colorSchemeChanged -= colorSchemeChanged\n    }\n}",j='package themes\n\nimport io.nacular.doodle.controls.IndexedItem\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.theme.CommonLabelBehavior\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.text.StyledText\nimport io.nacular.doodle.theme.Modules.Companion.bindBehavior\nimport io.nacular.doodle.theme.basic.BasicTheme.BasicThemeConfig\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicThemeModule\nimport io.nacular.doodle.utils.PropertyObservers\nimport io.nacular.doodle.utils.PropertyObserversImpl\nimport io.nacular.doodle.utils.observable\nimport org.kodein.di.instance\nimport io.nacular.doodle.theme.basic.BasicTheme as BasicThemeType\n\n//sampleStart\n/**\n * Visualizer that converts a String into a HighlightingLabel.\n */\nfun highlightingTextVisualizer() = itemVisualizer<String, IndexedItem> { item, previous, context ->\n    when (previous) {\n        is HighlightingLabel -> previous.apply {\n            text     = item\n            selected = context.selected\n        }\n        else                 -> HighlightingLabel(StyledText(item), context.selected)\n    }\n}\n\n/**\n * Simple Label that tracks whether it is selected.\n */\nclass HighlightingLabel(styledText: StyledText, selected: Boolean): Label(styledText) {\n    val selectedChanged: PropertyObservers<HighlightingLabel, Boolean> by lazy { PropertyObserversImpl(this) }\n\n    var selected by observable(selected, selectedChanged as PropertyObserversImpl)\n}\n\n/**\n * Custom module that installs a special Label Behavior into HighlightingLabels whenever the BasicTheme is selected.\n * This behavior ensures the foreground is White whenever the label is selected, and the theme default otherwise.\n */\nval highlightingLabelBehavior by lazy {\n    basicThemeModule(name = "HighlightingLabelBehavior") {\n        bindBehavior<HighlightingLabel>(BasicThemeType::class) { label ->\n            label.behavior = object: CommonLabelBehavior(textMetrics = instance()) {\n                private val selectedChanged = { _: HighlightingLabel, _: Boolean, _: Boolean ->\n                    label.foregroundColor = foregroundColor\n                }\n\n                override val foregroundColor get() = when {\n                    label.selected -> White\n                    else           -> instance<BasicThemeConfig>().foregroundColor\n                }\n\n                override fun install(view: Label) {\n                    super.install(view)\n                    label.selectedChanged += selectedChanged\n                }\n\n                override fun uninstall(view: Label) {\n                    label.selectedChanged -= selectedChanged\n                    super.uninstall(view)\n                }\n            }\n        }\n    }\n}\n//sampleEnd',k='package themes\n\nimport io.nacular.doodle.application.Modules.Companion.UserPreferencesModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.docs.apps.ThemeApp\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.BasicTheme\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicButtonBehavior\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicLabelBehavior\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicListBehavior\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicSpinButtonBehavior\nimport io.nacular.doodle.theme.basic.DarkBasicTheme.Companion.DarkBasicTheme\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.NativeTheme\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeScrollPanelBehavior\nimport org.kodein.di.instance\n\nfun launch() {\n//sampleStart\n    val appModules = listOf(\n        BasicTheme,\n        NativeTheme,\n        DarkBasicTheme,\n        UserPreferencesModule,\n        basicListBehavior(),\n        basicLabelBehavior(),\n        basicButtonBehavior(foregroundColor = Black, insets = 12.0),\n        basicSpinButtonBehavior(incrementA11yLabel = "Increment", decrementA11yLabel = "Decrement"),\n        highlightingLabelBehavior,\n        nativeScrollPanelBehavior(),\n    )\n\n    application(modules = appModules) {\n        ThemeApp(\n            display         = instance(),\n            basicTheme      = instance(),\n            nativeTheme     = instance(),\n            themeManager    = instance(),\n            basicDarkTheme  = instance(),\n            userPreferences = instance()\n        )\n    }\n//sampleEnd\n}\n',C={title:"Theming",hide_title:!0},S="Theming",P={},M=[{value:"Behaviors",id:"behaviors",level:2},{value:"Implementing a Behavior",id:"implementing-a-behavior",level:3},{value:"Delegating to a Behavior",id:"delegating-to-a-behavior",level:3},{value:"Specialized Behaviors",id:"specialized-behaviors",level:3},{value:"Themes",id:"themes",level:2},...s.RM,{value:"How themes work",id:"how-themes-work",level:3},{value:"ThemeManager",id:"thememanager",level:3},{value:"Bundle size",id:"bundle-size",level:2},{value:"Dynamic themes",id:"dynamic-themes",level:3}];function A(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,t.R)(),...e.components};return c.F||L("api",!1),c.F.BasicTheme||L("api.BasicTheme",!0),c.F.Behavior||L("api.Behavior",!0),c.F.BehaviorDelegate||L("api.BehaviorDelegate",!0),c.F.BindBehavior||L("api.BindBehavior",!0),c.F.Container||L("api.Container",!0),c.F.DynamicTheme||L("api.DynamicTheme",!0),c.F.NativeTheme||L("api.NativeTheme",!0),c.F.TabbedPanel||L("api.TabbedPanel",!0),c.F.TabbedPanelBehavior||L("api.TabbedPanelBehavior",!0),c.F.Theme||L("api.Theme",!0),c.F.ThemeManager||L("api.ThemeManager",!0),c.F.ThemeModule||L("api.ThemeModule",!0),c.F.ThemesLibrary||L("api.ThemesLibrary",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"theming",children:"Theming"})}),"\n",(0,o.jsx)(n.h2,{id:"behaviors",children:"Behaviors"}),"\n",(0,o.jsx)(n.p,{children:"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc."}),"\n",(0,o.jsx)(h.v,{children:m}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes a View needs to support more complex customization. Take a ",(0,o.jsx)(n.a,{href:"ui_components/overview#tabbedpanel",children:"TabbedPanel"})," for example. The number of configurations is fairly open-ended; and the API would be needlessly complex if it tried to encompass everything."]}),"\n",(0,o.jsxs)(n.p,{children:["This is where a ",(0,o.jsx)(c.F.Behavior,{})," comes in handy. Views can offer deep customization by delegating rendering, hit detection and anything else to Behaviors. TabbedPanel--along with ",(0,o.jsx)(n.a,{href:"ui_components/overview#textfield",children:"TextField"})," and many other controls--actually does this."]}),"\n",(0,o.jsx)(n.h3,{id:"implementing-a-behavior",children:"Implementing a Behavior"}),"\n",(0,o.jsxs)(n.p,{children:["Behaviors offer a few common capabilities that help with View customization. You create one by implementing the ",(0,o.jsx)(c.F.Behavior,{})," interface, or a sub-type of it depending on the target View."]}),"\n",(0,o.jsx)(h.v,{children:p}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["The methods on ",(0,o.jsx)(n.code,{children:"Behavior"})," are all optional"]})}),"\n",(0,o.jsx)(n.p,{children:"Behaviors support installation and uninstallation to and from Views. This gives each Behavior a chance to configure the target View upon first assignment and cleanup when removed."}),"\n",(0,o.jsx)(n.h3,{id:"delegating-to-a-behavior",children:"Delegating to a Behavior"}),"\n",(0,o.jsxs)(n.p,{children:["View subtypes need to manage behaviors directly. Kotlin does not have self types, so the ",(0,o.jsx)(n.code,{children:"View"})," base class cannot have a ",(0,o.jsx)(n.code,{children:"behavior<Self>"})," to make this easier."]}),"\n",(0,o.jsx)(h.v,{children:u}),"\n",(0,o.jsxs)(n.p,{children:["However, View subtypes can use the ",(0,o.jsx)(c.F.BehaviorDelegate,{})," delegate to guarantee proper installation and uninstallation. This delegate also ensures a Behavior's overrides for things like ",(0,o.jsx)(n.code,{children:"clipCanvasToBounds"})," or ",(0,o.jsx)(n.code,{children:"mirrorWhenRightToLeft"})," are not missed during installation."]}),"\n",(0,o.jsx)(n.h3,{id:"specialized-behaviors",children:"Specialized Behaviors"}),"\n",(0,o.jsxs)(n.p,{children:["As mentioned before, ",(0,o.jsx)(c.F.TabbedPanel,{})," delegates a lot to its Behavior. It actually exposes the fact that it is a ",(0,o.jsx)(c.F.Container,{})," to its Behavior. This is done using the ",(0,o.jsx)(c.F.TabbedPanelBehavior,{})," sub interface. Classes that implement this interface are able to directly modify their panel's ",(0,o.jsx)(n.code,{children:"children"})," and ",(0,o.jsx)(n.code,{children:"layout"}),"."]}),"\n",(0,o.jsx)(h.v,{children:v}),"\n",(0,o.jsx)(n.p,{children:"This provides great flexibility when defining the presentation and behavior for TabbedPanels. You can do similar things with Views in your app."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can automatically style Views using ",(0,o.jsx)(n.a,{href:"theming",children:(0,o.jsx)(n.strong,{children:"Themes"})})]})}),"\n",(0,o.jsx)(n.h2,{id:"themes",children:"Themes"}),"\n",(0,o.jsxs)(n.p,{children:["Doodle apps can use ",(0,o.jsx)(c.F.Theme,{}),"s to create a consistent look and behavior across their Views. Doodle has built-in support for a Native and Basic theme (which has a light and dark variant). The ",(0,o.jsx)(c.F.NativeTheme,{})," styles controls like buttons, text fields, and scroll panels using the system default styles and behaviors. The ",(0,o.jsx)(c.F.BasicTheme,{})," provides a customizable foundation to further build on."]}),"\n",(0,o.jsxs)(n.p,{children:["The following app shows a ",(0,o.jsx)(n.a,{href:"ui_components/overview#list",children:"List"})," of numbers that are visualized as custom ",(0,o.jsx)(n.a,{href:"ui_components/overview#label",children:"Labels"}),". These are all themed dynamically based on the ",(0,o.jsx)(n.strong,{children:"OS dark vs light setting"})," and the ",(0,o.jsx)(n.a,{href:"ui_components/overview#spinbutton",children:"SpinButton"})," control that manages which theme is selected."]}),"\n",(0,o.jsx)(d.T,{functionName:"themes",height:"400"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Change the dark/light setting in your OS to see the app change in realtime."})}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(l.A,{value:"App",children:(0,o.jsx)(h.v,{children:w})}),(0,o.jsx)(l.A,{value:"Helpers",children:(0,o.jsx)(h.v,{children:j})}),(0,o.jsx)(l.A,{value:"Launcher",children:(0,o.jsx)(h.v,{children:k})})]}),"\n",(0,o.jsx)(s.Ay,{link:(0,o.jsx)(c.F.ThemesLibrary,{}),kotlin:g,groovy:b}),"\n",(0,o.jsx)(n.h3,{id:"how-themes-work",children:"How themes work"}),"\n",(0,o.jsx)(n.p,{children:"Themes implement a simple interface that allows them to process the entire View graph and apply style and behavior changes. The API is as follows:"}),"\n",(0,o.jsx)(h.v,{children:T}),"\n",(0,o.jsxs)(n.p,{children:["Doodle calls the ",(0,o.jsx)(n.code,{children:"install"})," method when applying a Theme for the first time, and when Views are added to the Display after installation. It provides the ",(0,o.jsx)(n.code,{children:"Display"})," and a sequence of displayed Views. The Theme is free to customize both."]}),"\n",(0,o.jsx)(n.h3,{id:"thememanager",children:"ThemeManager"}),"\n",(0,o.jsxs)(n.p,{children:["Themes are handles by the ",(0,o.jsx)(c.F.ThemeManager,{}),". It provides an API for selecting the active Theme. Inject it into your app to work with Themes."]}),"\n",(0,o.jsx)(h.v,{children:y}),"\n",(0,o.jsxs)(n.p,{children:["This app installs the ",(0,o.jsx)(n.code,{children:"NativeTheme"}),", which is available in a bundle of the same name. That bundle also includes the common ",(0,o.jsx)(c.F.ThemeModule,{}),", which provides access to the ",(0,o.jsx)(n.code,{children:"ThemeManager"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"bundle-size",children:"Bundle size"}),"\n",(0,o.jsx)(n.p,{children:"Themes can lead to larger bundle sizes than expected depending on how they are implemented. Take the following\nfor example."}),"\n",(0,o.jsx)(h.v,{children:f}),"\n",(0,o.jsx)(n.admonition,{type:"danger",children:(0,o.jsx)(n.p,{children:"Themes defined this way are not very portable due to their heavy bundle cost"})}),"\n",(0,o.jsx)(h.v,{children:x}),"\n",(0,o.jsx)(n.h3,{id:"dynamic-themes",children:"Dynamic themes"}),"\n",(0,o.jsxs)(n.p,{children:["Doodle addresses this concern with the ",(0,o.jsx)(c.F.DynamicTheme,{}),". This Theme uses dependency injection to discover the set of Behaviors that have been installed via Kodein Modules. It can filter that list down to those Behaviors associated with it. This avoids hard dependencies on Views or Behaviors as a result."]}),"\n",(0,o.jsxs)(n.p,{children:["DynamicThemes require explicit Behavior registration to work. The built-in Themes define a Module per Behavior to allow arbitrary groupings within apps. These modules are defined using ",(0,o.jsx)(c.F.BindBehavior,{}),", which takes a ",(0,o.jsx)(c.F.Theme,{})," class and binds a ",(0,o.jsx)(c.F.DynamicTheme,{})," that includes behaviors associated with that class."]}),"\n",(0,o.jsx)(h.v,{children:B}),"\n",(0,o.jsxs)(n.p,{children:["This app no longer has extraneous dependencies on things like ",(0,o.jsx)(n.code,{children:"ProgressBar"})," and its ",(0,o.jsx)(n.code,{children:"Behavior"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Include behavior modules like this so they can be used as part of a dynamic ",(0,o.jsx)(n.code,{children:"Theme"}),"."]})})]})}function D(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(A,{...e})}):A(e)}function L(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);