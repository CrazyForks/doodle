"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[325],{1513:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>v,frontMatter:()=>p,metadata:()=>f,toc:()=>w});var a=t(7462),i=(t(7294),t(3905)),o=(t(8209),t(4866),t(5162),t(4903)),r=t(1912),s=t(1166);const l="import io.nacular.doodle.drawing.AffineTransform\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.measured.units.Angle.Companion.degrees\nimport io.nacular.measured.units.Angle.Companion.radians\nimport io.nacular.measured.units.times\nimport kotlin.math.PI\n\nfun affineTransformChaining(transform: AffineTransform) {\n//sampleStart\n    transform.\n        rotateY(by = 45 * degrees, around = Point( 2, 4)).\n        rotateX(by = PI * radians, around = Point(10, 3)).\n        //...\n        flipHorizontally()\n//sampleEnd\n}",d="import io.nacular.doodle.core.View\nimport io.nacular.doodle.core.center\nimport io.nacular.doodle.drawing.AffineTransform.Companion.Identity\nimport io.nacular.measured.units.Angle.Companion.degrees\nimport io.nacular.measured.units.times\n\nfun affineTransform(view: View) {\n//sampleStart\n    view.transform = Identity\n    view.transform = Identity.rotateX(around = view.center, by = 45 * degrees)\n//sampleEnd\n}",m="\nimport io.nacular.doodle.core.View\n\nfun View.twoSidedView() {\n//sampleStart\n//  Example of how one might determine whether a View is facing the user.\n//  This takes the cross product of 2 vectors on the View's surface and\n//  applies its transformation and camera.\n\n    val points = (camera.projection * transform).invoke(bounds.points.take(3))\n    val faceUp = (points[1] - points[0] cross points[2] - points[1]).z > 0.0\n//sampleEnd\n}",h="import io.nacular.doodle.core.View\nimport io.nacular.doodle.drawing.AffineTransform.Companion.Identity\n\nfun identityTransform(view: View) {\n//sampleStart\n    // Scale view by 2 in x and y\n    view.transform = Identity.scale(2.0, 2.0)\n\n    // ...\n\n    // Remove all transform effects\n    view.transform = Identity\n//sampleEnd\n}",p={hide_title:!0},c="Transforms",f={unversionedId:"transforms",id:"transforms",title:"Transforms",description:"Each  is a flat, 2D surface bound to a 2D grid. This means Views can only have an / position, and an area within the plane. However, Views can also be transformed using Affine Transformations (and perspective) that alter the way they are displayed. These transforms allow you to change a View's position and shape in the full 3D volume.",source:"@site/docs/transforms.mdx",sourceDirName:".",slug:"/transforms",permalink:"/doodle/docs/transforms",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Constraints",permalink:"/doodle/docs/layout/constraints"},next:{title:"Overview",permalink:"/doodle/docs/pointer_input/overview"}},u={},w=[{value:"Affine Transforms",id:"affine-transforms",level:2},{value:"Identity Transform",id:"identity-transform",level:2},{value:"Cameras",id:"cameras",level:2},{value:"Sharing Cameras",id:"sharing-cameras",level:2},{value:"2-Sided Views",id:"2-sided-views",level:2}],g={toc:w},y="wrapper";function v(e){let{components:n,...t}=e;return(0,i.kt)(y,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transforms"},"Transforms"),(0,i.kt)("p",null,"Each ",(0,i.kt)(s.G7x,null)," is a flat, 2D surface bound to a 2D grid. This means Views can only have an ",(0,i.kt)(s.V1i,null),"/",(0,i.kt)(s.km8,null)," position, and an area within the plane. However, Views can also be transformed using ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Affine_transformation"},"Affine Transformations")," (and perspective) that alter the way they are displayed. These transforms allow you to change a View's position and shape in the full 3D volume."),(0,i.kt)(o.l,{functionName:"playingCard",height:"500",mdxType:"DoodleApp"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the right slider to change the camera distance from the View, which changes the intensity of the perspective used to render it.")),(0,i.kt)("h2",{id:"affine-transforms"},"Affine Transforms"),(0,i.kt)("p",null,"Each View has a ",(0,i.kt)(s.X8Q,null)," that can be set at any time to change how it is rendered. Changes to this property will update the View on screen if it is ",(0,i.kt)(s.D$9,null),". Transforms are very lightweight and do not require re-rendering or trigger layouts when modified. This makes them a great option for animations and other UI treatments."),(0,i.kt)(r.O,{mdxType:"KPlayground"},d),(0,i.kt)("p",null,"Multiple ",(0,i.kt)(s.oi,null)," instances can also be combined to produce more complex operations. The end result is a single transform that will behave as though each operation were done in succession."),(0,i.kt)(r.O,{mdxType:"KPlayground"},l),(0,i.kt)("h2",{id:"identity-transform"},"Identity Transform"),(0,i.kt)("p",null,"Views default to the ",(0,i.kt)(s.iJz,null)," transform, which does not change the View at all. Set this to effectively clear a View's transform."),(0,i.kt)(r.O,{mdxType:"KPlayground"},h),(0,i.kt)("h2",{id:"cameras"},"Cameras"),(0,i.kt)(s.oi,null),"s warp an object while preserving collinearity (points on a line remain on a line) and distance ratios. This means they are insufficient to produce perspective. Perspective requires a transformation that preserves collinearity, but not distance ratios. Doodle supports this via ",(0,i.kt)(s.V1s,null),"s. Each Camera has a `position` (relative to a View's parent) and `distance`, which define where vanishing points will be and the intensity their parallel warping effect. Each View has a ",(0,i.kt)(s.FCe,null)," that will combine with its `transform` to produce a final perspective transformation.",(0,i.kt)(o.l,{functionName:"camera",height:"500",mdxType:"DoodleApp"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Drag the camera to change its position. Resize it to change its distance from the plane.")),(0,i.kt)("h2",{id:"sharing-cameras"},"Sharing Cameras"),(0,i.kt)("p",null,"Views can share a single Camera, which allows them to share the same perspective when they have the same parent (or are all top-level). The result, as you can see below is the effect of the Views sharing the same 3D space."),(0,i.kt)(o.l,{functionName:"camera2",height:"500",mdxType:"DoodleApp"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"A View's Camera position is relative to its parent, so shared Cameras only produce the single 3D space for Views with the ",(0,i.kt)("strong",{parentName:"p"},"same parent"),".")),(0,i.kt)("h2",{id:"2-sided-views"},"2-Sided Views"),(0,i.kt)("p",null,"Views render onto an infinitely flat plane that is similar to a sheet of glass. This means you see the contents of a View that is flipped or rotated as though you are looking through the back of that pane of glass. You can have Views with 2-sides of course, as you see with the playing cards. But that requires logic to decide when the View's back is visible. The playing card does this by recomputing its face direction whenever its ",(0,i.kt)(s.X8Q,null)," or ",(0,i.kt)(s.FCe,null)," change, and repainting if needed."),(0,i.kt)(r.O,{mdxType:"KPlayground"},m))}v.isMDXComponent=!0}}]);