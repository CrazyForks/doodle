"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[92],{8827:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>m,default:()=>k,frontMatter:()=>f,metadata:()=>p,toc:()=>h});var o=n(7462),r=(n(7294),n(3905)),t=(n(8209),n(4866)),i=n(5162),s=n(4903),d=n(1912),c=n(1166);const l="package io.nacular.doodle.docs.utils\n\nimport io.nacular.doodle.core.Camera\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.core.renderProperty\nimport io.nacular.doodle.drawing.AffineTransform\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color\nimport io.nacular.doodle.drawing.Stroke\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.utils.ChangeObservers\nimport io.nacular.doodle.utils.ChangeObserversImpl\nimport io.nacular.measured.units.Angle\nimport io.nacular.measured.units.times\n\n//sampleStart\nclass Cube: View() {\n    private val side   = 100.0\n    private val rect   = Rectangle(size = Size(side))\n    private val stroke = Stroke(thickness = 2.0, fill = Color.Darkgray.paint)\n\n    var foldAngle       by renderProperty(-90 * Angle.degrees) { _,_ -> (changed as ChangeObserversImpl).invoke() }\n    var canvasCamera    by renderProperty(Camera(Point.Origin, 1000.0)) { _,_ -> (changed as ChangeObserversImpl).invoke() }\n    var canvasTransform by renderProperty(AffineTransform.Identity.translate(z = -side / 2)) { _,_ -> (changed as ChangeObserversImpl).invoke() }\n\n    val changed: ChangeObservers<Cube> = ChangeObserversImpl(this)\n\n    override fun render(canvas: Canvas) {\n        var transform    = canvasTransform\n        var faceLocation = Point((width - side) / 2, (height - side) / 2)\n\n        drawFace(canvas, faceLocation, transform) // Back\n\n        faceLocation += Point(x = side)\n        transform    *= AffineTransform.Identity.rotateY(around = faceLocation, foldAngle)\n\n        drawFace(canvas, faceLocation, transform) // Right\n\n        faceLocation -= Point(y = side)\n\n        drawFace(canvas, faceLocation, transform.rotateX(around = faceLocation + Point(y = side), foldAngle)) // Top\n\n        faceLocation += Point(y = 2 * side)\n        transform    *= AffineTransform.Identity.rotateX(around = faceLocation, -foldAngle)\n\n        drawFace(canvas, faceLocation, transform) // Bottom\n\n        faceLocation += Point(y = side)\n        transform    *= AffineTransform.Identity.rotateX(around = faceLocation, -foldAngle)\n\n        drawFace(canvas, faceLocation, transform) // Left\n\n        faceLocation += Point(x = side)\n        transform    *= AffineTransform.Identity.rotateY(around = faceLocation, foldAngle)\n\n        drawFace(canvas, faceLocation, transform) // Front\n    }\n\n    private fun drawFace(canvas: Canvas, location: Point, transform: AffineTransform) {\n        canvas.transform(transform, canvasCamera) { rect(rect.at(location), stroke) }\n    }\n}\n//sampleEnd",f={hide_title:!0},m="3D",p={unversionedId:"rendering/3d",id:"rendering/3d",title:"3D",description:"Canvas offers basic 3D capabilities through the use of s and s. This enables s to display content in a shared 3D space.",source:"@site/docs/rendering/3d.mdx",sourceDirName:"rendering",slug:"/rendering/3d",permalink:"/doodle/docs/rendering/3d",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Colors",permalink:"/doodle/docs/rendering/colors"},next:{title:"Behaviors",permalink:"/doodle/docs/rendering/behaviors"}},u={},h=[],v={toc:h},g="wrapper";function k(e){let{components:a,...n}=e;return(0,r.kt)(g,(0,o.Z)({},v,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3d"},"3D"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"overview#the-canvas"},"Canvas")," offers basic 3D capabilities through the use of ",(0,r.kt)(c.oi,null),"s and ",(0,r.kt)(c.V1s,null),"s. This enables ",(0,r.kt)(c.G7x,null),"s to display content in a shared 3D space."),(0,r.kt)("p",null,"The following examples has a View that draws a 3D cube. The cube looks like a 3D object even though it is flat on the View's surface. The controls (which are overlaid on the View) let you change the starting transform applied to the cube's back face (which changes the cube's overall transform), the folding angle of each face, and the camera used to create the perspective."),(0,r.kt)(t.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"Demo",mdxType:"TabItem"},(0,r.kt)(s.l,{functionName:"cube",height:"500",mdxType:"DoodleApp"})),(0,r.kt)(i.Z,{value:"Cube.kt",mdxType:"TabItem"},(0,r.kt)(d.O,{mdxType:"KPlayground"},l))))}k.isMDXComponent=!0}}]);