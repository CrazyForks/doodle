"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[535],{1912:(e,n,o)=>{o.d(n,{O:()=>a});var t=o(7294);class a extends t.Component{constructor(e){super(e),this.code=e.children}componentDidMount(){KotlinPlayground(".kotlin-playground")}render(){return t.createElement("code",{className:"kotlin-playground","data-target-platform":"js",theme:"darcula","data-highlight-only":!0},this.code)}}},4785:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var t=o(7462),a=(o(7294),o(3905)),r=(o(8209),o(5488),o(5162),o(4903)),i=o(1912);const l={hide_title:!0},d="Drag & Drop",p={unversionedId:"dragdrop",id:"dragdrop",title:"Drag & Drop",description:"Drag-and-drop is a form of data transfer between two Views or a View and an external component. The Views involved",source:"@site/docs/dragdrop.mdx",sourceDirName:".",slug:"/dragdrop",permalink:"/doodle/docs/dragdrop",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Keyboard Input",permalink:"/doodle/docs/keyboard"},next:{title:"Catalog",permalink:"/doodle/docs/ui_components/overview"}},s={},c=[{value:"Required Module",id:"required-module",level:2},{value:"Creating A Source",id:"creating-a-source",level:2},{value:"Receiving Drops",id:"receiving-drops",level:2},{value:"Data Bundles",id:"data-bundles",level:2},{value:"Event Sequence",id:"event-sequence",level:2},{value:"Handling Dragged Files",id:"handling-dragged-files",level:2}],u={toc:c};function m(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"drag--drop"},"Drag & Drop"),(0,a.kt)("p",null,"Drag-and-drop is a form of data transfer between two Views or a View and an external component. The Views involved\ncan be within a single app, or separate apps; and the external component may be within a 3rd-party app entirely."),(0,a.kt)("p",null,"There key components involved in drag-and-drop sequence are: a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/dragdrop/DragRecognizer.kt#L63"},(0,a.kt)("inlineCode",{parentName:"a"},"DragRecognizer")),"\nattached to a source View, ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/dragdrop/DropReceiver.kt#L20"},(0,a.kt)("inlineCode",{parentName:"a"},"DropReceiver")),"\nlinked to a receiver View, and a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/DataBundle.kt#L133"},(0,a.kt)("inlineCode",{parentName:"a"},"DataBundle")),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Either the source or target can be external to the app, meaning there might not be a recognizer or receiver at play.")),(0,a.kt)("p",null,"The operation occurs when the user presses and drags a pointer within a drag-and-drop source, then drags that pointer\nonto a target and releases. Data will be captured from the source and provided to the target, where it can decide\nwhether and how to accept it."),(0,a.kt)("h2",{id:"required-module"},"Required Module"),(0,a.kt)("p",null,"You must include the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L87"},(0,a.kt)("inlineCode",{parentName:"a"},"DragDropModule")),"\nin your application in order to enable drag-and-drop. This module imports the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L62"},(0,a.kt)("inlineCode",{parentName:"a"},"PointerModule")),"\nas well, so you do not need to do so."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"import io.nacular.doodle.application.Modules.Companion.DragDropModule\n\n// ...\n\nfun main() {\n    // Launch MyApp with drag-drop enabled\n    application(modules = setOf(DragDropModule /*,...*/)) {\n        MyApp(/*...*/)\n    }\n}\n")),(0,a.kt)("h2",{id:"creating-a-source"},"Creating A Source"),(0,a.kt)("p",null,"You can create a drag source by attaching a ",(0,a.kt)("inlineCode",{parentName:"p"},"DragRecognizer")," to any ",(0,a.kt)("inlineCode",{parentName:"p"},"View"),". The recognizer is responsible for initiating\nthe operation in response to a drag ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/event/PointerEvent.kt#L10"},(0,a.kt)("inlineCode",{parentName:"a"},"PointerEvent")),".\nThis is done by implementing ",(0,a.kt)("inlineCode",{parentName:"p"},"dragRecognized"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface DragRecognizer {\n    fun dragRecognized(event: PointerEvent): DragOperation?\n}\n")),(0,a.kt)("p",null,"The operation begins whenever a receiver returns a non-null ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/dragdrop/DragRecognizer.kt#L14"},(0,a.kt)("inlineCode",{parentName:"a"},"DragOperation")),"\nfrom ",(0,a.kt)("inlineCode",{parentName:"p"},"dragRecognized"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"DragOperation"),"\ncontains the transfer data, user action (copy, move, link), and visual used to provide feedback during the operation.\nThis object represents the entire lifecycle of the operation and is notified when dragging begins, completes, or is canceled.\nThis allows the source to update based on the outcome of the operation."),(0,a.kt)(i.O,{mdxType:"KPlayground"},'package io.nacular.doodle.docs.apps\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.datatransport.dragdrop.DragOperation\nimport io.nacular.doodle.datatransport.dragdrop.DragOperation.Action\nimport io.nacular.doodle.datatransport.dragdrop.DragOperation.Action.Copy\nimport io.nacular.doodle.datatransport.dragdrop.DragOperation.Action.Move\nimport io.nacular.doodle.datatransport.dragdrop.dragRecognized\nimport io.nacular.doodle.datatransport.textBundle\nimport io.nacular.doodle.docs.utils.DEFAULT_FONT_FAMILY\nimport io.nacular.doodle.docs.utils.DEFAULT_FONT_SIZE\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Red\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.FontLoader\nimport io.nacular.doodle.drawing.Renderable\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.drawing.text\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.launch\n\nclass ButtonDragApp(\n    display     : Display,\n    fonts       : FontLoader,\n    themeManager: ThemeManager,\n    theme       : Theme\n): Application {\n    init {\n        CoroutineScope(SupervisorJob() + Dispatchers.Default).launch {\n            val font = fonts {\n                family = DEFAULT_FONT_FAMILY\n                size   = DEFAULT_FONT_SIZE\n            }\n\n            themeManager.selected = theme\n\n//sampleStart\n            val button = PushButton("Hello").apply {\n                this.font = font\n                size = Size(80, 40)\n\n                dragRecognizer = dragRecognized {\n                    object: DragOperation {\n                        override val bundle         = textBundle(text)\n                        override val allowedActions = setOf(Copy, Move)\n                        override val visualOffset   = Point(0, 14)\n                        override val visual         = object : Renderable {\n                            override val size = this@apply.size\n\n                            override fun render(canvas: Canvas) {\n                                canvas.text(text, font = font, color = Red)\n                            }\n                        }\n\n                        override fun completed(action: Action) {\n                            if (action == Move) text = ""\n                        }\n                    }\n                }\n            }\n//sampleEnd\n\n            display += button\n            display.layout = constrain(display.first(), center)\n            display.fill(White.paint)\n        }\n    }\n\n    override fun shutdown() {}\n}'),(0,a.kt)(r.l,{functionName:"buttonDrag",height:"100",mdxType:"DoodleApp"}),(0,a.kt)("p",null,"This is an example of a simple recognizer that allows the text from a button to be copied or moved to a target."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Having the ",(0,a.kt)("inlineCode",{parentName:"p"},"PointerEvent")," that triggered the drag lets a recognizer decide which subregion in a View a drag can happen from.\nIt can also produce different data from different regions in a single View.")),(0,a.kt)("h2",{id:"receiving-drops"},"Receiving Drops"),(0,a.kt)("p",null,"You receive drops by attaching a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/dragdrop/DropReceiver.kt#L20"},(0,a.kt)("inlineCode",{parentName:"a"},"DropReceiver")),"\nto any ",(0,a.kt)("inlineCode",{parentName:"p"},"View"),". Dragging a pointer over a ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," with a receiver during a drag-and-rop triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"dropEnter")," event. Subsequent pointer movement results\nin ",(0,a.kt)("inlineCode",{parentName:"p"},"dropOver")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"dropExit")," events; and releasing the pointer sends the ",(0,a.kt)("inlineCode",{parentName:"p"},"drop")," event. Each of these events provides a\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/dragdrop/DropReceiver.kt#L9"},(0,a.kt)("inlineCode",{parentName:"a"},"DropEvent")),"\nwith information about the data being transferred and the user's intended action."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DropReceiver")," indicates whether the current drop operation is allowed by returning ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," on any of these events. Or, it\ncan return ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," to signal the drop is not allowed."),(0,a.kt)(r.l,{functionName:"buttonDrop",height:"100",mdxType:"DoodleApp"}),(0,a.kt)(i.O,{mdxType:"KPlayground"},'package io.nacular.doodle.docs.apps\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.datatransport.PlainText\nimport io.nacular.doodle.datatransport.dragdrop.DropEvent\nimport io.nacular.doodle.datatransport.dragdrop.DropReceiver\nimport io.nacular.doodle.docs.utils.DEFAULT_FONT_FAMILY\nimport io.nacular.doodle.docs.utils.DEFAULT_FONT_SIZE\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.FontLoader\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.launch\n\n/**\n * Created by Nicholas Eddy on 2/28/19.\n */\nclass ButtonDropApp(\n    display     : Display,\n    fonts       : FontLoader,\n    themeManager: ThemeManager,\n    theme       : Theme\n): Application {\n    init {\n        CoroutineScope(SupervisorJob() + Dispatchers.Default).launch {\n            val font = fonts {\n                family = DEFAULT_FONT_FAMILY\n                size   = DEFAULT_FONT_SIZE\n            }\n\n            themeManager.selected = theme\n\n//sampleStart\n            val button = PushButton("_____").apply {\n                this.font = font\n                size = Size(80, 40)\n\n                dropReceiver = object: DropReceiver {\n                    override val active = true\n\n                    private  fun allowed          (event: DropEvent) = PlainText in event.bundle\n                    override fun dropEnter        (event: DropEvent) = allowed(event)\n                    override fun dropOver         (event: DropEvent) = allowed(event)\n                    override fun dropActionChanged(event: DropEvent) = allowed(event)\n                    override fun drop             (event: DropEvent) = event.bundle[PlainText]?.let { this@apply.text = it; true } ?: false\n                }\n            }\n//sampleEnd\n\n            display += button\n            display.layout = constrain(display.first(), center)\n            display.fill(White.paint)\n        }\n    }\n\n    override fun shutdown() {}\n}'),(0,a.kt)("p",null,"This is a simple receiver that accepts ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/DataBundle.kt#L84"},(0,a.kt)("inlineCode",{parentName:"a"},"PlainText")),"\ndata and assigns it to the button's text. Try dragging some text onto the button. You can even drag from the previous app's button."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"View")," can be a source and target for drag-and-drop simultaneously.")),(0,a.kt)("h2",{id:"data-bundles"},"Data Bundles"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DataBundle")," class manages the underlying data that is transfered between the source and target. This interface\nhas two key methods: ",(0,a.kt)("inlineCode",{parentName:"p"},"contains")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),": both take a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/DataBundle.kt#L45"},(0,a.kt)("inlineCode",{parentName:"a"},"MimeType")),"."),(0,a.kt)(i.O,{mdxType:"KPlayground"},"\ninterface DataBundle {\n    operator fun <T> get     (type: MimeType<T>): T?\n    operator fun <T> contains(type: MimeType<T>): Boolean\n\n\n    //...\n}\n"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"contains")," method checks whether the bundle has data that matches the given mime-type, and ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," returns it."),(0,a.kt)("h2",{id:"event-sequence"},"Event Sequence"),(0,a.kt)("p",null,"The full sequence of events for an operation goes something like this:"),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    participant s as Framework\n    participant r as DragRecognizer\n    participant o as DragOperation\n    participant b as DataBundle\n    participant p as DropReceiver\n\n    s->>r : dragRecognized\n    r--\x3e>s: DragOperation\n    s->>o : bundle, allowed actions, visual, ...\n    s->>p : dropEnter\n    loop\n        s->>p : dropOver, [dropExit]\n    end\n    s->>p : drop\n    p->>b : contains, invoke\n    b--\x3e>p: T\n    s->>o : completed"}),(0,a.kt)("h2",{id:"handling-dragged-files"},"Handling Dragged Files"),(0,a.kt)("p",null,"Drag-and-drop also supports file transfer. This is handled via a ",(0,a.kt)("inlineCode",{parentName:"p"},"DropReceiver"),"--just like any other data type, with\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/datatransport/DataBundle.kt#L98"},(0,a.kt)("inlineCode",{parentName:"a"},"Files")),"\nmime-type indicating which file types are allowed."),(0,a.kt)("p",null,"Try dragging files into the table below. The app will only allow files whose types are selected in the list. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Files")," mime-type\nfetches a collection of files from the bundle, which allows a receiver to handle multiple files in a single drop."),(0,a.kt)(r.l,{functionName:"fileDragDrop",height:"300",mdxType:"DoodleApp"}),(0,a.kt)(i.O,{mdxType:"KPlayground"},'package io.nacular.doodle.docs.apps\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.IndexedItem\nimport io.nacular.doodle.controls.ItemVisualizer\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.list.List\nimport io.nacular.doodle.controls.mutableListModelOf\nimport io.nacular.doodle.controls.panels.ScrollPanel\nimport io.nacular.doodle.controls.table.DynamicTable\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.toString\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.container\nimport io.nacular.doodle.datatransport.Files\nimport io.nacular.doodle.datatransport.Image\nimport io.nacular.doodle.datatransport.LocalFile\nimport io.nacular.doodle.datatransport.PlainText\nimport io.nacular.doodle.datatransport.TextType\nimport io.nacular.doodle.datatransport.dragdrop.DropEvent\nimport io.nacular.doodle.datatransport.dragdrop.DropReceiver\nimport io.nacular.doodle.docs.utils.DEFAULT_FONT_FAMILY\nimport io.nacular.doodle.docs.utils.DEFAULT_FONT_SIZE\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.FontLoader\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.Bounds\nimport io.nacular.doodle.layout.constraints.ConstraintDslContext\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.layout.constraints.fill\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.utils.Direction\nimport io.nacular.doodle.utils.Resizer\nimport io.nacular.measured.units.BinarySize.Companion.kilobytes\nimport io.nacular.measured.units.times\nimport io.nacular.measured.units.toNearest\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.launch\n\nclass FileDragApp(\n    display       : Display,\n    fonts         : FontLoader,\n    themeManager  : ThemeManager,\n    theme         : Theme,\n    textVisualizer: ItemVisualizer<String, IndexedItem>\n): Application {\n\n    private fun fileSize(file: LocalFile) = file.size toNearest 1 * kilobytes\n\n    init {\n        CoroutineScope(SupervisorJob() + Dispatchers.Default).launch {\n            val font = fonts {\n                family = DEFAULT_FONT_FAMILY\n                size   = DEFAULT_FONT_SIZE\n            }\n\n            themeManager.selected = theme\n\n            val leftAligned: ConstraintDslContext.(Bounds) -> Unit = { it.left eq 4; it.centerY eq parent.centerY }\n\n            val fileTypes = listOf(\n                PlainText,\n                TextType("csv"),\n                Image("jpg"),\n                Image("jpeg")\n            )\n\n            val fileTypesList = List(fileTypes, toString(textVisualizer), MultiSelectionModel(), fitContent = emptySet()).apply {\n                this.font = font\n\n                cellAlignment = {\n                    it.left eq 4\n                    it.centerY eq parent.centerY\n                }\n            }\n\n            val tableData = mutableListModelOf<LocalFile>()\n            val fileTable = DynamicTable(tableData, MultiSelectionModel()) {\n                column(Label("Name"), { name }, textVisualizer) { minWidth = 50.0; width = 200.0; headerAlignment = leftAligned; cellAlignment = leftAligned }\n                column(Label("Size"), { fileSize(this) }, toString(textVisualizer)) { minWidth = 50.0; width = 75.0; cellAlignment = { it.right eq parent.right - 4; it.centerY eq parent.centerY } }\n                column(Label("Type"), { type }, textVisualizer) { minWidth = 50.0; width = 150.0; cellAlignment = center }\n            }.apply {\n                var allowedFileTypes: Files? = null\n\n                fileTypesList.selectionChanged += { _, _, _ ->\n                    allowedFileTypes = Files(*fileTypesList.selection.map { fileTypes[it] }.toTypedArray())\n                }\n\n                this.font = font\n                bounds = Rectangle(200, 0, 400, 200)\n//sampleStart\n                dropReceiver = object: DropReceiver {\n                    override val active = true\n\n                    private  fun allowed          (event: DropEvent) = allowedFileTypes?.let { it in event.bundle } ?: false\n                    override fun dropEnter        (event: DropEvent) = allowed(event)\n                    override fun dropOver         (event: DropEvent) = allowed(event)\n                    override fun dropActionChanged(event: DropEvent) = allowed(event)\n                    override fun drop             (event: DropEvent) = allowedFileTypes?.let { event.bundle[it] }?.let { files ->\n                        files.forEach { tableData.add(it) }\n                        true\n                    } ?: false\n                }\n//sampleEnd\n                Resizer(this).apply {\n                    movable = false\n                    directions = setOf(Direction.East)\n                }\n            }\n\n            display += container {\n                this += ScrollPanel(fileTypesList).apply {\n                    size = Size(120, 200)\n                    contentWidthConstraints = { it eq max(parent.width, it) }\n                    contentHeightConstraints = { it eq max(parent.height, it) }\n                }\n                this += fileTable\n\n                layout = constrain(children[0], children[1]) { a, b ->\n                    val spacing = 10\n\n                    a.left eq (parent.width - (children[0].width + children[1].width + spacing)) / 2\n                    a.centerY eq parent.centerY\n                    b.left eq a.right + spacing\n                    b.top eq a.top\n                }\n            }\n\n            display.layout = constrain(display.first(), fill)\n            display.fill(White.paint)\n        }\n    }\n\n    override fun shutdown() {}\n}'))}m.isMDXComponent=!0}}]);