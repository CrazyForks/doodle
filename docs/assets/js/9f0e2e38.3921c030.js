"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[950],{492:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=a(7462),i=(a(7294),a(3905));a(8209);const o={hide_title:!0},r="Behaviors",l={unversionedId:"rendering/behaviors",id:"rendering/behaviors",title:"Behaviors",description:"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc.",source:"@site/docs/rendering/behaviors.mdx",sourceDirName:"rendering",slug:"/rendering/behaviors",permalink:"/doodle/docs/rendering/behaviors",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"3D",permalink:"/doodle/docs/rendering/3d"},next:{title:"Overview",permalink:"/doodle/docs/pointer_input/overview"}},s={},d=[{value:"Deeper customization",id:"deeper-customization",level:2},{value:"Implementing a Behavior",id:"implementing-a-behavior",level:3},{value:"Delegating to a Behavior",id:"delegating-to-a-behavior",level:3},{value:"Specialized Behaviors",id:"specialized-behaviors",level:2}],p={toc:d};function c(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"behaviors"},"Behaviors"),(0,i.kt)("p",null,"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val textField = TextField().apply {\n    backgroundColor = Darkgray\n    foregroundColor = White\n    borderVisible   = false\n}\n")),(0,i.kt)("h2",{id:"deeper-customization"},"Deeper customization"),(0,i.kt)("p",null,"Sometimes a View needs to support more complex customization. Take a ",(0,i.kt)("a",{parentName:"p",href:"../ui_components/overview#tabbedpanel"},"TabbedPanel")," for example. The number of configurations is\nfairly open-ended; and the API would be needlessly complex if it tried to encompass everything."),(0,i.kt)("p",null,"This is where a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L6"},(0,i.kt)("inlineCode",{parentName:"a"},"Behavior")),"\ncomes in handy. Views can offer deep customization by delegating rendering, hit detection and anything else to Behaviors. TabbedPanel--along\nwith ",(0,i.kt)("a",{parentName:"p",href:"../ui_components/overview#textfield"},"TextField")," and many other controls--actually does this."),(0,i.kt)("h3",{id:"implementing-a-behavior"},"Implementing a Behavior"),(0,i.kt)("p",null,"Behaviors offer a few common capabilities that help with View customization. You create one by implementing the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L6"},(0,i.kt)("inlineCode",{parentName:"a"},"Behavior")),"\ninterface, or a sub-type of it depending on the target View."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyBehavior: Behavior<Button> {\n    override fun install(view: Button) {}\n    override fun render(view: Button, canvas: Canvas) {}\n    override fun contains(view: Button, point: Point) = point in view.bounds\n    override fun clipCanvasToBounds(view: Button) = true\n    override fun mirrorWhenRightToLeft(view: T) = view.mirrorWhenRightLeft\n    override fun uninstall(view: Button) {}\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The methods on ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior")," are all optional")),(0,i.kt)("p",null,"Behaviors support installation and uninstallation to and from Views. This gives each Behavior a chance to configure the target\nView upon first assignment and cleanup when removed."),(0,i.kt)("h3",{id:"delegating-to-a-behavior"},"Delegating to a Behavior"),(0,i.kt)("p",null,"View subtypes need to manage behaviors directly. Kotlin does not have self types, so the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," base class cannot have a\n",(0,i.kt)("inlineCode",{parentName:"p"},"behavior<Self>")," to make this easier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyView: View() {\n// ...\n    var behavior: Behavior<MyView>? by behavior()\n}\n")),(0,i.kt)("p",null,"However, View subtypes can use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L914"},(0,i.kt)("inlineCode",{parentName:"a"},"behvaior")),"\ndelegate to guarantee proper installation and uninstallation. This delegate also ensures a Behavior's overrides for things like\n",(0,i.kt)("inlineCode",{parentName:"p"},"clipCanvasToBounds")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"mirrorWhenRightToLeft")," are not missed during installation."),(0,i.kt)("h2",{id:"specialized-behaviors"},"Specialized Behaviors"),(0,i.kt)("p",null,"As mentioned before, TabbedPanel delegates a lot to its Behavior. It actually exposes the fact that it is a container to it. This is done\nusing the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/TabbedPanel.kt#L15"},(0,i.kt)("inlineCode",{parentName:"a"},"TabbedPanelBehavior")),"\nsub interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=io.nacular.doodle.controls.panels.TabbedPanel.kt",title:"io.nacular.doodle.controls.panels.TabbedPanel.kt"},"abstract class TabbedPanelBehavior<T>: Behavior<TabbedPanel<T>> {\n    //\n    val TabbedPanel<T>.children         get() = this._children\n    var TabbedPanel<T>.insets           get() = this._insets;           set(new) { _insets           = new }\n    var TabbedPanel<T>.layout           get() = this._layout;           set(new) { _layout           = new }\n    var TabbedPanel<T>.isFocusCycleRoot get() = this._isFocusCycleRoot; set(new) { _isFocusCycleRoot = new }\n\n    inline operator fun TabbedPanel<T>.plusAssign (view: View) = children.plusAssign (view)\n    inline operator fun TabbedPanel<T>.minusAssign(view: View) = children.minusAssign(view)\n}\n\nclass TabbedPanel<T> {\n    //...\n\n    // Expose container APIs for behavior\n    internal val _children         get() = children\n    internal var _insets           get() = insets; set(new) { insets = new }\n    internal var _layout           get() = layout; set(new) { layout = new }\n    internal var _isFocusCycleRoot get() = isFocusCycleRoot; set(new) { isFocusCycleRoot = new }\n\n    // ...\n}\n")),(0,i.kt)("p",null,"Classes that implement ",(0,i.kt)("inlineCode",{parentName:"p"},"TabbedPanelBehavior")," are able to directly modify their panel's children and layout."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyTabbedPanelBehavior: TabbedPanelBehavior<Any> {\n    override fun install(view: TabbedPanel<Any>) {\n        // accessible to TabbedPanelBehavior sub classes\n        view += view {}\n        view.layout = object: Layout {\n            override fun layout(container: PositionableContainer) {}\n        }\n    }\n\n    override fun uninstall(view: TabbedPanel<Any>) {\n        view.children.clear()\n        view.layout = null\n    }\n\n    // ...\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val tabbedPanel = TabbedPanel(/*...*/).apply {\n    behavior = MyTabbedPanelBehavior()\n}\n")),(0,i.kt)("p",null,"This provides great flexibility when defining the presentation and behavior for TabbedPanels. You can do similar things with\nViews in your app."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can automatically style Views using ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/themes"},(0,i.kt)("strong",{parentName:"a"},"Themes")))))}c.isMDXComponent=!0}}]);