"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[950],{5647:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>f,frontMatter:()=>u,metadata:()=>h,toc:()=>v});var o=a(7462),i=(a(7294),a(3905)),t=(a(8209),a(1912)),r=a(1166);const l="package rendering\n\nimport io.nacular.doodle.controls.text.TextField\nimport io.nacular.doodle.drawing.Color.Companion.Darkgray\nimport io.nacular.doodle.drawing.Color.Companion.White\n\nfun example() {\n//sampleStart\n    val textField = TextField().apply {\n        backgroundColor = Darkgray\n        foregroundColor = White\n        borderVisible   = false\n    }\n//sampleEnd\n}",d="package rendering\n\nimport io.nacular.doodle.controls.buttons.Button\nimport io.nacular.doodle.core.Behavior\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.geometry.Point\n\n//sampleStart\nclass MyBehavior: Behavior<Button> {\n    override fun install              (view: Button                ) {}\n    override fun render               (view: Button, canvas: Canvas) {}\n    override fun contains             (view: Button, point : Point ) = point in view.bounds\n    override fun clipCanvasToBounds   (view: Button                ) = true\n    override fun mirrorWhenRightToLeft(view: Button                ) = view.mirrorWhenRightLeft\n    override fun uninstall            (view: Button                ) {}\n}\n//sampleEnd",s="package rendering\n\nimport io.nacular.doodle.core.Behavior\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.core.behavior\n\n//sampleStart\nclass AView: View() {\n    // ...\n    var behavior: Behavior<AView>? by behavior()\n}\n//sampleEnd",p="package rendering\n\nimport io.nacular.doodle.controls.panels.TabbedPanel\nimport io.nacular.doodle.controls.panels.TabbedPanelBehavior\nimport io.nacular.doodle.core.Layout.Companion.simpleLayout\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.utils.diff.Differences\n\n//sampleStart\nclass MyTabbedPanelBehavior: TabbedPanelBehavior<Any>() {\n    override fun install(view: TabbedPanel<Any>) {\n        // children and layout accessible to TabbedPanelBehavior subclasses\n        view        += view {}\n        view.layout  = simpleLayout {\n            // ...\n        }\n    }\n\n    override fun uninstall(view: TabbedPanel<Any>) {\n        view.children.clear()\n        view.layout = null\n    }\n\n    override fun itemsChanged(panel: TabbedPanel<Any>, differences: Differences<Any>) {\n        // ...\n    }\n\n    override fun selectionChanged(panel: TabbedPanel<Any>, new: Any?, newIndex: Int?, old: Any?, oldIndex: Int?) {\n        // ...\n    }\n}\n\nfun usage(tabbedPanel: TabbedPanel<Any>) {\n    tabbedPanel.behavior = MyTabbedPanelBehavior()\n}\n//sampleEnd",u={hide_title:!0},c="Behaviors",h={unversionedId:"rendering/behaviors",id:"rendering/behaviors",title:"Behaviors",description:"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc.",source:"@site/docs/rendering/behaviors.mdx",sourceDirName:"rendering",slug:"/rendering/behaviors",permalink:"/doodle/docs/rendering/behaviors",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"3D",permalink:"/doodle/docs/rendering/3d"},next:{title:"Positioning",permalink:"/doodle/docs/layout/overview"}},m={},v=[{value:"Deeper customization",id:"deeper-customization",level:2},{value:"Implementing a Behavior",id:"implementing-a-behavior",level:3},{value:"Delegating to a Behavior",id:"delegating-to-a-behavior",level:3},{value:"Specialized Behaviors",id:"specialized-behaviors",level:2}],b={toc:v},g="wrapper";function f(e){let{components:n,...a}=e;return(0,i.kt)(g,(0,o.Z)({},b,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"behaviors"},"Behaviors"),(0,i.kt)("p",null,"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc."),(0,i.kt)(t.O,{mdxType:"KPlayground"},l),(0,i.kt)("h2",{id:"deeper-customization"},"Deeper customization"),(0,i.kt)("p",null,"Sometimes a View needs to support more complex customization. Take a ",(0,i.kt)("a",{parentName:"p",href:"../ui_components/overview#tabbedpanel"},"TabbedPanel")," for example. The number of configurations is fairly open-ended; and the API would be needlessly complex if it tried to encompass everything."),(0,i.kt)("p",null,"This is where a ",(0,i.kt)(r.cgf,null)," comes in handy. Views can offer deep customization by delegating rendering, hit detection and anything else to Behaviors. TabbedPanel--along with ",(0,i.kt)("a",{parentName:"p",href:"../ui_components/overview#textfield"},"TextField")," and many other controls--actually does this."),(0,i.kt)("h3",{id:"implementing-a-behavior"},"Implementing a Behavior"),(0,i.kt)("p",null,"Behaviors offer a few common capabilities that help with View customization. You create one by implementing the ",(0,i.kt)(r.cgf,null)," interface, or a sub-type of it depending on the target View."),(0,i.kt)(t.O,{mdxType:"KPlayground"},d),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The methods on ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior")," are all optional")),(0,i.kt)("p",null,"Behaviors support installation and uninstallation to and from Views. This gives each Behavior a chance to configure the target View upon first assignment and cleanup when removed."),(0,i.kt)("h3",{id:"delegating-to-a-behavior"},"Delegating to a Behavior"),(0,i.kt)("p",null,"View subtypes need to manage behaviors directly. Kotlin does not have self types, so the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," base class cannot have a ",(0,i.kt)("inlineCode",{parentName:"p"},"behavior<Self>")," to make this easier."),(0,i.kt)(t.O,{mdxType:"KPlayground"},s),(0,i.kt)("p",null,"However, View subtypes can use the ",(0,i.kt)(r.mDd,null)," delegate to guarantee proper installation and uninstallation. This delegate also ensures a Behavior's overrides for things like ",(0,i.kt)("inlineCode",{parentName:"p"},"clipCanvasToBounds")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"mirrorWhenRightToLeft")," are not missed during installation."),(0,i.kt)("h2",{id:"specialized-behaviors"},"Specialized Behaviors"),(0,i.kt)("p",null,"As mentioned before, TabbedPanel delegates a lot to its Behavior. It actually exposes the fact that it is a container to it. This is done using the ",(0,i.kt)(r.OJH,null)," sub interface. Classes that implement this interface are able to directly modify their panel's ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"layout"),"."),(0,i.kt)(t.O,{mdxType:"KPlayground"},p),(0,i.kt)("p",null,"This provides great flexibility when defining the presentation and behavior for TabbedPanels. You can do similar things with Views in your app."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can automatically style Views using ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/themes"},(0,i.kt)("strong",{parentName:"a"},"Themes")))))}f.isMDXComponent=!0}}]);