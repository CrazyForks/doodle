"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[637],{4175:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=t(7462),o=(t(7294),t(3905));t(8209);const i={hide_title:!0},l="Keyboard Input",r={unversionedId:"keyboard",id:"keyboard",title:"Keyboard Input",description:"Key handling is simple with Doodle. The first thing you need to do is include the KeyboardModule",source:"@site/docs/keyboard.mdx",sourceDirName:".",slug:"/keyboard",permalink:"/doodle/docs/keyboard",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Multi-touch Support",permalink:"/doodle/docs/pointer_input/multitouch"},next:{title:"Drag & Drop",permalink:"/doodle/docs/dragdrop"}},s={},d=[{value:"Only focused Views receive key events",id:"only-focused-views-receive-key-events",level:2},{value:"Key Listeners",id:"key-listeners",level:2},{value:"Key Event",id:"key-event",level:2},{value:"Identifying Keys",id:"identifying-keys",level:2},{value:"Virtual keys and text",id:"virtual-keys-and-text",level:3},{value:"Physical keys",id:"physical-keys",level:3}],p={toc:d};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"keyboard-input"},"Keyboard Input"),(0,o.kt)("p",null,"Key handling is simple with Doodle. The first thing you need to do is include the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L59"},(0,o.kt)("inlineCode",{parentName:"a"},"KeyboardModule")),"\nwhen launching your app. The underlying framework uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"KeyboardModule")," to produce key events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyApp.kt"',title:'"MyApp.kt"'},"class MyApp(display: Display): Application {\n    // key events will fire for this app when launched with\n    // the KeyboardModule\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="main.kt"',title:'"main.kt"'},'import io.nacular.doodle.application.Modules.Companion.KeyboardModule\n\nfun main () {\n    // "full screen" launch with keyboard support\n    application(modules = listOf(KeyboardModule)) {\n        MyApp(display = instance())\n    }\n}\n')),(0,o.kt)("h2",{id:"only-focused-views-receive-key-events"},"Only focused Views receive key events"),(0,o.kt)("p",null,"A View must gain ",(0,o.kt)("inlineCode",{parentName:"p"},"focus")," in order to begin receiving key events. This ensures that only a single View\ncan receive key events at any time within the app."),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/focus/FocusManager.kt#L9"},(0,o.kt)("inlineCode",{parentName:"a"},"FocusManager")),"\nto control focus. It is included in the ",(0,o.kt)("inlineCode",{parentName:"p"},"KeyboardModule"),". Just inject it into your app to begin managing the focus."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyApp.kt"',title:'"MyApp.kt"'},"class MyApp(display: Display, focusManager: FocusManager): Application {\n    init {\n        // ...\n        focusManager.requestFocus(view)\n        // ...\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="main.kt"',title:'"main.kt"'},"fun main () {\n    application(modules = listOf(KeyboardModule)) {\n        MyApp(display = instance(), focusManager = instance())\n    }\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Some controls (i.e. TextField) also manage their focus when styled in the native theme")),(0,o.kt)("h2",{id:"key-listeners"},"Key Listeners"),(0,o.kt)("p",null,"Views are able to receive key events once the ",(0,o.kt)("inlineCode",{parentName:"p"},"KeyboardModule")," is loaded and they have ",(0,o.kt)("inlineCode",{parentName:"p"},"focus"),". You can\nthen attach a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/event/KeyListener.kt#L4"},(0,o.kt)("inlineCode",{parentName:"a"},"KeyListener")),"\nto any View and get notified."),(0,o.kt)("p",null,"Key listeners are notified whenever a key is:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Pressed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Released"))),(0,o.kt)("p",null,"You get these notifications by registering with a View's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L299"},(0,o.kt)("inlineCode",{parentName:"a"},"keyChanged")),"\nproperty."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"view.keyChanged += object: KeyListener {\n    override fun pressed(event: KeyEvent) {\n        // ..\n    }\n}\n")),(0,o.kt)("p",null,"There are also short-hand functions for cases where you only consume one of the events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"view.keyChanged += pressed { event ->\n    // ..\n}\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"KeyListener")," has no-op defaults for the 2 events, so you only need to implement the ones you need.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Notice that ",(0,o.kt)("inlineCode",{parentName:"p"},"keyChanged"),"--like other observable properties--supports many observers and enables you to add/remove\nan observer any time.")),(0,o.kt)("h2",{id:"key-event"},"Key Event"),(0,o.kt)("p",null,"The event provided to key listeners carries information about the View it originated from (",(0,o.kt)("inlineCode",{parentName:"p"},"source"),"), and\nvarious attributes about the key that was pressed or released."),(0,o.kt)("p",null,"Key events are ",(0,o.kt)("strong",{parentName:"p"},"consumable"),". This means any observer can call ",(0,o.kt)("inlineCode",{parentName:"p"},"consume()")," on the event and prevent subsequent\nlisteners from receiving it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// ...\noverride fun pressed(event: KeyEvent) {\n    // ... take action based on event\n\n    event.consume() // indicate that no other listeners should be notified\n}\n// ..\n")),(0,o.kt)("h2",{id:"identifying-keys"},"Identifying Keys"),(0,o.kt)("h3",{id:"virtual-keys-and-text"},"Virtual keys and text"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/event/KeyEvent.kt#L211"},(0,o.kt)("inlineCode",{parentName:"a"},"KeyEvent.key")),'\nis a layout independent identifier that tells you which "virtual key" was pressed or which text the key can be translated into.\nMost key handling use-cases should use this property to compare keys.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"import io.nacular.doodle.event.KeyText.Companion.Backspace\nimport io.nacular.doodle.event.KeyText.Companion.Enter\n\noverride fun pressed(event: KeyEvent) {\n    when (event.key) {\n        Enter     -> { /* ... */ }\n        Backspace -> { /* ... */ }\n        // ...\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'override fun pressed(event: KeyEvent) {\n    // this will be user-appropriate text when the key pressed is not\n    // one of the "named" keys (i.e. Tab, Shift, Enter, ...)\n    inputText += event.key.text\n}\n')),(0,o.kt)("h3",{id:"physical-keys"},"Physical keys"),(0,o.kt)("p",null,'Some applications will require the use of "physical" keys instead of virtual ones. This makes sense for games or other apps\nwhere the key position on a physical keyboard matters.'),(0,o.kt)("p",null,"This information comes from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/event/KeyEvent.kt#L211"},(0,o.kt)("inlineCode",{parentName:"a"},"KeyEvent.code")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"import io.nacular.doodle.event.KeyCode.Companion.AltLeft\nimport io.nacular.doodle.event.KeyCode.Companion.AltRight\nimport io.nacular.doodle.event.KeyCode.Companion.Backspace\n\noverride fun pressed(event: KeyEvent) {\n    when (event.code) {\n        AltLeft   -> { /* ... */ }\n        AltRight  -> { /* ... */ }\n        Backspace -> { /* ... */ }\n        // ...\n    }\n}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Physical keys do not take keyboard differences and locale into account; so avoid them if possible")))}u.isMDXComponent=!0}}]);