"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[562],{7691:(n,e,t)=>{t.d(e,{ZP:()=>d});var o=t(7462),i=(t(7294),t(3905)),a=(t(8209),t(4866),t(5162),t(1912));const l={toc:[]},r="wrapper";function d(n){let{components:e,...t}=n;return(0,i.kt)(r,(0,o.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Module Required",type:"info"},(0,i.kt)("p",null,"You must include the ",t.link," in your application in order to use these features."),(0,i.kt)(a.O,{mdxType:"KPlayground"},t.module),(0,i.kt)("p",{parentName:"admonition"},"Doodle uses opt-in modules like this to improve bundle size.")))}d.isMDXComponent=!0},1814:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>y,contentTitle:()=>w,default:()=>C,frontMatter:()=>x,metadata:()=>k,toc:()=>v});var o=t(7462),i=(t(7294),t(3905)),a=(t(8209),t(4866),t(5162),t(1912)),l=t(1166),r=t(7691);const d='package rendering\n\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.text\nimport io.nacular.doodle.geometry.Point.Companion.Origin\n\nfun text() {\n    val textView = view {\n//sampleStart\n        render = {\n            text("hello", Origin, color = Black)\n        }\n//sampleEnd\n    }\n}',s='package rendering\n\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.drawing.FontLoader\nimport kotlinx.coroutines.CoroutineScope\n\nsuspend fun fontUrl(scope: CoroutineScope, fonts: FontLoader) {\n//sampleStart\n    // Load this front from the file at "urlToFont"\n    val font: Font? = fonts("urlToFont") {\n        family = "Roboto"\n        size   = 14\n        weight = 400\n    }\n\n    //...\n//sampleEnd\n}',p='package rendering\n\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.drawing.FontLoader\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Deferred\nimport kotlinx.coroutines.async\n\nsuspend fun systemFont(scope: CoroutineScope, fonts: FontLoader) {\n//sampleStart\n    // launch a new coroutine for async font lookup\n    val font: Deferred<Font?> = scope.async {\n        fonts {\n            family = "Roboto"\n            size   = 14\n            weight = 400\n        }\n    }\n\n    //...\n\n    font.await()\n//sampleEnd\n}',c="package rendering\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.FontModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.drawing.FontLoader\nimport org.kodein.di.instance\n\nclass FontLoaderApp(display: Display, fonts: FontLoader): Application {\n    override fun shutdown() {}\n}\n\nfun main() {\n//sampleStart\n    application(modules = listOf(FontModule)) {\n        FontLoaderApp(display = instance(), fonts = instance())\n    }\n//sampleEnd\n}",u='package rendering\n\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.drawing.Color.Companion.Red\nimport io.nacular.doodle.drawing.Color.Companion.Yellow\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.drawing.width\nimport io.nacular.doodle.geometry.Point.Companion.Origin\nimport io.nacular.doodle.text.StyledText\nimport io.nacular.doodle.text.Target.Background\nimport io.nacular.doodle.text.TextDecoration\nimport io.nacular.doodle.text.TextDecoration.Line.Under\nimport io.nacular.doodle.text.TextDecoration.Style.Wavy\nimport io.nacular.doodle.text.TextDecoration.Thickness.Absolute\nimport io.nacular.doodle.text.TextSpacing\nimport io.nacular.doodle.text.invoke\n\nfun styledText(bold: Font) {\n    val textView = view {\n//sampleStart\n        val decoration = TextDecoration(lines = setOf(Under), color = Red, thickness = Absolute(1.0), style = Wavy)\n\n        val text = bold      ("Lorem Ipsum") .. " is simply " .. Yellow("dummy text", target = Background) ..\n                   StyledText(" of the printing and typesetting industry. It has been the industry\'s standard dummy text ") ..\n                   decoration("ever since the 1500s")..\n                   StyledText(", when an unknown printer took a galley of type and scrambled it to make a type specimen book.")\n\n        render = {\n            wrapped(\n                text        = text,\n                at          = Origin,\n                width       = this.width,\n                textSpacing = TextSpacing(wordSpacing = 5.0, letterSpacing = 1.0),\n                lineSpacing = 1.2f\n            )\n        }\n//sampleEnd\n    }\n}',m='package rendering\n\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.drawing.FontLoader\nimport io.nacular.doodle.scheduler.Scheduler\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.times\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\n\nsuspend fun fontTimeout(scope: CoroutineScope, fonts: FontLoader, scheduler: Scheduler) {\n    var font: Font?\n\n//sampleStart\n    // track loading job\n    val fontJob = scope.launch {\n        // assigns the font when the job resolves\n        font = fonts {\n            family = "Roboto"\n            size   = 14\n            weight = 400\n        }\n    }\n\n    // Cancel the job after 5 seconds\n    scheduler.after(5 * seconds) {\n        if (!fontJob.isCancelled) {\n            fontJob.cancel()\n        }\n    }\n//sampleEnd\n}',g='package rendering\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.drawing.TextMetrics\nimport org.kodein.di.instance\n\n//sampleStart\nclass MyApp(/*..,*/ textMetrics: TextMetrics): Application {\n    init {\n        val size = textMetrics.size("Some Text")\n    }\n\n    override fun shutdown() {\n        //...\n    }\n}\n\nfun launch() {\n    application {\n        // TextMetrics is available to inject by default\n        MyApp(textMetrics = instance())\n    }\n}\n//sampleEnd',h='package rendering\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Point\n\n//sampleStart\nclass CenteredTextView(textMetrics: TextMetrics): View() {\n    private val textSize = textMetrics.size("hello") // cache text size\n\n    override fun render(canvas: Canvas) {\n        // compute offset each time to account for changes in View\'s width/height\n        canvas.text(\n            "hello",\n            Point((width - textSize.width) / 2, (height - textSize.height) / 2),\n            Black.paint\n        )\n    }\n}\n//sampleEnd',f='package rendering\n\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.drawing.width\nimport io.nacular.doodle.geometry.Point.Companion.Origin\nimport io.nacular.doodle.text.TextSpacing\n\nfun multiLinedText() {\n    val textView = view {\n//sampleStart\n        val text = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. It has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."\n\n        render = {\n            wrapped(\n                text        = text,\n                at          = Origin,\n                width       = this.width,\n                fill        = Black.paint,\n                textSpacing = TextSpacing(wordSpacing = 5.0, letterSpacing = 1.0),\n                lineSpacing = 1.2f\n            )\n        }\n//sampleEnd\n    }\n}',x={hide_title:!0},w="Text",k={unversionedId:"rendering/text",id:"rendering/text",title:"Text",description:'All text, whether single or multi-lined, is drawn directly to a Canvas using the  and  methods. Text rendering is also explicit, requiring a position within the canvas and  used to fill it with. The following View draw\'s "hello" at 0,0 using the default font. But it is possible to change the font, letter, word and line spacing (for multi-lined text) as well.',source:"@site/docs/rendering/text.mdx",sourceDirName:"rendering",slug:"/rendering/text",permalink:"/doodle/docs/rendering/text",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/doodle/docs/rendering/overview"},next:{title:"Images",permalink:"/doodle/docs/rendering/images"}},y={},v=[{value:"Multi-lined Text",id:"multi-lined-text",level:2},{value:"Styled Text",id:"styled-text",level:2},{value:"Measuring Text",id:"measuring-text",level:2},{value:"Fonts",id:"fonts",level:2},{value:"System Fonts",id:"system-fonts",level:3},{value:"Font Files",id:"font-files",level:3},{value:"Handling Timeouts",id:"handling-timeouts",level:3}],T={toc:v},S="wrapper";function C(n){let{components:e,...t}=n;return(0,i.kt)(S,(0,o.Z)({},T,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"text"},"Text"),(0,i.kt)("p",null,"All text, whether single or multi-lined, is drawn directly to a ",(0,i.kt)("a",{parentName:"p",href:"overview#the-canvas"},"Canvas")," using the ",(0,i.kt)(l.myz,null)," and ",(0,i.kt)(l.FG_,null)," methods. Text rendering is also explicit, requiring a position within the canvas and ",(0,i.kt)(l.wGU,null),' used to fill it with. The following View draw\'s "hello" at ',(0,i.kt)("inlineCode",{parentName:"p"},"0,0")," using the default font. But it is possible to change the font, letter, word and line spacing (for multi-lined text) as well."),(0,i.kt)(a.O,{mdxType:"KPlayground"},d),(0,i.kt)("h2",{id:"multi-lined-text"},"Multi-lined Text"),(0,i.kt)("p",null,"You can draw wrapped text using ",(0,i.kt)(l.FG_,null),", which takes information about the width you'd like the text to occupy. Wrapped text also allows you to specify the line spacing, otherwise, it shares the same inputs as regular text."),(0,i.kt)(a.O,{mdxType:"KPlayground"},f),(0,i.kt)("h2",{id:"styled-text"},"Styled Text"),(0,i.kt)("p",null,"You can also draw text (single and multi-line) that is styled using the ",(0,i.kt)(l.qYr,null)," class and its DSLs."),(0,i.kt)(a.O,{mdxType:"KPlayground"},u),(0,i.kt)("h2",{id:"measuring-text"},"Measuring Text"),(0,i.kt)("p",null,"You need to measure a line of text in order to align it in any way other than top-left-aligned at ",(0,i.kt)("inlineCode",{parentName:"p"},"x,y"),". Doodle provides the ",(0,i.kt)(l._A,null)," component for this. Simply inject it into your app and Views."),(0,i.kt)(a.O,{mdxType:"KPlayground"},g),(0,i.kt)("p",null,"Here is a View that draws some centered text."),(0,i.kt)(a.O,{mdxType:"KPlayground"},h),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This View could also compute the text location on size changes.")),(0,i.kt)("h2",{id:"fonts"},"Fonts"),(0,i.kt)("p",null,"You can specify a font when drawing text or have Doodle fallback to the default. Fonts can be tricky, since they may not be present on the system at render time. This presents a race-condition for drawing text. Doodle provides ",(0,i.kt)(l.JfN,null)," to help with this."),(0,i.kt)(r.ZP,{link:(0,i.kt)(l.ZN_,null),module:c,mdxType:"ModuleRequired"}),(0,i.kt)("h3",{id:"system-fonts"},"System Fonts"),(0,i.kt)("p",null,"You can use ",(0,i.kt)(l.JfN,null)," to check the system asynchronously for a given font. This allows you to check for OS fonts, or fonts that have been loaded previously."),(0,i.kt)(a.O,{mdxType:"KPlayground"},p),(0,i.kt)("h3",{id:"font-files"},"Font Files"),(0,i.kt)("p",null,"You can also load a font from a file or url using ",(0,i.kt)(l.JfN,null),". This is similar to finding a loaded font, but it takes a font file url."),(0,i.kt)(a.O,{mdxType:"KPlayground"},s),(0,i.kt)("h3",{id:"handling-timeouts"},"Handling Timeouts"),(0,i.kt)("p",null,"The ",(0,i.kt)(l.JfN,null)," uses Kotlin's ",(0,i.kt)("inlineCode",{parentName:"p"},"suspend")," functions for its async methods. ",(0,i.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/reference/coroutines-overview.html"},"Coroutines")," are a flexible way of dealing with async/await semantics. You can support timeouts using ",(0,i.kt)("inlineCode",{parentName:"p"},"launch")," and canceling the resulting Job after some duration."),(0,i.kt)(a.O,{mdxType:"KPlayground"},m))}C.isMDXComponent=!0}}]);