"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[486],{2864:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>m,default:()=>k,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var a=t(7462),i=(t(7294),t(3905)),o=(t(8209),t(5488)),l=t(5162),r=t(4903);const s={hide_title:!0},m="Animations",p={unversionedId:"animations",id:"animations",title:"Animations",description:"Animations are key to making an app feel modern and interactive. Doodle helps you achieve this with a powerful yet simple set of APIs that let you animate a wide range of things into your app. Everything you need to build sophisticated animations is available via the Animator interface and its related components.",source:"@site/docs/animations.mdx",sourceDirName:".",slug:"/animations",permalink:"/doodle/docs/animations",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Form Controls",permalink:"/doodle/docs/ui_components/form_controls"},next:{title:"Themes",permalink:"/doodle/docs/themes"}},d={},u=[{value:"Requirements",id:"requirements",level:2},{value:"Animating A Single Value",id:"animating-a-single-value",level:2},{value:"Grouped Animations",id:"grouped-animations",level:2},{value:"Tweens",id:"tweens",level:2},{value:"Numeric Data",id:"numeric-data",level:3},{value:"Colors, Sizes, ...",id:"colors-sizes-",level:3},{value:"Easing Functions",id:"easing-functions",level:3},{value:"Key Frames",id:"key-frames",level:2},{value:"Repetition",id:"repetition",level:2},{value:"Finite Repeating",id:"finite-repeating",level:3},{value:"Loops",id:"loops",level:3},{value:"Animating Properties",id:"animating-properties",level:2},{value:"Animation Lifecycle",id:"animation-lifecycle",level:2},{value:"Animating Custom Data",id:"animating-custom-data",level:2},{value:"Numeric Conversion",id:"numeric-conversion",level:3},{value:"Non-numeric Data",id:"non-numeric-data",level:3}],c={toc:u};function k(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"animations"},"Animations"),(0,i.kt)("p",null,"Animations are key to making an app feel modern and interactive. Doodle helps you achieve this with a powerful yet simple set of APIs that let you animate a wide range of things into your app. Everything you need to build sophisticated animations is available via the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/Animator.kt#L13"},(0,i.kt)("inlineCode",{parentName:"a"},"Animator"))," interface and its related components."),(0,i.kt)(r.l,{functionName:"easingCurve",height:"400",mdxType:"DoodleApp"}),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"You will need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animation")," library to your app's dependencies."),(0,i.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=build.gradle.kts",title:"build.gradle.kts"},'// ...\n\ndependencies {\n    implementation ("io.nacular.doodle:animation:$doodleVersion")\n}\n\n// ...\n'))),(0,i.kt)(l.Z,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy",metastring:"title=build.gradle",title:"build.gradle"},'// ...\n\ndependencies {\n    implementation "io.nacular.doodle:animation:$doodle_version"\n}\n\n// ...\n')))),(0,i.kt)("p",null,"Then you will need to include the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animator")," in the list of Kodein modules your app launches with. You can do this by defining a new Module, or by including a binding for it in an existing Module you are already installing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val AnimationModule = Module(name = "AnimationModule") {\n    bindProvider<Animator> { AnimatorImpl(instance(), instance()) }\n}\n\napplication(modules = listOf(..., AnimationModule, ...)) {\n    MyApp(...)\n}\n')),(0,i.kt)("h2",{id:"animating-a-single-value"},"Animating A Single Value"),(0,i.kt)("p",null,"Doodle offers two main APIs to handle common animation use cases. The first allows you to animate a value from start to finish and handle each increment within a lambda. This is a very flexible API that can be used to accomplish most use cases."),(0,i.kt)("p",null,"These animations are of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val animate: Animator\n\nanimate(...) { value ->\n  // ...\n}\n")),(0,i.kt)("p",null,"The lambda provided to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animator")," will be evaluated every time the animating value changes. This allows the app to take action in real time."),(0,i.kt)("p",null,"Notice that this API does not make any references to ",(0,i.kt)("inlineCode",{parentName:"p"},"View"),"s or any other Doodle concept. This allows animations like these to operate on any compatible data."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The animating ball example above uses this approach to change the ball's vertical position.")),(0,i.kt)("h2",{id:"grouped-animations"},"Grouped Animations"),(0,i.kt)("p",null,"You can also animate a series of properties under a single ",(0,i.kt)("inlineCode",{parentName:"p"},"Animation")," handle. This makes it easy to track and modify the behavior of several properties at once instead of having an animation for each."),(0,i.kt)("p",null,"This code below shows how the ",(0,i.kt)("a",{parentName:"p",href:"#loops"},"looping ball")," example animates 3 different properties. The resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"animation")," will manage all the underlying items as expected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val animate: Animator\n\nval animation = animate {\n    Blue to Red using loop(tweenColor(easing, duration), type = Reverse).invoke {\n        circle.backgroundColor = it\n    }\n\n    200.0 to 100.0 using loop(tweenDouble(easing, duration), type = Reverse).invoke {\n        circle.y = it\n    }\n\n    Size(100) to Size(75) using loop(tweenSize(easing, duration), type = Reverse).invoke {\n        circle.size = it\n    }\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There is no requirement that the animations define within the block have the same duration or are even of the same type.")),(0,i.kt)("h2",{id:"tweens"},"Tweens"),(0,i.kt)("p",null,"Tween animations let you interpolate data between two values using a curve (or easing function). These animations work with data that can be converted to numeric (",(0,i.kt)("inlineCode",{parentName:"p"},"Double"),") representation. Doodle has several ",(0,i.kt)("inlineCode",{parentName:"p"},"tween*")," functions, all with the form:"),(0,i.kt)("h3",{id:"numeric-data"},"Numeric Data"),(0,i.kt)("p",null,"Doodle supports tweens with any ",(0,i.kt)("inlineCode",{parentName:"p"},"Number")," type and includes APIs for working with ",(0,i.kt)("inlineCode",{parentName:"p"},"Float"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Double")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Int"),". This shows how you can animate a ",(0,i.kt)("inlineCode",{parentName:"p"},"Float")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"100")," using a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/transition/Easing.kt#L42"},(0,i.kt)("inlineCode",{parentName:"a"},"linear"))," tween that lasts 250ms, and starts immediately (no ",(0,i.kt)("inlineCode",{parentName:"p"},"delay"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"animate(0f to 100f, using = tweenFloat(linear, 250 * milliseconds)) {\n    println(it)\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"tweenDouble")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tweenInt")," to work with other number types.")),(0,i.kt)("h3",{id:"colors-sizes-"},"Colors, Sizes, ..."),(0,i.kt)("p",null,"Doodle also allows you to tween non-numeric data, as long as it can be converted to a numeric representation. This works really well for things like ",(0,i.kt)("inlineCode",{parentName:"p"},"Position"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Size"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Rectangle"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Color"),". All of these data types are supported by built-in tween variants. So you can do any of the following."),(0,i.kt)(r.l,{functionName:"animatedProperties",args:'["size"]',height:"400",mdxType:"DoodleApp"}),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"point",label:"Point",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Point"',title:'"Animate','Point"':!0},"animate(Origin to Point(100, 200), using = tweenPoint(...)) {\n    // ...\n}\n"))),(0,i.kt)(l.Z,{value:"size",label:"Size",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Size"',title:'"Animate','Size"':!0},"animate(Size(100) to Size(100, 200), using = tweenSize(...)) {\n    // ...\n}\n"))),(0,i.kt)(l.Z,{value:"rect",label:"Rectangle",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Rectangle"',title:'"Animate','Rectangle"':!0},"animate(Rectangle() to Rectangle(100, 200), using = tweenRectangle(...)) {\n    // ...\n}\n"))),(0,i.kt)(l.Z,{value:"color",label:"Color",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Color"',title:'"Animate','Color"':!0},"animate(Red to Green, using = tweenColor(...)) {\n    // ...\n}\n")))),(0,i.kt)("p",null,"This is an example of a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/buttons/Switch.kt#L5"},(0,i.kt)("inlineCode",{parentName:"a"},"Switch"))," with a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"Behavior")," that draws a heart and animates between selection state using an arbitrary easing function."),(0,i.kt)(r.l,{functionName:"heartSwitch",height:"300",mdxType:"DoodleApp"}),(0,i.kt)("div",{style:{fontSize:"10px",textAlign:"right",color:"gray"}},"Inspired by ",(0,i.kt)("a",{style:{color:"gray"},href:"https://dribbble.com/shots/8306407-I-heart-toggle",title:"I heart toggle"},"Tore Bernhoft")),(0,i.kt)("h3",{id:"easing-functions"},"Easing Functions"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tween*")," functions work with one or more ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/transition/Easing.kt#L14"},(0,i.kt)("inlineCode",{parentName:"a"},"EasingFunction")),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," of (",(0,i.kt)("a",{parentName:"p",href:"https://nacular.github.io/measured"},(0,i.kt)("inlineCode",{parentName:"a"},"Measure<Time>")),"), and an optional ",(0,i.kt)("inlineCode",{parentName:"p"},"delay")," (also a ",(0,i.kt)("inlineCode",{parentName:"p"},"Measure<Time>"),"). ",(0,i.kt)("inlineCode",{parentName:"p"},"EasingFunction")," is simply a function that takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"Float")," between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and returns another ",(0,i.kt)("inlineCode",{parentName:"p"},"Float")," scaled to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". Doodle includes many common easing functions already (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"easeInQuad"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"easeInOutQuint"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"easeOutElastic"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"easeInOutBounce")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/transition/Easing.kt"},"others"),")."),(0,i.kt)("p",null,"But it is just as simple to create a custom one as well. Simply provide a function of the following form that maps inputs between ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to a normalized output in (or slightly outside) that range."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=CustomEasing",title:"CustomEasing"},"(Float) -> Float\n")),(0,i.kt)("h2",{id:"key-frames"},"Key Frames"),(0,i.kt)("p",null,"Doodle also supports key-frame animations. These let you specify intermediate values the animated property will have at specific times, and the easing curves between these values. The following example animates the ball's y position so it takes 1/3 of the total duration to get from one level to the next. But it provides 3 separate curves to animate between each level."),(0,i.kt)(r.l,{functionName:"keyFrames",height:"400",mdxType:"DoodleApp"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val duration = 1 * seconds\n\nanimation = animate(0.0 to graph.height, keyFramesDouble(duration) {\n//  value               | at what time      | easing to next value\n//  --------------------------------------------------------------\n    0.0                at duration * 0   then easeInElastic\n    graph.height * 1/3 at duration * 1/3 then linear\n    graph.height * 2/3 at duration * 2/3 then easeOutBack\n}) {\n    // ...\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The default ease from the ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," to the first value in the key frames is ",(0,i.kt)("inlineCode",{parentName:"p"},"linear"),". The example above overrides this by specifying the first key frame as the ",(0,i.kt)("inlineCode",{parentName:"p"},"start"),", then it is able to specify how to ease from the beginning.")),(0,i.kt)("p",null,"Key-frame animations are defined using the ",(0,i.kt)("inlineCode",{parentName:"p"},"keyFrame*")," functions that work on data that can be mapped to numeric values like ",(0,i.kt)("inlineCode",{parentName:"p"},"tween*"),". Similarly, Doodle provides built-in support for the same set of data types for here as it does for ",(0,i.kt)("inlineCode",{parentName:"p"},"tween*"),"."),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"point",label:"Point",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Point"',title:'"Animate','Point"':!0},"animate(Origin to Point(100, 200), using = keyFramesPoint(...)) {\n   // key frame definition\n}) {\n   // animation block\n}\n"))),(0,i.kt)(l.Z,{value:"size",label:"Size",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Size"',title:'"Animate','Size"':!0},"animate(Size(100) to Size(100, 200), using = keyFramesSize(...)) {\n    // key frame definition\n}) {\n    // animation block\n}\n"))),(0,i.kt)(l.Z,{value:"rect",label:"Rectangle",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Rectangle"',title:'"Animate','Rectangle"':!0},"animate(Rectangle() to Rectangle(100, 200), using = keyFramesRectangle(...) {\n   // key frame definition\n}) {\n   // animation block\n}\n"))),(0,i.kt)(l.Z,{value:"color",label:"Color",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Animate Color"',title:'"Animate','Color"':!0},"animate(Red to Green, using = keyFramesColor(...) {\n    // key frame definition\n}) {\n    // animation block\n}\n")))),(0,i.kt)("h2",{id:"repetition"},"Repetition"),(0,i.kt)("h3",{id:"finite-repeating"},"Finite Repeating"),(0,i.kt)("p",null,"You can repeat animations like ",(0,i.kt)("inlineCode",{parentName:"p"},"tween*")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"keyFrame*")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"repeat")," wrapper. This wrapper takes an ",(0,i.kt)("inlineCode",{parentName:"p"},"animationPlan"),", the number of ",(0,i.kt)("inlineCode",{parentName:"p"},"times")," it should be repeated and the type of repetition (",(0,i.kt)("inlineCode",{parentName:"p"},"Restart")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Reverse"),")."),(0,i.kt)(r.l,{functionName:"animationRepeating",height:"300",mdxType:"DoodleApp"}),(0,i.kt)("p",null,"For example, you can repeat a linear tween from ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"animate(0f to 1f, repeat(tweenFloat(easing, duration), times = 2, type = Reverse)) {\n    // ...\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," determines what the animation will do at each repetition boundary. ",(0,i.kt)("inlineCode",{parentName:"p"},"Restart")," will run the animation again as though it were just beginning. While ",(0,i.kt)("inlineCode",{parentName:"p"},"Reverse")," will run the animation from its end to start."),(0,i.kt)("h3",{id:"loops"},"Loops"),(0,i.kt)("p",null,"Sometimes you'd like to run an animation that repeats indefinitely. The ",(0,i.kt)("inlineCode",{parentName:"p"},"loop")," function makes this easy. It is just like ",(0,i.kt)("inlineCode",{parentName:"p"},"repeat"),", except it takes no ",(0,i.kt)("inlineCode",{parentName:"p"},"times"),' value and continues "forever". The following app runs a looping animation (that reverses) to change the ball\'s ',(0,i.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"color"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," based on an easing."),(0,i.kt)(r.l,{functionName:"animatedProperties",args:'["bounce"]',height:"350",mdxType:"DoodleApp"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"animate(200.0 to 100.0, loop(tweenDouble(easing, duration), type = Reverse)) {\n    // ...\n}\n")),(0,i.kt)("h2",{id:"animating-properties"},"Animating Properties"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Animator")," interface can also be used to create animatable properties for a class. These properties will then animate from their current value to a new one whenever they are changed. This is done as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyView(animate: Animator): View() {\n    // ..\n\n    var color by animate(default = Red, tweenColor(linear, 250 * milliseconds)) { _,_ ->\n        rerenderNow()\n    }\n\n    // ..\n}\n")),(0,i.kt)("p",null,"Doodle manages the animation lifecycle of these properties for you and optionally notifies you of changes throughout the animation. This makes it easy to react as the value changes. An existing animation will be canceled if a new value is set for the property, and the property will begin animating towards that new value."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"An interruption in the animation will reset the elapsed time. So setting ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," in the above example to something new while it was in the middle of animating would require 250ms to get from the intermediate value to the new value specified.")),(0,i.kt)("h2",{id:"animation-lifecycle"},"Animation Lifecycle"),(0,i.kt)("p",null,"All animations result in an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/Animator.kt#L9"},(0,i.kt)("inlineCode",{parentName:"a"},"Animation<T>"))," instance being created to track their lifecycle. This type implements ",(0,i.kt)("inlineCode",{parentName:"p"},"Completable"),", which means it notifies listeners when it is ",(0,i.kt)("inlineCode",{parentName:"p"},"completed")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"canceled"),". You can register to be notified of these state changes as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"animation.completed += { /*...*/ }\nanimation.canceled  += { /*...*/ }\n")),(0,i.kt)("p",null,"Doodle provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoCanceling")," property delegate to automatically cancel ",(0,i.kt)("inlineCode",{parentName:"p"},"Completable")," instances when a new value is assigned to them. This is useful for animations as well."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// using autoCanceling ensures existing animation is canceled when a new one is assigned\nvar someAnimation: Animation<Float>? by autoCanceling()\n\nsomeAnimation = animate(0f to 1f, using tween(linear, 1 * seconds)) {\n    // ...\n}\n")),(0,i.kt)("h2",{id:"animating-custom-data"},"Animating Custom Data"),(0,i.kt)("p",null,"It is possible to animate custom data in addition to the built-in types that Doodle offers. The simplest case is when you have some data that can be represented numerically. These data types can be used directly in tween, keyFrame and other existing animation types as long as you provide logic to convert them to and from their numeric form."),(0,i.kt)("h3",{id:"numeric-conversion"},"Numeric Conversion"),(0,i.kt)("p",null,"You can animate data that is convertible to and from numbers using either ",(0,i.kt)("inlineCode",{parentName:"p"},"SingleDataConverter<T>")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"MultiDataConverter<T>"),". These support single and multi-dimensional data respectively. These converters define how a type is mapped to and from a ",(0,i.kt)("inlineCode",{parentName:"p"},"Double")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Array<Double>"),"."),(0,i.kt)("mermaid",{value:"sequenceDiagram\n    autonumber\n    participant a as App\n    participant f as Framework\n    participant c as *DataConverter\n\n    a->>f : animate(...)\n    loop\n        f->>c : serialize(...)\n        f->>f : animate numeric value\n        f->>c : deserialize(...)\n        f->>a : animation(...) { value -> ... }\n    end"}),(0,i.kt)("p",null,"Simply implement a custom converter and provide it to one of the generic animation builders as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"object CustomDataConverter: SingleDataConverter<Foo> {\n    public val zero: Foo = ...\n    public fun serialize  (value: Foo   ): Double { ... }\n    public fun deserialize(value: Double): Foo    { ... }\n}\n\nanimate(Foo1 to Foo2, tween(CustomDataConverter, linear, 1 * seconds)) { value: Foo ->\n}\n")),(0,i.kt)("p",null,"This is actually how Doodle supports animation of ",(0,i.kt)("inlineCode",{parentName:"p"},"Rectangle")," and other types. It defines custom converters like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Defines Rectangle as convertible to 4 Doubles for animation.\npublic val Rectangle.Companion.animationConverter: MultiDataConverter<Rectangle> get() = object: MultiDataConverter<Rectangle> {\n    override val size get()                        = 4\n    override val zero                              = Empty\n    override fun serialize  (value: Rectangle    ) = arrayOf(value.x, value.y, value.width, value.height)\n    override fun deserialize(value: Array<Double>) = Rectangle(value[0], value[1], max(0.0, value[2]), max(0.0, value[3]))\n}\n")),(0,i.kt)("h3",{id:"non-numeric-data"},"Non-numeric Data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Animator")," interface actually works with a lower-level definition of an animation than those used for numeric data. This interface is the entry point for truly custom data that cannot be converted to numeric form. Doodle currently does not have any use cases like this, but the API is there in case applications have a need."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Animation/src/commonMain/kotlin/io/nacular/doodle/animation/Animations.kt#L19"},(0,i.kt)("inlineCode",{parentName:"a"},"AnimationPlan<T>"))," interface is defined as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface AnimationPlan<T> {\n    // Returns the value of the animation after [elapsedTime].\n    public fun value(elapsedTime: Measure<Time>): T\n\n    // Returns the velocity of the animation at the [elapsedTime].\n    public fun velocity(elapsedTime: Measure<Time>): Velocity<T>\n\n    // Returns `true` IFF the animation if completed after [elapsedTime].\n    public fun finished(elapsedTime: Measure<Time>): Boolean\n}\n")))}k.isMDXComponent=!0}}]);