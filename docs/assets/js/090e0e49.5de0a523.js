"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[325],{7825:function(e,a,t){t.r(a),t.d(a,{assets:function(){return p},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return c}});var n=t(3117),i=t(102),o=(t(7294),t(3905)),r=(t(9877),t(8215),t(3138)),s=["components"],l={hide_title:!0},d="Transformations",m={unversionedId:"transforms",id:"transforms",title:"Transformations",description:"Views are bound to a 2D grid when it comes to their layout. This grid only allows a View to have an x and y position, and an area within the plane.",source:"@site/docs/transforms.mdx",sourceDirName:".",slug:"/transforms",permalink:"/doodle/docs/transforms",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Layout",permalink:"/doodle/docs/positioning"},next:{title:"Overview",permalink:"/doodle/docs/rendering/overview"}},p={},c=[{value:"Affine Transforms",id:"affine-transforms",level:2},{value:"Identity Transform",id:"identity-transform",level:2},{value:"Cameras",id:"cameras",level:2},{value:"Sharing Cameras",id:"sharing-cameras",level:2},{value:"2-Sided Views",id:"2-sided-views",level:2}],h={toc:c};function f(e){var a=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},h,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transformations"},"Transformations"),(0,o.kt)("p",null,"Views are bound to a 2D grid when it comes to their layout. This grid only allows a View to have an ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," position, and an area within the plane.\nHowever, every View can also be transformed using ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Affine_transformation"},"Affine Transformations")," (and perspective)\nthat alter the way they are displayed. These transforms allow you to change a View's position and shape in the full 3D volume."),(0,o.kt)(r.B,{functionName:"playingCard",height:"500",mdxType:"DoodleCodeBlock"}),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use the right slider to change the camera distance from the View, which changes the intensity of the perspective used to render it."))),(0,o.kt)("h2",{id:"affine-transforms"},"Affine Transforms"),(0,o.kt)("p",null,"Each View has a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L244"},(0,o.kt)("inlineCode",{parentName:"a"},"transform")),"\nproperty that takes an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/AffineTransform.kt#L27"},(0,o.kt)("inlineCode",{parentName:"a"},"AffineTransform")),".\nThis property can be set at any time to change how the View is rendered. Changes to this property will update the View on screen if it is visible.\nTransformations are very lightweight and do not require re-rendering or trigger layouts when modified. This makes them a great option for animations\nand other UI treatments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"import io.nacular.doodle.drawing.AffineTransform.Companion.Identity\nimport io.nacular.measured.units.Angle.Companion.degrees\nimport io.nacular.measured.units.times\n\nview.transform = Identity\nview.transform = Identity.rotateX(around = view.center, by = 45 * degrees)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AffineTransform"),"s can also be combined to produce more complex operations. The end result is a single transform that will behave as though\neach operation were done in succession."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"transform.\n    rotateY(by = xRotation, around = center).\n    rotateX(by = yRotation, around = center).\n    //...\n    flipHorizontally()\n")),(0,o.kt)("h2",{id:"identity-transform"},"Identity Transform"),(0,o.kt)("p",null,"Views default to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/AffineTransform.kt#L519"},(0,o.kt)("inlineCode",{parentName:"a"},"Identity")),"\ntransform, which does not change the View at all. Set this to effectively clear a View's transform."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Scale view by 2 in x and y\nview.transform = Identity.scale(2, 2)\n\n// ...\n\n// Remove all transform effects\nview.transform = Identity\n")),(0,o.kt)("h2",{id:"cameras"},"Cameras"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AffineTransform"),"s warp an object while preserving collinearity (points on a line remain on a line) and distance ratios. This means they are insufficient\nto produce perspective. Perspective requires a transformation that preserves collinearity, but not distance ratios. Doodle supports this via\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Camera.kt#L10"},(0,o.kt)("inlineCode",{parentName:"a"},"Camera")),"s.\nEach Camera has a ",(0,o.kt)("inlineCode",{parentName:"p"},"position")," (relative to a View's parent) and ",(0,o.kt)("inlineCode",{parentName:"p"},"distance"),", which define where vanishing points will be and the intensity their parallel\nwarping effect. Each View has a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L252"},(0,o.kt)("inlineCode",{parentName:"a"},"camera")),"\nthat will combine with its ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," to produce a final perspective transformation."),(0,o.kt)(r.B,{functionName:"camera",height:"500",mdxType:"DoodleCodeBlock"}),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Drag the camera to change its position. Resize it to change its distance from the plane."))),(0,o.kt)("h2",{id:"sharing-cameras"},"Sharing Cameras"),(0,o.kt)("p",null,"Views can share a single Camera, which allows them to share the same perspective when they have the same parent (or are all top-level).\nThe result, as you can see below is the effect of the Views sharing the same 3D space."),(0,o.kt)(r.B,{functionName:"camera2",height:"500",mdxType:"DoodleCodeBlock"}),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"A View's Camera position is relative to its parent, so shared Cameras only produce the single 3D space for Views with the ",(0,o.kt)("strong",{parentName:"p"},"same parent"),"."))),(0,o.kt)("h2",{id:"2-sided-views"},"2-Sided Views"),(0,o.kt)("p",null,"Views render onto an infinitely flat plane that is similar to a sheet of glass. This means you see the contents of a View that is flipped or rotated as\nthough you are looking through the back of that pane of glass. You can have Views with 2-sides of course, as you see with the playing cards.\nBut that requires logic to decide when the View's back is visible. The playing card does this by recomputing its face direction whenever its\n",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"camera")," change, and repainting if needed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Example of how one might determine whether a View is facing the user.\n// This takes the cross product of 2 vectors on the View's surface and\n// applies its transformation and camera.\n\nval points = (camera.projection * transform).invoke(bounds.points.take(3))\nfaceUp = (points[1] - points[0] cross points[2] - points[1]).z > 0.0\n")))}f.isMDXComponent=!0}}]);