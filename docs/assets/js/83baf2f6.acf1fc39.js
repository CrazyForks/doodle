"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[5208],{148:(e,n,o)=>{o.d(n,{SI:()=>s,cp:()=>c});var i=o(7624),t=o(4552),a=o(7793),r=o(6236),l=o(7492);const s=[];function d(e){const n={admonition:"admonition",p:"p",strong:"strong",...(0,t.M)(),...e.components};return(0,i.jsxs)(n.admonition,{title:"Library Required",type:"info",children:[(0,i.jsxs)("p",{children:["You will need to add the ",e.link," library to your app's dependencies."]}),(0,i.jsxs)(a.c,{groupId:"language",children:[(0,i.jsxs)(r.c,{value:"Kotlin",children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"build.gradle.kts"})}),(0,i.jsx)(l.A,{children:e.kotlin})]}),(0,i.jsxs)(r.c,{value:"Groovy",children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"build.gradle"})}),(0,i.jsx)(l.A,{children:e.groovy})]})]})]})}function c(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},9712:(e,n,o)=>{o.d(n,{SI:()=>r,cp:()=>s});var i=o(7624),t=o(4552),a=(o(7793),o(6236),o(7492));const r=[];function l(e){const n={admonition:"admonition",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(n.admonition,{title:"Module Required",type:"info",children:[(0,i.jsxs)("p",{children:["You must include the ",e.link," in your application in order to use these features."]}),(0,i.jsx)(a.A,{children:e.module}),(0,i.jsx)(n.p,{children:"Doodle uses opt-in modules like this to improve bundle size."})]})}function s(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},3840:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>ro,contentTitle:()=>to,default:()=>co,frontMatter:()=>io,metadata:()=>ao,toc:()=>lo});var i=o(7624),t=o(4552),a=o(7793),r=o(6236),l=o(148),s=o(5272),d=o(7492),c=o(3220),p=o(9504),m=o(7112);const u='package label\n\nimport io.nacular.doodle.controls.text.Label\n\n//sampleStart\nval label = Label("Some Text")\n//sampleEnd',h='package label\n\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.drawing.Color.Companion.Red\nimport io.nacular.doodle.drawing.Color.Companion.Yellow\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.text.Target.Background\nimport io.nacular.doodle.text.TextDecoration\nimport io.nacular.doodle.text.TextDecoration.Line.Under\nimport io.nacular.doodle.text.TextDecoration.Style.Wavy\nimport io.nacular.doodle.text.invoke\nimport io.nacular.doodle.utils.Dimension.Height\nimport io.nacular.doodle.utils.TextAlignment.Start\n\nfun example(bold: Font) {\n//sampleStart\n    val styledLabel = Label(\n        bold("Lorem Ipsum").." is simply "..Yellow("dummy text", Background)..\n        " of the printing and typesetting industry. It has been the industry\'s standard dummy text "..\n        TextDecoration(setOf(Under), Red, Wavy) ("ever since the 1500s")..\n        ", when an unknown printer took a galley of type and scrambled it to make a type specimen book."\n    ).apply {\n        width         = 250.0\n        fitText       = setOf(Height)\n        wrapsWords    = true\n        lineSpacing   = 1f\n        textAlignment = Start\n        letterSpacing = 0.0\n    }\n//sampleEnd\n}';function x(e){const n={admonition:"admonition",p:"p",...(0,t.M)(),...e.components};return c.m||v("api",!1),c.m.BasicLabelBehaviorModule||v("api.BasicLabelBehaviorModule",!0),c.m.LabelBehavior||v("api.LabelBehavior",!0),c.m.StyledText||v("api.StyledText",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Holds and displays text with support for basic styling."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"label",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:u}),(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Requires a ",(0,i.jsx)(c.m.LabelBehavior,{})," to render. This example uses ",(0,i.jsx)(c.m.BasicLabelBehaviorModule,{})]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Labels can also have ",(0,i.jsx)(c.m.StyledText,{}),", word wrapping, vertical and horizontal alignment, and change how their letters and lines are spaced."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"styledLabel",height:"370"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:h}),(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Requires a ",(0,i.jsx)(c.m.LabelBehavior,{})," to render. This example uses ",(0,i.jsx)(c.m.BasicLabelBehaviorModule,{})]})})]})]})]})}function g(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}function v(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const j="package textfield\n\nimport io.nacular.doodle.controls.text.TextField\nimport io.nacular.doodle.utils.Dimension.Height\nimport io.nacular.doodle.utils.Dimension.Width\n\n//sampleStart\nval textField = TextField().apply {\n    mask          = '*'\n    fitText       = setOf(Width, Height)\n    borderVisible = false\n//  purpose       = Email\n}\n//sampleEnd",y="package io.nacular.doodle.docs.utils\n\nimport io.nacular.doodle.animation.Animation\nimport io.nacular.doodle.animation.Animator\nimport io.nacular.doodle.animation.invoke\nimport io.nacular.doodle.animation.transition.easeInOutCubic\nimport io.nacular.doodle.animation.tweenFloat\nimport io.nacular.doodle.controls.text.TextField\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.Color.Companion.Red\nimport io.nacular.doodle.drawing.Color.Companion.Transparent\nimport io.nacular.doodle.drawing.Stroke\nimport io.nacular.doodle.drawing.lerp\nimport io.nacular.doodle.drawing.lighter\nimport io.nacular.doodle.drawing.opacity\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.theme.native.NativeTextFieldBehaviorModifier\nimport io.nacular.doodle.utils.autoCanceling\nimport io.nacular.doodle.utils.observable\nimport io.nacular.measured.units.Time.Companion.milliseconds\nimport io.nacular.measured.units.times\n\n//sampleStart\nclass CustomTextFieldBehavior(textField: TextField, animate: Animator): NativeTextFieldBehaviorModifier {\n    var valid by observable(true) { _, _ ->\n        textField.rerender()\n    }\n\n    private var animation: Animation<Float>? by autoCanceling()\n\n    private var animationProgress by observable(1f) { _, _ ->\n        textField.rerenderNow()\n    }\n\n    init {\n        textField.acceptsThemes   = false\n        textField.borderVisible   = false\n        textField.backgroundColor = Transparent\n        textField.focusChanged += { _,_,_ ->\n            animation = animate(0f to 1f, tweenFloat(easeInOutCubic, 250 * milliseconds)) { animationProgress = it }\n        }\n    }\n\n    override fun install(view: TextField) {\n        super.install(view)\n\n        view.enabledChanged += { _,_,_ ->\n            view.rerender()\n        }\n    }\n\n    override fun renderBackground(textField: TextField, canvas: Canvas) {\n        val startX     = if (textField.hasFocus) textField.width / 2 * (1 - animationProgress) else 0.0\n        val endX       = if (textField.hasFocus) textField.width / 2 * (1 + animationProgress) else textField.width\n        val color      = (if (valid) Black else Red).let { when {\n            !textField.enabled -> it.lighter()\n            else               -> it\n        } }\n        val thickColor = when {\n            !textField.hasFocus -> lerp(color, color opacity 0f, animationProgress)\n            else                -> color\n        }\n\n        canvas.line(start = Point(startX, textField.height - 2.0), end = Point(endX,            textField.height - 2.0), Stroke(thickness = 1.0, fill = thickColor.paint))\n        canvas.line(start = Point(0.0,    textField.height - 1.0), end = Point(textField.width, textField.height - 1.0), Stroke(thickness = 1.0, fill = color.paint     ))\n    }\n}\n//sampleEnd",f="package textfield\n\nimport io.nacular.doodle.animation.Animator\nimport io.nacular.doodle.controls.text.TextField\nimport io.nacular.doodle.docs.utils.CustomTextFieldBehavior\nimport io.nacular.doodle.theme.native.NativeTextFieldStyler\n\nfun create(animate: Animator, textFieldStyler: NativeTextFieldStyler) {\n//sampleStart\n//  Animator              can be injected into app when Animator module is used\n//  NativeTextFieldStyler can be injected into app when nativeTextFieldBehavior module is used\n    val textField = TextField().apply {\n        acceptsThemes = false\n        behavior = textFieldStyler(this, CustomTextFieldBehavior(this, animate))\n    }\n//sampleEnd\n}";function b(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||S("api",!1),c.m.NativeTextFieldBehaviorModifier||S("api.NativeTextFieldBehaviorModifier",!0),c.m.NativeTextFieldBehaviorModule||S("api.NativeTextFieldBehaviorModule",!0),c.m.NativeTextFieldStyler||S("api.NativeTextFieldStyler",!0),c.m.TextFieldBehavior||S("api.TextFieldBehavior",!0),c.m.textField||S("api.textField",!1),c.m.textField.Purpose||S("api.textField.Purpose",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Provides simple (un-styled) text input that is highly customizable. You can specify each field's ",(0,i.jsx)(c.m.textField.Purpose,{})," as well to enable platform-specific treatment for things like email, numbers, telephone, etc.."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"textField",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:j}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Requires a ",(0,i.jsx)(c.m.TextFieldBehavior,{}),". The module ",(0,i.jsx)(n.code,{children:"nativeTextFieldBehavior()"})," provides one."]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["TextFields can also be customized using ",(0,i.jsx)(c.m.NativeTextFieldBehaviorModifier,{}),". See the code sample for how this is achieved."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"styledTextField",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:y}),(0,i.jsx)(d.A,{children:f}),(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.NativeTextFieldStyler,{})," is available whenever the ",(0,i.jsx)(c.m.NativeTextFieldBehaviorModule,{})," module is included."]}),(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/doodle/docs/animations",children:"Animations"})," for more details on how to incorporate them into your app."]})]})]})]})]})}function w(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(b,{...e})}):b(e)}function S(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const T='package controls\n\nimport io.nacular.doodle.controls.buttons.PushButton\n\n//sampleStart\nval button = PushButton("BUTTON").apply {\n    fired += {\n        println("Hey! That Hurt!")\n    }\n}\n//sampleEnd';function B(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||k("api",!1),c.m.BasicTheme||k("api.BasicTheme",!0),c.m.Behavior||k("api.Behavior",!0),c.m.CheckBox||k("api.CheckBox",!0),c.m.NativeTheme||k("api.NativeTheme",!0),c.m.RadioButton||k("api.RadioButton",!0),c.m.ToggleButton||k("api.ToggleButton",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A component that triggers an action when pressed; usually with the pointer or keyboard."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"button",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:T}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["There are several types of buttons available, including ",(0,i.jsx)(c.m.ToggleButton,{}),", ",(0,i.jsx)(c.m.CheckBox,{}),", ",(0,i.jsx)(c.m.RadioButton,{}),", etc.. Rendering requires a ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<Button>"}),". ",(0,i.jsx)(c.m.NativeTheme,{})," and ",(0,i.jsx)(c.m.BasicTheme,{})," provide versions."]})})]})]})]})}function M(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(B,{...e})}):B(e)}function k(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const C='package controls\n\nimport io.nacular.doodle.controls.buttons.ToggleButton\n\n//sampleStart\nval toggleButton = ToggleButton("BUTTON").apply {\n    selectedChanged += { _,_,selected ->\n        println("Selected: $selected")\n    }\n}\n//sampleEnd';function P(e){const n={p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A button component that toggles between 2 states when pressed; usually with the pointer or keyboard."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"toggleButton",height:"200"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:C})})]})]})}function z(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(P,{...e})}):P(e)}const L='package controls\n\nimport io.nacular.doodle.controls.buttons.CheckBox\n\n//sampleStart\nval checkbox = CheckBox("CHECKBOX").apply {\n    selectedChanged += { _,_,new ->\n        println("Checkbox selected: $new, indeterminate: $indeterminate")\n    }\n}\n//sampleEnd';function F(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||V("api",!1),c.m.BasicTheme||V("api.BasicTheme",!0),c.m.Behavior||V("api.Behavior",!0),c.m.CheckBox||V("api.CheckBox",!0),c.m.NativeTheme||V("api.NativeTheme",!0),c.m.RadioButton||V("api.RadioButton",!0),c.m.ToggleButton||V("api.ToggleButton",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A toggle component that represents an on/off state and is triggered when pressed; usually with the pointer or keyboard."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"checkbox",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:L}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["There are several types of buttons available, including ",(0,i.jsx)(c.m.ToggleButton,{}),", ",(0,i.jsx)(c.m.CheckBox,{}),", ",(0,i.jsx)(c.m.RadioButton,{}),", etc.. Rendering requires a ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<Button>"}),". ",(0,i.jsx)(c.m.NativeTheme,{})," and ",(0,i.jsx)(c.m.BasicTheme,{})," provide versions."]})})]})]})]})}function D(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(F,{...e})}):F(e)}function V(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const I='package controls\n\nimport io.nacular.doodle.controls.buttons.RadioButton\n\n//sampleStart\nval radioButton = RadioButton("RADIO BUTTON").apply {\n    selectedChanged += { _,_,new ->\n        println("Radio selected: $new")\n    }\n}\n//sampleEnd';function E(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||R("api",!1),c.m.BasicTheme||R("api.BasicTheme",!0),c.m.Behavior||R("api.Behavior",!0),c.m.ButtonGroup||R("api.ButtonGroup",!0),c.m.CheckBox||R("api.CheckBox",!0),c.m.NativeTheme||R("api.NativeTheme",!0),c.m.RadioButton||R("api.RadioButton",!0),c.m.ToggleButton||R("api.ToggleButton",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A toggle component that represents an on/off state and is triggered when pressed; usually with the pointer or keyboard. RadioButtons are typically used in lists with ",(0,i.jsx)(c.m.ButtonGroup,{})," to represent the selection of a single item from this list."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"radioButton",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:I}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["There are several types of buttons available, including ",(0,i.jsx)(c.m.ToggleButton,{}),", ",(0,i.jsx)(c.m.CheckBox,{}),", ",(0,i.jsx)(c.m.RadioButton,{}),", etc.. Rendering requires a ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<Button>"}),". ",(0,i.jsx)(c.m.NativeTheme,{})," and ",(0,i.jsx)(c.m.BasicTheme,{})," provide versions."]})})]})]})]})}function A(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(E,{...e})}):E(e)}function R(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const N='package controls\n\nimport io.nacular.doodle.controls.buttons.Switch\nimport io.nacular.doodle.geometry.Size\n\n//sampleStart\nval switch = Switch().apply {\n    size             = Size(50, 30)\n    selectedChanged += { _,_,new ->\n        println("Switch selected: $new")\n    }\n}\n//sampleEnd';function O(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||_("api",!1),c.m.BasicSwitchBehavior||_("api.BasicSwitchBehavior",!0),c.m.BasicTheme||_("api.BasicTheme",!0),c.m.Behavior||_("api.Behavior",!0),c.m.ToggleButton||_("api.ToggleButton",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A toggle component that triggers an action when selected; usually with the pointer or keyboard."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"switchExample",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:N}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Switches are just ",(0,i.jsx)(c.m.ToggleButton,{}),"s and can therefore be styled using any ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<Button>"}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one via ",(0,i.jsx)(c.m.BasicSwitchBehavior,{}),"."]})})]})]})]})}function U(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(O,{...e})}):O(e)}function _(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const q='package hyperlink\n\nimport io.nacular.doodle.controls.buttons.HyperLink\n\n//sampleStart\nval hyperLink = HyperLink(url = "www.google.com", text = "Google")\n//sampleEnd',H='package hyperlink\n\nimport io.nacular.doodle.controls.buttons.Button\nimport io.nacular.doodle.controls.buttons.HyperLink\nimport io.nacular.doodle.controls.theme.CommonTextButtonBehavior\nimport io.nacular.doodle.core.Behavior\nimport io.nacular.doodle.core.Icon\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.text.TextDecoration.Companion.UnderLine\nimport io.nacular.doodle.text.invoke\nimport io.nacular.doodle.theme.native.NativeHyperLinkStyler\nimport kotlin.math.max\n\nfun example(linkStyler: NativeHyperLinkStyler, textMetrics: TextMetrics, searchIcon: Icon<Button>) {\n//sampleStart\n    val styledHyperLink = HyperLink(url = "https://www.google.com", text = "Google Search").apply {\n        val textSize = textMetrics.size(text, font)\n        val iconSize = searchIcon.size(this)\n\n        this.icon            = searchIcon\n        this.size            = Size(textSize.width + iconTextSpacing + iconSize.width, max(textSize.height, iconSize.height))\n        this.font            = font\n        this.acceptsThemes   = false\n        this.behavior        = linkStyler(this, object: CommonTextButtonBehavior<HyperLink>(textMetrics) {\n            override fun render(view: HyperLink, canvas: Canvas) {\n                // Custom text styling, with underline on pointer-over\n                val styledText = Color.Red { font(text) }.let {\n                    if (view.model.pointerOver) UnderLine { it } else it\n                }\n\n                canvas.text(styledText, at = textPosition(view))\n\n                searchIcon.render(view, canvas, iconPosition(view, text, searchIcon))\n            }\n        }) as Behavior<Button>\n    }\n//sampleEnd\n}';function W(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Y("api",!1),c.m.Behavior||Y("api.Behavior",!0),c.m.NativeHyperLinkBehaviorModule||Y("api.NativeHyperLinkBehaviorModule",!0),c.m.NativeHyperLinkStyler||Y("api.NativeHyperLinkStyler",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Control that opens a url when triggered."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"link",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:q}),(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Requires a ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<Button>"})," to render. This example uses ",(0,i.jsx)(c.m.NativeHyperLinkBehaviorModule,{})]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"HyperLink"}),"s are also fully customizable with ",(0,i.jsx)(c.m.NativeHyperLinkStyler,{}),". This lets you use an arbitrary behavior, while retaining the core functionality to open urls. See the code sample for how this is achieved."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"styledLink",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:H}),(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.NativeHyperLinkStyler,{})," is available whenever the ",(0,i.jsx)(c.m.NativeHyperLinkBehaviorModule,{})," module is included."]})})]})]})]})}function G(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(W,{...e})}):W(e)}function Y(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const $='package controls\n\nimport io.nacular.doodle.controls.files.FileSelector\nimport io.nacular.doodle.geometry.Size\n\n//sampleStart\nval fileSelector = FileSelector().apply {\n    size         = Size(200, 40)\n    filesLoaded += { _,_,new ->\n        println("files loaded: $new")\n    }\n}\n//sampleEnd',K='package controls\n\nimport io.nacular.doodle.controls.files.FileSelector\nimport io.nacular.doodle.controls.files.FileSelectorBehavior\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.Stroke\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.system.Cursor.Companion.Pointer\n\n//sampleStart\nclass CustomFileSelectorBehavior(textMetrics: TextMetrics): FileSelectorBehavior {\n    private val prompt          = "Choose File"\n    private val defaultFileText = "No file chosen"\n    private val textSize        = textMetrics.size(prompt)\n    private val inset           = 10\n    private val lineOffset      = textSize.width + 2 * inset\n\n    private val strokeColor     = Lightgray\n    private val strokeThickness = 2.0\n    private val stroke          = Stroke(strokeColor, strokeThickness)\n\n    override fun install(view: FileSelector) {\n        super.install(view)\n\n        view.cursor          = Pointer\n        view.filesLoaded    += { _,_,_ -> view.rerender() }\n        view.enabledChanged += { _,_,_ -> view.rerender() }\n    }\n\n    override fun render(view: FileSelector, canvas: Canvas) {\n        val textFill = if (view.enabled) Black.paint else strokeColor.paint\n\n        canvas.rect(view.bounds.atOrigin.inset(strokeThickness / 2), radius = 5.0, stroke)\n\n        if (view.width > lineOffset + strokeThickness) {\n            canvas.line(Point(lineOffset, strokeThickness), Point(lineOffset, view.height - strokeThickness), stroke)\n        }\n\n        val files = view.files.joinToString(", ") { it.name }.takeIf { it.isNotBlank() } ?: defaultFileText\n        val textY = (view.height - textSize.height) / 2\n\n        canvas.text(prompt, view.font, Point(inset,                                textY), textFill)\n        canvas.text(files,  view.font, Point(lineOffset + strokeThickness + inset, textY), textFill)\n    }\n}\n//sampleEnd',X="package controls\n\nimport io.nacular.doodle.controls.files.FileSelector\nimport io.nacular.doodle.controls.files.FileSelectorBehavior\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.Stroke\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.system.Cursor.Companion.Pointer\nimport io.nacular.doodle.theme.native.NativeFileSelectorStyler\n\nfun usage(textMetrics: TextMetrics, fileSelectorStyler: NativeFileSelectorStyler) {\n//sampleStart\n    val fileSelector = FileSelector().apply {\n        acceptsThemes = false\n        behavior      = fileSelectorStyler(this, CustomFileSelectorBehavior(textMetrics))\n    }\n//sampleEnd\n}\n";function J(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Q("api",!1),c.m.Behavior||Q("api.Behavior",!0),c.m.LocalFile||Q("api.LocalFile",!0),c.m.NativeFileSelectorModule||Q("api.NativeFileSelectorModule",!0),c.m.NativeFileSelectorStyler||Q("api.NativeFileSelectorStyler",!0),c.m.NativeTheme||Q("api.NativeTheme",!0),c.m.fileSelector||Q("api.fileSelector",!1),c.m.fileSelector.FilesLoaded||Q("api.fileSelector.FilesLoaded",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A toggle component that triggers an action when selected; usually with the pointer or keyboard. The files (a list of ",(0,i.jsx)(c.m.LocalFile,{}),"s that) selected by the user are available as an event via the ",(0,i.jsx)(c.m.fileSelector.FilesLoaded,{})," property."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"fileSelector",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:$}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["FileSelectors can be styled using any ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<FileSelector>"}),". ",(0,i.jsx)(c.m.NativeTheme,{})," provides one via ",(0,i.jsx)(c.m.NativeFileSelectorModule,{}),"."]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["FileSelectors can also be customized using ",(0,i.jsx)(c.m.NativeFileSelectorStyler,{}),". See the code sample for how this is achieved."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"styledFileSelector",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:K}),(0,i.jsx)(d.A,{children:X}),(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.NativeFileSelectorStyler,{})," is available whenever the ",(0,i.jsx)(c.m.NativeFileSelectorModule,{})," module is included."]})})]})]})]})}function Z(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(J,{...e})}):J(e)}function Q(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const ee="package controls\n\nimport io.nacular.doodle.controls.Photo\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.image.Image\n\nfun usage(image: Image) {\n//sampleStart\n    val photo = Photo(image).apply {\n        size = Size(100, 200)\n    }\n//sampleEnd\n}";function ne(e){const n={a:"a",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Images in Doodle are not ",(0,i.jsx)(n.a,{href:"../views",children:"Views"}),", they are more like text, in that you render them directly to a Canvas. The Photo component provides a simple wrapper around an Image."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"photo",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:ee})})]})]})}function oe(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ne,{...e})}):ne(e)}const ie="package controls\n\nimport io.nacular.doodle.animation.Animator\nimport io.nacular.doodle.animation.RepetitionType.Reverse\nimport io.nacular.doodle.animation.invoke\nimport io.nacular.doodle.animation.loop\nimport io.nacular.doodle.animation.transition.easeInOutCubic\nimport io.nacular.doodle.animation.tweenColor\nimport io.nacular.doodle.controls.LazyPhoto\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.lighter\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.image.Image\nimport io.nacular.doodle.utils.observable\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.times\nimport kotlinx.coroutines.Deferred\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\n\n@OptIn(ExperimentalCoroutinesApi::class)\nclass LazyPhoto(image: Deferred<Image>, animate: Animator) {\n//sampleStart\n    val photo: LazyPhoto = LazyPhoto(\n        pendingImage = image,\n        initialized  = { animation.cancel() }\n    ) {\n        // custom rendering during load\n        rect(Rectangle(size = size), fill = color.paint)\n    }\n\n    val baseColor = Lightgray\n    var color       by observable(baseColor) { _,_ -> photo.rerenderNow() }\n    val animation = animate(\n        baseColor to baseColor.lighter(0.5f),\n        loop(tweenColor(easeInOutCubic, 1.5 * seconds), type = Reverse)\n    ) {\n        // Animate color used for loading state\n        color = it\n    }\n//sampleEnd\n}";function te(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||re("api",!1),c.m.Animator||re("api.Animator",!0),c.m.Image||re("api.Image",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{title:"Experimental",type:"caution",children:(0,i.jsx)(n.p,{children:"This control relies on experimental Coroutine features."})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"LazyPhoto"})," is like ",(0,i.jsx)(n.a,{href:"#photo",children:"Photo"}),", except it takes a ",(0,i.jsx)(n.a,{href:"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/",children:"Deferred"}),(0,i.jsx)(n.code,{children:"<Image>"})," instead of an ",(0,i.jsx)(c.m.Image,{}),". This allows apps to map loading images to Views even if those images are still pending. LazyPhoto also offers full customization of how it renders during the loading state. You provide a lambda that is called for all rendering while it is pending."]}),"\n",(0,i.jsxs)(n.p,{children:["You can go a step further and animate the loading state using ",(0,i.jsx)(c.m.Animator,{})," and re-rendering the ",(0,i.jsx)(n.code,{children:"LazyPhoto"})," when new frames are needed to be displayed. This app shows how you might achieve this."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"lazyPhoto",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:ie})})]})]})}function ae(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(te,{...e})}):te(e)}function re(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const le="package controls\n\nimport io.nacular.doodle.controls.ProgressBar\nimport io.nacular.doodle.utils.Orientation.Vertical\n\n//sampleStart\n// creates bars with ranges form 0 - 100\n\nval horizontal = ProgressBar(                      )\nval vertical   = ProgressBar(orientation = Vertical)\n//sampleEnd",se='package controls\n\nimport io.nacular.doodle.controls.ProgressIndicator\nimport io.nacular.doodle.docs.utils.BlueColor\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.LinearGradientPaint\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.PathMetrics\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.geometry.Point.Companion.Origin\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.geometry.path\nimport io.nacular.doodle.theme.PathProgressIndicatorBehavior\n\nfun usage(pathMetrics: PathMetrics) {\n//sampleStart\n    val pathProgress = object: ProgressIndicator() {\n        init {\n            size = Size(200, 100)\n            progress = 0.25\n            behavior = PathProgressIndicatorBehavior(\n                pathMetrics,          // injected\n                path                = path("M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80")!!,\n                foreground          = LinearGradientPaint(Black, BlueColor, Origin, Point(width, 0.0)),\n                foregroundThickness = 5.0,\n                background          = Lightgray.paint,\n                backgroundThickness = 5.0\n            )\n        }\n    }\n//sampleEnd\n}',de='package controls\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.controls.ProgressIndicator\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.docs.apps.CircularProgressApp\nimport io.nacular.doodle.docs.utils.BlueColor\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicCircularProgressIndicatorBehavior\nimport org.kodein.di.instance\n\n//sampleStart\nfun main() {\n    // include basicCircularProgressIndicatorBehavior\n    application(modules = listOf(\n        basicCircularProgressIndicatorBehavior(foreground = BlueColor.paint, thickness = 5.0)\n    )) {\n        CircularProgressApp(display = instance(), themeManager = instance(), theme = instance())\n    }\n}\n\nclass CircularProgressApp(display: Display, themeManager: ThemeManager, theme: Theme): Application {\n    init {\n        // Theme with basicCircularProgressIndicatorBehavior\n        themeManager.selected = theme\n\n        val circularProgressIndicator = object: ProgressIndicator() {\n            init {\n                size               = Size(100, 100)\n                progress           = 0.25\n                accessibilityLabel = "circular progress widget"\n            }\n        }\n\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd';function ce(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||me("api",!1),c.m.BasicCircularProgressIndicatorBehavior||me("api.BasicCircularProgressIndicatorBehavior",!0),c.m.BasicTheme||me("api.BasicTheme",!0),c.m.Behavior||me("api.Behavior",!0),c.m.ConfinedValueModel||me("api.ConfinedValueModel",!0),c.m.PathProgressIndicatorBehavior||me("api.PathProgressIndicatorBehavior",!0),c.m.ProgressIndicator||me("api.ProgressIndicator",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Represents a value within a specified range that usually indicates progress toward some goal. It provides notifications when its value or range changes. Specify a range by passing a ",(0,i.jsx)(n.code,{children:"ClosedRange"})," or ",(0,i.jsx)(c.m.ConfinedValueModel,{})," in the constructor."]}),"\n",(0,i.jsxs)(n.p,{children:["ProgressBar is a specialization of ",(0,i.jsx)(c.m.ProgressIndicator,{}),", which should be used for more generalized progress display (i.e. circular)"]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Horizontal",children:(0,i.jsx)(s.u,{functionName:"progress",height:"200"})}),(0,i.jsx)(r.c,{value:"Vertical",children:(0,i.jsx)(s.u,{functionName:"progress",args:'["vertical"]',height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:le}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(c.m.Behavior,{}),(0,i.jsx)(n.code,{children:"<ProgressBar>"}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:["ProgressIndicators can also take different shapes. Here's an example that uses ",(0,i.jsx)(c.m.BasicCircularProgressIndicatorBehavior,{}),"."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"circularProgress",height:"200"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:de})})]}),"\n",(0,i.jsxs)(n.p,{children:["This one draws a path using ",(0,i.jsx)(c.m.PathProgressIndicatorBehavior,{}),"."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"pathProgress",height:"200"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:se})})]})]})}function pe(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ce,{...e})}):ce(e)}function me(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const ue="package controls\n\nimport io.nacular.doodle.controls.range.Slider\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.utils.Orientation.Vertical\n\n//sampleStart\nval horizontalSlider = Slider(0.0 .. 1.0).apply {\n    size        = Size(200, 15)\n//  ticks       = 10\n//  snapToTicks = true\n}\n\nval verticalSlider = Slider(0 .. 100, orientation = Vertical).apply {\n    size = Size(15, 200)\n}\n//sampleEnd";var he=o(9656);function xe(e){const n={a:"a",admonition:"admonition",code:"code",h4:"h4",p:"p",...(0,t.M)(),...e.components};return c.m||ve("api",!1),c.m.BasicTheme||ve("api.BasicTheme",!0),c.m.ConfinedValueModel||ve("api.ConfinedValueModel",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Slider"})," holds a strongly typed value within a specified range and allow the user to change the value. It provides notifications when\nits value or range changes. Specify a range by passing a ",(0,i.jsx)(n.code,{children:"ClosedRange"})," or ",(0,i.jsx)(c.m.ConfinedValueModel,{})," in the constructor."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also confine the values to a predefined set within the range by specifying the ",(0,i.jsx)(n.code,{children:"ticks"})," count and setting\n",(0,i.jsx)(n.code,{children:"snapToTicks"})," to ",(0,i.jsx)(n.code,{children:"true"}),". This will pin the slider values to an evenly spaced set of points along its range."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Horizontal",children:(0,i.jsx)(s.u,{functionName:"slider",height:"250"})}),(0,i.jsx)(r.c,{value:"Vertical",children:(0,i.jsx)(s.u,{functionName:"slider",args:'["vertical"]',height:"250"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:ue}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(n.code,{children:"Behavior<Slider>"}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["All Sliders (including ",(0,i.jsx)(n.a,{href:"overview#circularslider",children:"CircularSlider"}),", ",(0,i.jsx)(n.a,{href:"overview#rangeslider",children:"RangeSlider"}),", and ",(0,i.jsx)(n.a,{href:"overview#circularrangeslider",children:"CircularRangeSlider"}),") are strongly typed. Which means you can create ",(0,i.jsx)(n.code,{children:"Integer"})," sliders that snap to each integer value. Therefore, it is not necessary to specify ",(0,i.jsx)(n.code,{children:"ticks"})," and ",(0,i.jsx)(n.code,{children:"snapToTicks"})," to ensure they only land on whole numbers."]}),(0,i.jsx)(n.p,{children:"It is possible to still restrict their range further using these properties however. Then, they will only take on integer values that match the tick count."})]}),"\n",(0,i.jsx)(n.h4,{id:"non-linearity",children:"Non-linearity"}),"\n",(0,i.jsx)(n.p,{children:"Sliders are linear by default, which means a change in their position translates to a linear change in their value. There are cases however, when it makes sense to have a slider's value change in a non-linear way. You can do this by providing a function that maps values between the slider's input and output spaces. These values are all within the [0-1] domain, and work very similarly to easing functions used for animations. The big difference is they have two forms: f(x) and f^-1(x)."}),"\n",(0,i.jsx)(n.p,{children:"This examples shows two sliders that control the rectangle's opacity. One uses a logarithmic function while the other is the typical linear slider. Notice the difference in how quickly the opacity changes in the beginning when adjusting the logarithmic slider."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Non-linearity",children:(0,i.jsx)(s.u,{functionName:"nonLinearSlider",height:"350"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:he.c})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"All slider types support custom functions to make them non-linear."})})]})}function ge(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(xe,{...e})}):xe(e)}function ve(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const je="package controls\n\nimport io.nacular.doodle.controls.range.CircularSlider\nimport io.nacular.doodle.geometry.Size\n\n//sampleStart\nval circularSlider = CircularSlider(1 .. 100).apply {\n    size = Size(100, 100)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n//sampleEnd";function ye(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||be("api",!1),c.m.BasicTheme||be("api.BasicTheme",!0),c.m.ConfinedValueModel||be("api.ConfinedValueModel",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CircularSlider"})," behaves just like a regular ",(0,i.jsx)(n.a,{href:"#slider",children:"Slider"}),", except it is meant to be a ring. This means it provides notifications when its value or range changes and these can be specified by passing a ",(0,i.jsx)(n.code,{children:"ClosedRange"})," or ",(0,i.jsx)(c.m.ConfinedValueModel,{})," in the constructor."]}),"\n",(0,i.jsxs)(n.p,{children:["Like Slider, you can also confine the values to a predefined set within the range by specifying the ",(0,i.jsx)(n.code,{children:"ticks"})," count and setting\n",(0,i.jsx)(n.code,{children:"snapToTicks"})," to ",(0,i.jsx)(n.code,{children:"true"}),". This will pin the slider values to an evenly spaced set of points along its range."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"slider",args:'["circular"]',height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:je}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(n.code,{children:"Behavior<CircularSlider>"}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]})]})}function fe(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ye,{...e})}):ye(e)}function be(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const we="package controls\n\nimport io.nacular.doodle.controls.range.RangeSlider\nimport io.nacular.doodle.geometry.Size\n\n//sampleStart\nval rangeSlider = RangeSlider(value = 10 .. 30, limits = 1 .. 100).apply {\n    size = Size(100, 100)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n//sampleEnd";function Se(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Be("api",!1),c.m.BasicTheme||Be("api.BasicTheme",!0),c.m.ConfinedRangeModel||Be("api.ConfinedRangeModel",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"RangeSlider"})," holds a strongly typed inner range within a specified outer range and allow the user to change these values. It provides notifications when its either changes. Specify the ranges by passing ",(0,i.jsx)(n.code,{children:"ClosedRange"}),"s or a ",(0,i.jsx)(c.m.ConfinedRangeModel,{})," in the constructor."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also confine the inner range using a ",(0,i.jsx)(n.code,{children:"ticks"})," count and setting ",(0,i.jsx)(n.code,{children:"snapToTicks"})," to ",(0,i.jsx)(n.code,{children:"true"}),", just like regular ranges. This will pin the values of the inner range to an evenly spaced set of points along its range."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"rangeSlider",height:"250"})}),(0,i.jsx)(r.c,{value:"Vertical",children:(0,i.jsx)(s.u,{functionName:"rangeSlider",args:'["vertical"]',height:"250"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:we}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(n.code,{children:"Behavior<RangeSlider>"}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]})]})}function Te(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Se,{...e})}):Se(e)}function Be(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Me="package controls\n\nimport io.nacular.doodle.controls.range.CircularRangeSlider\nimport io.nacular.doodle.geometry.Size\n\n//sampleStart\nval circularRangeSlider = CircularRangeSlider(value = 10 .. 30, range = 1 .. 100).apply {\n    size = Size(100, 100)\n\n//  ticks       = 10\n//  snapToTicks = true\n}\n//sampleEnd";function ke(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Pe("api",!1),c.m.BasicTheme||Pe("api.BasicTheme",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"CircularRangeSlider"})," behaves just like a regular ",(0,i.jsx)(n.a,{href:"#rangeslider",children:"RangeSlider"}),", except it is meant to be a ring."]}),"\n",(0,i.jsxs)(n.p,{children:["Like ",(0,i.jsx)(n.code,{children:"RangeSlider"}),", you can also confine the values to a predefined set within the range by specifying the ",(0,i.jsx)(n.code,{children:"ticks"})," count and setting ",(0,i.jsx)(n.code,{children:"snapToTicks"})," to ",(0,i.jsx)(n.code,{children:"true"}),". This will pin the slider values to an evenly spaced set of points along its range."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"rangeSlider",args:'["circular"]',height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Me}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(n.code,{children:"Behavior<CircularRangeSlider>"}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]})]})}function Ce(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ke,{...e})}):ke(e)}function Pe(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const ze='package controls\n\nimport io.nacular.doodle.controls.spinner.SpinButton\n\n//sampleStart\nval spinButton1 = SpinButton(1..9 step 2)\nval spinButton2 = SpinButton(listOf("Monday", "Tuesday", "Wednesday"))\n//sampleEnd',Le='package controls\n\nimport io.nacular.doodle.controls.ItemVisualizer\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.spinner.MutableListSpinButtonModel\nimport io.nacular.doodle.controls.spinner.MutableSpinButton\nimport io.nacular.doodle.controls.spinner.SpinButton\nimport io.nacular.doodle.controls.spinner.spinButtonEditor\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.drawing.Color.Companion.Transparent\nimport io.nacular.doodle.event.PointerListener.Companion.pressed\nimport io.nacular.doodle.focus.FocusManager\nimport io.nacular.doodle.layout.constraints.fill\nimport io.nacular.doodle.system.Cursor.Companion.Text\nimport io.nacular.doodle.theme.basic.spinner.SpinButtonTextEditOperation\nimport io.nacular.doodle.utils.ToStringIntEncoder\n\nfun mutableSpinButton(focusManager: FocusManager) {\n    // custom visualizer to initiate edit on pointer press\n    val itemVisualizer: ItemVisualizer<Int, SpinButton<Int, *>> = itemVisualizer { item, previous, button ->\n        when (previous) {\n            is Label -> previous.also { it.text = "$item" }\n            else     -> Label("$item").apply {\n                this.font       = previous?.font\n                cursor          = Text\n                fitText         = emptySet()\n                foregroundColor = previous?.foregroundColor\n                backgroundColor = previous?.backgroundColor ?: Transparent\n\n                // Begin edit on pointer press\n                pointerFilter += pressed { event ->\n                    (button as MutableSpinButton).startEditing()\n                    event.consume()\n                }\n            }\n        }\n    }\n\n    //sampleStart\n    MutableSpinButton(\n        MutableListSpinButtonModel((1 .. 9).toMutableList()),\n        itemVisualizer\n    ).apply {\n        cellAlignment = fill\n        editor        = spinButtonEditor { spinButton, value, current ->\n            SpinButtonTextEditOperation(\n                focusManager,\n                ToStringIntEncoder,\n                spinButton,\n                value,\n                current\n            )\n        }\n    }\n//sampleEnd\n }';function Fe(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Ve("api",!1),c.m.BasicTheme||Ve("api.BasicTheme",!0),c.m.MutableSelectBoxBehavior||Ve("api.MutableSelectBoxBehavior",!0),c.m.MutableSpinButton||Ve("api.MutableSpinButton",!0),c.m.MutableSpinButtonModel||Ve("api.MutableSpinButtonModel",!0),c.m.SpinButtonBehavior||Ve("api.SpinButtonBehavior",!0),c.m.SpinButtonModel||Ve("api.SpinButtonModel",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SpinButton"})," is a list data structure analog that lets you represent a list of items where only one is visible (selected) at a time. They work well when the list of options is relatively small, or the input is an incremental value: like the number of items to purchase."]}),"\n",(0,i.jsxs)(n.p,{children:["SpinButton takes a ",(0,i.jsx)(c.m.SpinButtonModel,{})," that works like an ",(0,i.jsx)(n.code,{children:"Iterator"}),". This allows them to represent an open-ended list of items that do not need to be loaded up front."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"spinButton",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:ze}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(c.m.SpinButtonBehavior,{}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.MutableSpinButton,{})," is an editable version of the ",(0,i.jsx)(n.code,{children:"SpinButton"})," that takes a ",(0,i.jsx)(c.m.MutableSpinButtonModel,{})," and lets you change it's values directly, or by updating it's model."]}),"\n",(0,i.jsx)(n.p,{children:"You can edit the items in this example by simply clicking on the box and hitting enter when done. Clicking away will cancel the edit."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"mutableSpinButton",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Le}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(c.m.MutableSelectBoxBehavior,{}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]})]})}function De(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Fe,{...e})}):Fe(e)}function Ve(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Ie='package controls\n\nimport io.nacular.doodle.controls.dropdown.SelectBox\n\n//sampleStart\nval selectBox1 = SelectBox(1..9 step 2)\nval selectBox2 = SelectBox(listOf("Left", "Center", "Right"))\n//sampleEnd',Ee='package controls\n\nimport io.nacular.doodle.controls.IndexedItem\nimport io.nacular.doodle.controls.ItemVisualizer\nimport io.nacular.doodle.controls.SimpleMutableListModel\nimport io.nacular.doodle.controls.dropdown.MutableSelectBox\nimport io.nacular.doodle.controls.dropdown.selectBoxEditor\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.drawing.Color.Companion.Transparent\nimport io.nacular.doodle.event.PointerListener.Companion.pressed\nimport io.nacular.doodle.focus.FocusManager\nimport io.nacular.doodle.layout.constraints.fill\nimport io.nacular.doodle.system.Cursor.Companion.Text\nimport io.nacular.doodle.theme.basic.dropdown.SelectBoxTextEditOperation\nimport io.nacular.doodle.utils.PassThroughEncoder\n\nprivate class MutableSelectBox(focusManager: FocusManager) {\n    // custom visualizer to initiate edit on pointer press\n    val boxItemVisualizer: ItemVisualizer<String, IndexedItem> = itemVisualizer { item, previous, _ ->\n        when (previous) {\n            is Label -> previous.also { it.text = item }\n            else     -> Label(item).apply {\n                this.font       = previous?.font\n                cursor          = Text\n                fitText         = emptySet()\n                foregroundColor = previous?.foregroundColor\n                backgroundColor = previous?.backgroundColor ?: Transparent\n\n                // Begin edit on pointer press\n                pointerFilter += pressed { event ->\n                    mutableSelectBox.startEditing()\n                    event.consume()\n                }\n            }\n        }\n    }\n\n    //sampleStart\n    val mutableSelectBox = MutableSelectBox(\n        SimpleMutableListModel(listOf("Left", "Center", "Right")),\n        boxItemVisualizer\n    ).apply {\n        boxCellAlignment = fill\n        editor           = selectBoxEditor { selectBox, value, current ->\n            SelectBoxTextEditOperation(\n                focusManager,\n                PassThroughEncoder(),\n                selectBox,\n                value,\n                current\n            )\n        }\n    }\n//sampleEnd\n }';function Ae(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Ne("api",!1),c.m.BasicTheme||Ne("api.BasicTheme",!0),c.m.ListModel||Ne("api.ListModel",!0),c.m.MutableListModel||Ne("api.MutableListModel",!0),c.m.MutableSelectBox||Ne("api.MutableSelectBox",!0),c.m.MutableSelectBoxBehavior||Ne("api.MutableSelectBoxBehavior",!0),c.m.SelectBoxBehavior||Ne("api.SelectBoxBehavior",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SelectBox"})," is a list data structure similar to ",(0,i.jsx)(n.a,{href:"#spinbutton",children:"SpinButton"}),". It also lets you represent a list of choices where only one is visible (selected) at a time.But unlike a ",(0,i.jsx)(n.code,{children:"SpinButton"}),", the choices are shown in a list when the control is activated. They work well when the list of options is relatively small."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SelectBox"})," takes a ",(0,i.jsx)(c.m.ListModel,{})," that works like an ",(0,i.jsx)(n.code,{children:"Iterator"}),". This allows it to represent an open-ended list of items that do not need to be loaded up front."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"selectBox",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Ie}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(c.m.SelectBoxBehavior,{}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.MutableSelectBox,{})," is an editable version of the ",(0,i.jsx)(n.code,{children:"SelectBox"})," that takes a ",(0,i.jsx)(c.m.MutableListModel,{})," and lets you change it's values directly, or by updating it's model."]}),"\n",(0,i.jsx)(n.p,{children:"You can edit the items in this example by simply clicking on the box and hitting enter when done. Clicking away will cancel the edit."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"mutableSelectBox",height:"200"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Ee}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Rendering requires a ",(0,i.jsx)(c.m.MutableSelectBoxBehavior,{}),". ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]})]})}function Re(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Ae,{...e})}):Ae(e)}function Ne(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Oe="package controls\n\nimport io.nacular.doodle.controls.StarRater\nimport io.nacular.doodle.geometry.Rectangle\n\n//sampleStart\nval stars = StarRater(displayRounded = 0f, max = 5, /*pathMetrics = pathMetrics*/).apply {\n    bounds            = Rectangle(200, 50)\n    minSpacing        = 15.0\n    innerRadiusRatio  = 0.6f\n    starPointRounding = 0.25f\n}\n//sampleEnd";function Ue(e){const n={p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"A highly customizable control that displays a rating between [0, n] using stars. It also lets the user change the underlying value."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"starRater",height:"220"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Oe})})]})]})}function _e(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Ue,{...e})}):Ue(e)}const qe='package controls\n\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.SimpleMutableListModel\nimport io.nacular.doodle.controls.StringVisualizer\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.list.DynamicList\nimport io.nacular.doodle.docs.utils.Country\nimport io.nacular.doodle.docs.utils.CountryView\nimport io.nacular.doodle.image.ImageLoader\nimport io.nacular.doodle.layout.constraints.fill\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\n\nfun example(scope: CoroutineScope, imageLoader: ImageLoader) {\n//sampleStart\n    val model = SimpleMutableListModel<Country>()\n\n    scope.launch {\n        listOf(\n            "United Kingdom" to "images/197374.svg",\n            "United States"  to "images/197484.svg",\n            "France"         to "images/197560.svg",\n            "Germany"        to "images/197571.svg",\n            "Spain"          to "images/197593.svg",\n            // ...\n        ).sortedBy { it.first }.map { (name, path) ->\n            imageLoader.load(path)?.let { image ->\n                model.add(Country(name, image))\n            }\n        }\n    }\n\n    val stringVisualizer = StringVisualizer()\n\n    val list = DynamicList(\n        model,\n        selectionModel = MultiSelectionModel(),\n        itemVisualizer = itemVisualizer { item, previous, context ->\n            when (previous) {\n                is CountryView -> previous.apply {\n                    update(\n                        index    = context.index,\n                        country  = item,\n                        selected = context.selected\n                    )\n                }\n                else           -> CountryView(\n                    stringVisualizer,\n                    index    = context.index,\n                    country  = item,\n                    selected = context.selected\n                )\n            }\n        }\n    ).apply {\n        cellAlignment = fill\n    }\n//sampleEnd\n}',He="package controls\n\nimport io.nacular.doodle.controls.DynamicListModel\nimport io.nacular.doodle.controls.IndexedItem\nimport io.nacular.doodle.controls.ItemVisualizer\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.list.VerticalDynamicList\nimport io.nacular.doodle.docs.utils.Country\nimport io.nacular.doodle.docs.utils.CountryView\nimport io.nacular.doodle.layout.constraints.fill\n\nfun verticalList(model: DynamicListModel<Country>, stringVisualizer: ItemVisualizer<String, IndexedItem>) {\n//sampleStart\n    val list = VerticalDynamicList(\n        model,\n        selectionModel = MultiSelectionModel(),\n        itemVisualizer = itemVisualizer { item, previous, context ->\n            when (previous) {\n                is CountryView -> previous.apply {\n                    update(\n                        index    = context.index,\n                        country  = item,\n                        selected = context.selected\n                    )\n                }\n                else           -> CountryView(\n                    stringVisualizer,\n                    index    = context.index,\n                    country  = item,\n                    selected = context.selected\n                )\n            }\n        }\n    ).apply {\n        cellAlignment = fill\n    }\n//sampleEnd\n}",We="package controls\n\nimport io.nacular.doodle.controls.DynamicListModel\nimport io.nacular.doodle.controls.IndexedItem\nimport io.nacular.doodle.controls.ItemVisualizer\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.list.HorizontalDynamicList\nimport io.nacular.doodle.docs.utils.Country\nimport io.nacular.doodle.docs.utils.CountryView\nimport io.nacular.doodle.layout.constraints.fill\n\nfun horizontalList(model: DynamicListModel<Country>, stringVisualizer: ItemVisualizer<String, IndexedItem>) {\n//sampleStart\n    val list = HorizontalDynamicList(\n        model,\n        selectionModel = MultiSelectionModel(),\n        itemVisualizer = itemVisualizer { item, previous, context ->\n            when (previous) {\n                is CountryView -> previous.apply {\n                    update(\n                        index    = context.index,\n                        country  = item,\n                        selected = context.selected\n                    )\n                }\n                else           -> CountryView(\n                    stringVisualizer,\n                    index    = context.index,\n                    country  = item,\n                    selected = context.selected\n                )\n            }\n        }\n    ).apply {\n        cellAlignment = fill\n    }\n//sampleEnd\n}";function Ge(e){const n={admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,t.M)(),...e.components};return c.m||$e("api",!1),c.m.BasicListBehavior||$e("api.BasicListBehavior",!0),c.m.BasicTheme||$e("api.BasicTheme",!0),c.m.DynamicList||$e("api.DynamicList",!0),c.m.ItemVisualizer||$e("api.ItemVisualizer",!0),c.m.ListBehavior||$e("api.ListBehavior",!0),c.m.ListModel||$e("api.ListModel",!0),c.m.MutableList||$e("api.MutableList",!0),c.m.Theme||$e("api.Theme",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"List"})," control is a visual analog to the list data structure. It is a ",(0,i.jsx)(n.strong,{children:"readonly"}),", ordered, generic collection of items with random\naccess to its members."]}),"\n",(0,i.jsxs)(n.p,{children:["You need 2 things to create a List: a ",(0,i.jsx)(c.m.ListModel,{}),", and ",(0,i.jsx)(c.m.ItemVisualizer,{}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You also need to provide a ",(0,i.jsx)(c.m.ListBehavior,{})," or use a ",(0,i.jsx)(c.m.Theme,{})," with one since ",(0,i.jsx)(n.code,{children:"List"})," delegates rendering. The examples below use ",(0,i.jsx)(c.m.BasicListBehavior,{})," which is also available as a module within ",(0,i.jsx)(c.m.BasicTheme,{}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["The model represents the data within the List, and the visualizer provides a way to translate each item to a ",(0,i.jsx)(n.code,{children:"View"})," that will be rendered within\nthe List."]}),"\n",(0,i.jsxs)(n.p,{children:["Lists provide memory optimization by only rendering the contents within their viewport, recycling items to display new rows. The default setting caches 10 extra items; but this can be changed with the ",(0,i.jsx)(n.code,{children:"scrollCache"})," property when creating the List."]}),"\n",(0,i.jsxs)(n.p,{children:["The following shows a ",(0,i.jsx)(c.m.DynamicList,{})," of countries (a custom data class). These Lists are useful when the underlying model can change after creation. This demo loads images asynchronously and adds new countries to the model as they load. The demo also illustrates a custom visualizer that represents each country as a name label and flag image."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"list",height:"300"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:qe})})]}),"\n",(0,i.jsxs)("div",{style:{fontSize:"10px",textAlign:"right",color:"gray"},children:["Icons made by ",(0,i.jsx)("a",{style:{color:"gray"},href:"https://www.flaticon.com/authors/freepik",title:"Freepik",children:"Freepik"})]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Columns",children:(0,i.jsx)(s.u,{functionName:"verticalList",height:"300"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:He})})]}),"\n",(0,i.jsxs)("div",{style:{fontSize:"10px",textAlign:"right",color:"gray"},children:["Icons made by ",(0,i.jsx)("a",{style:{color:"gray"},href:"https://www.flaticon.com/authors/freepik",title:"Freepik",children:"Freepik"})]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Rows",children:(0,i.jsx)(s.u,{functionName:"horizontalList",height:"300"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:We})})]}),"\n",(0,i.jsxs)("div",{style:{fontSize:"10px",textAlign:"right",color:"gray"},children:["Icons made by ",(0,i.jsx)("a",{style:{color:"gray"},href:"https://www.flaticon.com/authors/freepik",title:"Freepik",children:"Freepik"})]}),"\n",(0,i.jsxs)(n.p,{children:["This List displays a set of countries, with each having a name and flag image. A ",(0,i.jsx)(n.code,{children:"DynamicList"})," is used here because\nthe underlying ",(0,i.jsx)(n.code,{children:"model"})," changes as each country is added asynchronously when its image loads."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.DynamicList,{})," is readonly (though its models may change), while ",(0,i.jsx)(c.m.MutableList,{})," is read/write."]})})]})}function Ye(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Ge,{...e})}):Ge(e)}function $e(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Ke='package controls\n\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.tree.SimpleTreeModel\nimport io.nacular.doodle.controls.tree.Tree\nimport io.nacular.doodle.controls.tree.rootNode\nimport io.nacular.doodle.docs.utils.highlightingTextVisualizer\n\n//sampleStart\nval root = rootNode("") {\n    node("Applications")\n    node("Desktop"     )\n    node("Documents"   ) {\n        node("Image.jpg")\n        node("Todos.txt")\n    }\n    node("Downloads"    )\n    node("Movies"       )\n    node("Music"        ) {\n        node("Track1.mp3")\n        node("Track2.mp3")\n        node("Track3.mp3")\n        node("Track4.mp3")\n    }\n    node("Photos"        ) {\n        node("Capture1.jpg")\n        node("Capture2.jpg")\n        node("Capture3.jpg")\n        node("Capture4.jpg")\n    }\n}\n\nval tree = Tree(\n    model          = SimpleTreeModel(root),\n    itemVisualizer = highlightingTextVisualizer(),\n    selectionModel = MultiSelectionModel()\n)\n//sampleEnd';function Xe(e){const n={admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,t.M)(),...e.components};return c.m||Ze("api",!1),c.m.DynamicTree||Ze("api.DynamicTree",!0),c.m.ItemVisualizer||Ze("api.ItemVisualizer",!0),c.m.MutableTree||Ze("api.MutableTree",!0),c.m.TreeBehavior||Ze("api.TreeBehavior",!0),c.m.TreeModel||Ze("api.TreeModel",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Tree"})," control is a visual analog to the tree data structure. It is a ",(0,i.jsx)(n.strong,{children:"readonly"}),", hierarchical, generic collection of items that are accessible via a numeric path."]}),"\n",(0,i.jsxs)(n.p,{children:["You need 2 things to create a Tree: a ",(0,i.jsx)(c.m.TreeModel,{}),", and ",(0,i.jsx)(c.m.ItemVisualizer,{}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"You also need to provide a Behavior or use a Theme with one since Tree delegates rendering."})}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"tree",height:"300"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Ke}),(0,i.jsx)(n.p,{children:"This creates a Tree from the nodes defined. This demo also places the Tree in a resizable ScrollPanel; but that code is excluded for simplicity. Trees--like Lists--provide memory optimized rendering."}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Trees require a ",(0,i.jsx)(c.m.TreeBehavior,{})," for rendering. ",(0,i.jsx)(n.code,{children:"BasicTheme"})," provides one."]})})]})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.DynamicTree,{})," is readonly (though its models may change), while ",(0,i.jsx)(c.m.MutableTree,{})," is read/write."]})})]})}function Je(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Xe,{...e})}):Xe(e)}function Ze(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Qe='package controls\n\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.table.TreeTable\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.tree.SimpleTreeModel\nimport io.nacular.doodle.controls.tree.TreeNode\nimport io.nacular.doodle.docs.utils.highlightingTextVisualizer\nimport io.nacular.measured.units.BinarySize\nimport io.nacular.measured.units.BinarySize.Companion.bytes\nimport io.nacular.measured.units.BinarySize.Companion.gigabytes\nimport io.nacular.measured.units.BinarySize.Companion.kilobytes\nimport io.nacular.measured.units.BinarySize.Companion.megabytes\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.times\nimport io.nacular.measured.units.toNearest\n\ninterface File {\n    val name: String              get() = ""\n    val size: Measure<BinarySize> get() = 0 * bytes\n\n    fun toNode(): TreeNode<File> {\n        return TreeNode(this)\n    }\n\n    companion object {\n        operator fun invoke(name: String, size: Measure<BinarySize> = 0 * bytes) = object: File {}\n    }\n}\n\ninterface Directory: File {\n    interface DirectoryBuilder\n\n    val children: List<File> get() = TODO("Not yet implemented")\n\n    override fun toNode(): TreeNode<File> {\n        return TreeNode(this, children.map { it.toNode() })\n    }\n\n    companion object {\n        operator fun invoke(name: String, children: DirectoryBuilder.() -> Unit) = object: Directory {}\n    }\n}\n\nprivate fun Measure<BinarySize>.toSmallestUnit(): Measure<BinarySize> {\n    listOf(bytes, kilobytes, megabytes, gigabytes).forEach {\n        if (this >=  1 * it) return (this `as` it).toNearest(0.1 * it)\n    }\n\n    return this\n}\n\nfun treeTable() {\n//sampleStart\n    val root = Directory("") {\n        File("Applications",     100 * gigabytes)\n        File("Desktop",           79 * bytes    )\n        Directory("Documents") {\n            File("Image.jpg",    256 * kilobytes)\n            File("Todos.txt",     10 * megabytes)\n        }\n        Directory("Downloads") {}\n        File("Movies",           1.8 * gigabytes)\n        Directory("Music") {\n            File("Track1.mp3",   3.6 * megabytes)\n            File("Track2.mp3",   867 * kilobytes)\n            File("Track3.mp3",     3 * megabytes)\n            File("Track4.mp3",    12 * megabytes)\n        }\n        Directory("Photos") {\n            File("Capture1.jpg",  105 * megabytes)\n            File("Capture2.jpg",   87 * megabytes)\n            File("Capture3.jpg", 1000 * kilobytes)\n            File("Capture4.jpg",  1.1 * gigabytes)\n        }\n    }\n\n    val treeTable = TreeTable(\n        model          = SimpleTreeModel(root.toNode()),\n        selectionModel = MultiSelectionModel()\n    ) {\n        val textVisualizer = highlightingTextVisualizer()\n\n        column(Label("Name"), { name                       }, textVisualizer) { width = 150.0 }\n        column(Label("Size"), { "${size.toSmallestUnit()}" }, textVisualizer) {\n            width         = 150.0\n            cellAlignment = {\n                it.right eq parent.right - 10\n                it.width.preserve\n                it.centerY eq parent.centerY\n            }\n        }\n    }\n//sampleEnd\n}';function en(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||on("api",!1),c.m.ItemVisualizer||on("api.ItemVisualizer",!0),c.m.TreeBehavior||on("api.TreeBehavior",!0),c.m.TreeModel||on("api.TreeModel",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"TreeTable"})," is very similar to a ",(0,i.jsx)(n.a,{href:"#tree",children:(0,i.jsx)(n.code,{children:"Tree"})}),", except it shows a structured set of fields from each item as columns, like a ",(0,i.jsx)(n.a,{href:"#table",children:(0,i.jsx)(n.code,{children:"Table"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You need 2 things to create a Tree: a ",(0,i.jsx)(c.m.TreeModel,{}),", and ",(0,i.jsx)(c.m.ItemVisualizer,{}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"You also need to provide a Behavior or use a Theme with one since Tree delegates rendering."})}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"treeTable",height:"300"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Qe}),(0,i.jsx)(n.p,{children:"This creates a Tree from the nodes defined. This demo also places the Tree in a resizable ScrollPanel; but that code is excluded for simplicity. Trees--like Lists--provide memory optimized rendering."}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Trees require a ",(0,i.jsx)(c.m.TreeBehavior,{})," for rendering. ",(0,i.jsx)(n.code,{children:"BasicTheme"})," provides one."]})})]})]})]})}function nn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(en,{...e})}):en(e)}function on(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const tn='package controls\n\nimport io.nacular.doodle.controls.BooleanVisualizer\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.table.CellInfo\nimport io.nacular.doodle.controls.table.Table\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.toString\nimport io.nacular.doodle.docs.utils.highlightingTextVisualizer\nimport io.nacular.doodle.layout.constraints.center\n\nfun tableExample() {\n//sampleStart\n    data class Person(val name: String, val age: Int, val attending: Boolean)\n\n    val textVisualizer = highlightingTextVisualizer()\n\n    // Generates a string for each row\'s index\n    val indexVisualizer = itemVisualizer<Unit, CellInfo<Person, Unit>> { _, previous, context ->\n        textVisualizer("${context.index + 1}", previous, context)\n    }\n\n    val data = listOf(\n        Person(name = "Alice", age = 53, attending = false),\n        Person(name = "Bob",   age = 35, attending = true ),\n        Person(name = "Jack",  age =  8, attending = true ),\n        Person(name = "Jill",  age =  5, attending = false)\n    )\n\n    val table = Table(data, MultiSelectionModel()) {\n        column(Label("#"        ),                indexVisualizer         ) { minWidth =  50.0; width =  50.0; maxWidth = 150.0; cellAlignment = center                                             }\n        column(Label("Name"     ), { name      }, textVisualizer          ) { minWidth = 100.0;                                  cellAlignment = { it.left eq 10 }                                  }\n        column(Label("Age"      ), { age       }, toString(textVisualizer)) { minWidth = 100.0; width = 100.0; maxWidth = 150.0; cellAlignment = { it.left eq 10 }; headerAlignment = cellAlignment }\n        column(Label("Attending"), { attending }, BooleanVisualizer()     ) { minWidth = 100.0; width = 100.0; maxWidth = 150.0; cellAlignment = center                                             }\n    }\n//sampleEnd\n}';function an(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,t.M)(),...e.components};return c.m||ln("api",!1),c.m.CellVisualizer||ln("api.CellVisualizer",!0),c.m.DynamicTable||ln("api.DynamicTable",!0),c.m.MutableTable||ln("api.MutableTable",!0),c.m.TableBehavior||ln("api.TableBehavior",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"Table"})," is very similar to a ",(0,i.jsx)(n.code,{children:"List"})," (",(0,i.jsx)(n.strong,{children:"readonly"})," analog to the list data structure). It is like a ",(0,i.jsx)(n.a,{href:"#list",children:(0,i.jsx)(n.code,{children:"List"})})," that can display structured\ndata for each entry they hold. It is also strongly typed and homogeneous, like List. So each item is of some type ",(0,i.jsx)(n.code,{children:"<T>"}),". The values of each column are therefore derivable from each ",(0,i.jsx)(n.code,{children:"<T>"})," in the table. The Table below contains a list of ",(0,i.jsx)(n.code,{children:"Person"})," and has columns for the ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"age"}),", and ",(0,i.jsx)(n.code,{children:"attending"})," (whether they are attending an event). Columns can also produce arbitrary values, which is done to show the index of each item."]}),"\n",(0,i.jsxs)(n.p,{children:["Each column's ",(0,i.jsx)(c.m.CellVisualizer,{})," ultimately controls what is displayed in it. The visualizer is given the value of each element in that column to produce a View. So the ",(0,i.jsx)(n.strong,{children:"Name"})," column gets a ",(0,i.jsx)(n.code,{children:"String"}),", while the ",(0,i.jsx)(n.strong,{children:"Attending"})," column gets a ",(0,i.jsx)(n.code,{children:"Boolean"}),". The first column has values of type ",(0,i.jsx)(n.code,{children:"Unit"}),", and uses the ",(0,i.jsx)(n.code,{children:"RowNumberGenerator"})," to display the index of each item."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(c.m.DynamicTable,{})," supports changes to its model, and ",(0,i.jsx)(c.m.MutableTable,{})," allows editing."]})}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"table",height:"400"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:tn}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Tables require a ",(0,i.jsx)(c.m.TableBehavior,{})," for rendering. ",(0,i.jsx)(n.code,{children:"BasicTheme"})," provides one."]})})]})]})]})}function rn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(an,{...e})}):an(e)}function ln(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const sn='package controls\n\nimport io.nacular.doodle.controls.BooleanVisualizer\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.mutableListModelOf\nimport io.nacular.doodle.controls.table.CellInfo\nimport io.nacular.doodle.controls.table.MutableTable\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.toString\nimport io.nacular.doodle.docs.utils.highlightingTextVisualizer\nimport io.nacular.doodle.layout.constraints.center\n\nfun mutableTableExample() {\n//sampleStart\n    data class Person(val name: String, val age: Int, val attending: Boolean)\n\n    val textVisualizer = highlightingTextVisualizer()\n\n    // Generates a string for each row\'s index\n    val indexVisualizer = itemVisualizer<Unit, CellInfo<Person, Unit>> { _, previous, context ->\n        textVisualizer("${context.index + 1}", previous, context)\n    }\n\n    val data = mutableListModelOf(\n        Person(name = "Alice", age = 53, attending = false),\n        Person(name = "Bob",   age = 35, attending = true ),\n        Person(name = "Jack",  age =  8, attending = true ),\n        Person(name = "Jill",  age =  5, attending = false)\n    )\n\n    val table = MutableTable(data, MultiSelectionModel()) {\n        column(Label("#"        ),                indexVisualizer         ) { minWidth =  50.0; width =  50.0; maxWidth = 150.0; cellAlignment = center                                             }\n        column(Label("Name"     ), { name      }, textVisualizer          ) { minWidth = 100.0;                                  cellAlignment = { it.left eq 10 }                                  }\n        column(Label("Age"      ), { age       }, toString(textVisualizer)) { minWidth = 100.0; width = 100.0; maxWidth = 150.0; cellAlignment = { it.left eq 10 }; headerAlignment = cellAlignment }\n        column(Label("Attending"), { attending }, BooleanVisualizer()     ) { minWidth = 100.0; width = 100.0; maxWidth = 150.0; cellAlignment = center                                             }\n    }\n//sampleEnd\n}';function dn(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||pn("api",!1),c.m.BasicTheme||pn("api.BasicTheme",!0),c.m.TableBehavior||pn("api.TableBehavior",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This is a table that can modify its underlying ",(0,i.jsx)(n.code,{children:"model"}),". That means the table can do CRUD operations or sorting that will modify the model. This example shows sorting."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"mutableTable",height:"400"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:sn}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Tables require a ",(0,i.jsx)(c.m.TableBehavior,{})," for rendering. ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})]})]})}function cn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(dn,{...e})}):dn(e)}function pn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const mn='package controls\n\nimport io.nacular.doodle.controls.MultiSelectionModel\nimport io.nacular.doodle.controls.after\nimport io.nacular.doodle.controls.table.ColumnInfo\nimport io.nacular.doodle.controls.table.KeyValueTable\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.docs.utils.highlightingTextVisualizer\nimport io.nacular.doodle.layout.constraints.Bounds\nimport io.nacular.doodle.layout.constraints.ConstraintDslContext\n\nfun keyValueTable(numberFormatter: (Int) -> String) {\n//sampleStart\n    val textVisualizer   = highlightingTextVisualizer()\n    val numberVisualizer = textVisualizer.after { it: Int -> numberFormatter(it) }\n\n    val data = mapOf(\n        "New York City, NY" to 8_622_357,\n        "Los Angeles, CA"   to 4_085_014,\n        "Chicago, IL"       to 2_670_406,\n        "Houston, TX"       to 2_378_146,\n        "Phoenix, AZ"       to 1_743_469,\n        "Philadelphia, PA"  to 1_590_402,\n        "San Antonio, TX"   to 1_579_504,\n        "San Diego, CA"     to 1_469_490,\n        "Dallas, TX"        to 1_400_337,\n        "San Jose, CA"      to 1_036_242,\n    )\n\n    val alignment: ConstraintDslContext.(Bounds) -> Unit = {\n        it.left    eq 10\n        it.centerY eq parent.centerY\n    }\n\n    val table = KeyValueTable(\n        values         = data,\n        keyColumn      = ColumnInfo(Label("City"      ), textVisualizer  ) { headerAlignment = alignment; cellAlignment = alignment },\n        valueColumn    = ColumnInfo(Label("Population"), numberVisualizer) { headerAlignment = alignment; cellAlignment = alignment },\n        selectionModel = MultiSelectionModel(),\n    )\n//sampleEnd\n}';function un(e){const n={admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||xn("api",!1),c.m.TableBehavior||xn("api.TableBehavior",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This is a table that represents a key-value map of data. The table only has two columns: one for the key and value in each pair."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"keyValueTable",height:"400"})}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:mn}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["KeyValueTables require a ",(0,i.jsx)(c.m.TableBehavior,{})," for rendering. ",(0,i.jsx)(n.code,{children:"BasicTheme"})," provides one."]})})]})]})]})}function hn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(un,{...e})}):un(e)}function xn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const gn="package controls\n\nimport io.nacular.doodle.controls.panels.GridPanel\nimport io.nacular.doodle.controls.panels.GridPanel.Companion.FitPanel\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.utils.Resizer\n\nfun gridPanel(\n    view1: View,\n    view2: View,\n    view3: View,\n    view4: View,\n    view5: View,\n    view6: View,\n    view7: View\n) {\n//sampleStart\n    val panel = GridPanel().apply {\n        rowSpacing         = { 10.0 }\n        columnSpacing      = { 10.0 }\n        rowSizingPolicy    = FitPanel // FitContent, or custom policy\n        columnSizingPolicy = FitPanel // FitContent, or custom policy\n\n        add(view1, columnSpan = 2     ) // defaults to row = 0, col = 0\n        add(view2, row = 1, column = 0)\n        add(view3, row = 1, column = 1)\n        add(view4, row = 2, column = 2)\n        add(view5, row = 0, column = 2, rowSpan = 2)\n        add(view6, row = 2, column = 0)\n        add(view7, row = 2, column = 1)\n\n        size = Size(200)\n\n        Resizer(this).apply { movable = false }\n    }\n//sampleEnd\n}";function vn(e){const n={code:"code",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This control manages a generic list of ",(0,i.jsx)(n.code,{children:"View"}),"s and displays them within a grid layout. Items can be added to or removed from the panel. Each item added indicates the row/column it sits at and the number of rows / columns it spans. This, along with the ",(0,i.jsx)(n.code,{children:"rowSizingPolicy"})," and ",(0,i.jsx)(n.code,{children:"columnSizingPolicy"})," control how the items are ultimately laid out."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"gridPanel",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:gn})})]})]})}function jn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(vn,{...e})}):vn(e)}const yn="package controls\n\nimport io.nacular.doodle.controls.Photo\nimport io.nacular.doodle.controls.panels.ScrollPanel\nimport io.nacular.doodle.controls.panels.SplitPanel\nimport io.nacular.doodle.docs.utils.CircularView\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.image.Image\nimport io.nacular.doodle.layout.Insets\nimport io.nacular.doodle.utils.Orientation.Vertical\n\nfun splitPanel(image: Image) {\n//sampleStart\n    val panel = SplitPanel(orientation = Vertical /*| Horizontal*/).apply {\n        size      = Size(500, 300)\n        firstItem = ScrollPanel(CircularView(250.0))\n        lastItem  = Photo(image)\n        ratio     = 1f / 3\n        insets    = Insets(2.0)\n    }\n//sampleEnd\n}",fn='package controls\n\nimport io.nacular.doodle.controls.SingleItemSelectionModel\nimport io.nacular.doodle.controls.StringVisualizer\nimport io.nacular.doodle.controls.list.List\nimport io.nacular.doodle.controls.panels.ScrollPanel\nimport io.nacular.doodle.controls.panels.SplitPanel\nimport io.nacular.doodle.controls.toString\nimport io.nacular.doodle.docs.utils.panel\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.utils.Orientation.Horizontal\nimport io.nacular.doodle.utils.Resizer\n\nfun nestedSplitPanel(textMetrics: TextMetrics) {\n//sampleStart\n    val list = List(1..10, toString(StringVisualizer()), SingleItemSelectionModel(), fitContent = emptySet()).apply {\n        cellAlignment = { it.left eq 10 }\n    }\n    val main = panel(textMetrics, "1",    shadow = null, cornerRadius = 0.0)\n    val info = panel(textMetrics, "info", shadow = null, cornerRadius = 0.0)\n\n    val panel = SplitPanel(orientation = Horizontal).apply {\n        size      = Size(500, 300)\n        firstItem = SplitPanel().apply {\n            firstItem = ScrollPanel(list).apply {\n                contentWidthConstraints  = { it eq parent.width  }\n                contentHeightConstraints = { it eq max(list.idealSize?.height ?: list.height, parent.height) }\n            }\n            lastItem  = main\n            ratio     = 1f / 3\n        }\n\n        ratio    = 2f / 3\n        lastItem = info\n\n        Resizer(this).apply { movable = false }\n    }\n\n/**\n * Launched App using\n * -------------------------------------------\n * basicListBehavior(),\n * basicLabelBehavior(),\n * basicSplitPanelBehavior(showDivider = true),\n * nativeScrollPanelBehavior()\n */\n//sampleEnd\n}';function bn(e){const n={admonition:"admonition",p:"p",...(0,t.M)(),...e.components};return c.m||Sn("api",!1),c.m.BasicTheme||Sn("api.BasicTheme",!0),c.m.SplitPanelBehavior||Sn("api.SplitPanelBehavior",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This control divides a region into two areas, each occupied by a View. It also allows the user to change the portion of its viewport dedicated to either view."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"splitPanel",height:"400"})}),(0,i.jsx)(r.c,{value:"Horizontal",children:(0,i.jsx)(s.u,{functionName:"splitPanel",args:"[false]",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:yn})})]}),"\n",(0,i.jsx)(n.p,{children:"This shows how you might nest horizontal and vertical SplitPanels."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"multiSplitPanel",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:fn})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Requires a ",(0,i.jsx)(c.m.SplitPanelBehavior,{})," for rendering. ",(0,i.jsx)(c.m.BasicTheme,{})," provides one."]})})]})}function wn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(bn,{...e})}):bn(e)}function Sn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Tn='package tabbedpanel\n\nimport io.nacular.doodle.controls.ScrollPanelVisualizer\nimport io.nacular.doodle.controls.StringVisualizer\nimport io.nacular.doodle.controls.invoke\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.panels.TabbedPanel\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.utils.Resizer\n\nfun example() {\n//sampleStart\n    val object1 = view {}\n    val object2 = view {}\n    val object3 = view {}\n    val object4 = view {}\n\n    val textVisualizer = StringVisualizer()\n\n    val mapping = mapOf(\n        object1 to "Circle",\n        object2 to "Second Tab",\n        object3 to "Cool Photo",\n        object4 to "Tab 4"\n    )\n\n    val panel = TabbedPanel(\n        visualizer    = ScrollPanelVisualizer(),                                                    // Each object is displayed within a ScrollPanel\n        tabVisualizer = itemVisualizer { item,_,_ -> textVisualizer(mapping[item] ?: "Unknown") },  // Each tab shows a hardcoded string from mapping\n        object1,\n        object2,\n        object3,\n        object4\n    ).apply {\n        size = Size(500, 300)\n\n        Resizer(this).apply { movable = false }\n    }\n//sampleEnd\n}';function Bn(e){const n={admonition:"admonition",p:"p",...(0,t.M)(),...e.components};return c.m||kn("api",!1),c.m.BasicTabbedPanelBehavior||kn("api.BasicTabbedPanelBehavior",!0),c.m.BasicTabbedPanelBehaviorModule||kn("api.BasicTabbedPanelBehaviorModule",!0),c.m.ItemVisualizer||kn("api.ItemVisualizer",!0),c.m.ScrollPanelVisualizer||kn("api.ScrollPanelVisualizer",!0),c.m.TabbedPanelBehavior||kn("api.TabbedPanelBehavior",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This control manages a generic list of items and displays them one at a time using an ",(0,i.jsx)(c.m.ItemVisualizer,{}),'. Each item is generally\ntracked with a visual "tab" that allows selection of particular items in the list.']}),"\n",(0,i.jsxs)(n.p,{children:["The panel takes 2 visualizers; one to convert each item to a View that will be displayed as the tab, and another to convert each item to the main tab content. The View returned from the main visualizer will be scaled to fit the TabPanel when using ",(0,i.jsx)(c.m.BasicTabbedPanelBehaviorModule,{}),". In this example, we use a ",(0,i.jsx)(c.m.ScrollPanelVisualizer,{})," for the main content so it turns into a ScrollPanel with our view embedded. That works well for TabbedPanels that are meant to display arbitrary Views."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"tabbedPanel",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Tn})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["This control requires a ",(0,i.jsx)(c.m.TabbedPanelBehavior,{})," for rendering. This demo uses the ",(0,i.jsx)(c.m.BasicTabbedPanelBehaviorModule,{})," module which installs ",(0,i.jsx)(c.m.BasicTabbedPanelBehavior,{})]})})]})}function Mn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Bn,{...e})}):Bn(e)}function kn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Cn='package controls\n\nimport io.nacular.doodle.controls.ColorPicker\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.geometry.Size\n\nfun colorPicker() {\n//sampleStart\n    val picker = ColorPicker(Black).apply {\n        size = Size(300, 300)\n        // ...\n    }\n\n    println("Selected color is ${picker.color}")\n\n    picker.changed += { _, old, new ->\n        println("Color changed from: $old to $new")\n    }\n//sampleEnd\n}';function Pn(e){const n={p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"This control allows a user to pick an RGB color by specifying a hue and opacity."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"colorPicker",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Cn})})]})]})}function zn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Pn,{...e})}):Pn(e)}const Ln="package controls\n\nimport io.nacular.doodle.controls.date.MonthPanel\nimport io.nacular.doodle.geometry.Size\nimport kotlinx.datetime.Clock\nimport kotlinx.datetime.TimeZone\nimport kotlinx.datetime.toLocalDateTime\n\n//sampleStart\nval today = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date\n\nval monthPanel = MonthPanel(today, /*itemVisualizer, selectionModel*/).apply {\n    size = Size(300)\n    // ...\n}\n//sampleEnd";function Fn(e){const n={a:"a",code:"code",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This control displays the days of a given month. It does not display a header with the day of the week though. This functionality is provided separately in the ",(0,i.jsx)(n.a,{href:"#daysoftheweekpanel",children:"DaysOfTheWeekPanel"}),". This simplifies reuse as a core component of calendars. Excluding the header means the ",(0,i.jsx)(n.code,{children:"MonthPanel"})," can be used in vertically scrolling calendars where the days are pinned to the top. Or in horizontal setups where the days are attached to it (within a container that has both panels)."]}),"\n",(0,i.jsxs)(n.p,{children:["The panel can either show or hide days in the adjacent months using ",(0,i.jsx)(n.code,{children:"showAdjacentMonths"}),". It can also start at any day of the week via the ",(0,i.jsx)(n.code,{children:"weekStart"})," property."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"monthPanel",height:"400"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Ln})})]})]})}function Dn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Fn,{...e})}):Fn(e)}const Vn="package controls\n\nimport io.nacular.doodle.controls.date.DaysOfTheWeekPanel\nimport kotlinx.datetime.DayOfWeek\n\n//sampleStart\nval panel = DaysOfTheWeekPanel(weekStart = DayOfWeek.MONDAY).apply {\n    // ...\n}\n\n/*\nstyled using\n\nbasicDaysOfTheWeekPanelBehavior(defaultVisualizer = itemVisualizer { day, previous, _ ->\n    val text = StyledText(day.name.take(1))\n\n    when (previous) {\n        is Label -> previous.apply    { fitText = emptySet(); this.styledText = text }\n        else     -> Label(text).apply { fitText = emptySet()                         }\n    }\n})\n*/\n//sampleEnd";function In(e){const n={code:"code",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This control is meant as a header for the ",(0,i.jsx)(n.code,{children:"MonthPanel"}),". It shows days of the week starting at the given ",(0,i.jsx)(n.code,{children:"weekStart"})," property."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"daysOfWeek",height:"200"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Vn})})]})]})}function En(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(In,{...e})}):In(e)}const An='package controls.calendar\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.ItemVisualizer\nimport io.nacular.doodle.controls.ListModel\nimport io.nacular.doodle.controls.SelectionModel\nimport io.nacular.doodle.controls.SingleItemSelectionModel\nimport io.nacular.doodle.controls.date.DaysOfTheWeekPanel\nimport io.nacular.doodle.controls.date.MonthPanel\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.panels.ScrollPanel\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.opacity\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.drawing.rect\nimport io.nacular.doodle.event.PointerEvent\nimport io.nacular.doodle.event.PointerListener\nimport io.nacular.doodle.geometry.Circle\nimport io.nacular.doodle.geometry.Point\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.Strength\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.layout.constraints.fill\nimport io.nacular.doodle.system.SystemInputEvent\nimport io.nacular.doodle.text.invoke\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.basic.list.basicVerticalListBehavior\nimport io.nacular.doodle.utils.Dimension\nimport io.nacular.doodle.utils.Resizer\nimport kotlinx.datetime.Clock\nimport kotlinx.datetime.DatePeriod\nimport kotlinx.datetime.LocalDate\nimport kotlinx.datetime.TimeZone\nimport kotlinx.datetime.minus\nimport kotlinx.datetime.monthsUntil\nimport kotlinx.datetime.plus\nimport kotlinx.datetime.toLocalDateTime\nimport kotlin.math.min\n\nprivate class CalendarDay(private val today: LocalDate, private var day: LocalDate, private val panel: MonthPanel): View() {\n    private val label = Label()\n\n    init {\n        styleChanged += { rerender() }\n\n        clipCanvasToBounds = false\n\n        children += label\n\n        layout = constrain(label) {\n            it.center eq parent.center\n        }\n\n        pointerChanged += object: PointerListener {\n            private var pressed     = false\n            private var pointerOver = false\n\n            override fun entered (event: PointerEvent) { pointerOver = true  }\n            override fun exited  (event: PointerEvent) { pointerOver = false }\n            override fun pressed (event: PointerEvent) { pressed     = true  }\n            override fun released(event: PointerEvent) {\n                if (pointerOver && pressed) {\n                    setOf(day).also {\n                        panel.apply {\n                            when {\n                                SystemInputEvent.Modifier.Ctrl in event.modifiers || SystemInputEvent.Modifier.Meta in event.modifiers -> toggleSelection(it)\n                                SystemInputEvent.Modifier.Shift in event.modifiers && lastSelection != null                            -> {\n                                    selectionAnchor?.let { anchor ->\n                                        val current = day\n                                        when {\n                                            current < anchor  -> setSelection((anchor downTo current))\n                                            anchor  < current -> setSelection((anchor  .. current).toSet())\n                                        }\n                                    }\n                                }\n                                else                                                                                                   -> setSelection(it)\n                            }\n                        }\n                    }\n                }\n                pressed = false\n            }\n        }\n\n        update(panel, day)\n    }\n\n    override fun render(canvas: Canvas) {\n        backgroundColor?.let {\n            val oneDay = DatePeriod(days = 1)\n            var left   = width / 2\n            var right  = left\n\n            if (panel.selected(day - oneDay)) {\n                left = 0.0\n            }\n            if (panel.selected(day + oneDay)) {\n                right = width\n            }\n\n            val radius = min(width, height) / 2\n\n            canvas.circle(Circle(radius = radius, center = Point(width/2, height/2)), fill = it.paint)\n\n            canvas.rect(Rectangle(left, height / 2 - radius, right - left + 1, 2 * radius), fill = it.paint)\n        }\n    }\n\n    private infix fun LocalDate.downTo(other: LocalDate): Set<LocalDate> {\n        var d = this\n        val result = mutableSetOf<LocalDate>()\n        while (d >= other) {\n            result += d\n            d -= DatePeriod(days = 1)\n        }\n\n        return result\n    }\n\n    private fun ClosedRange<LocalDate>.toSet(): Set<LocalDate> {\n        var d = start\n        val result = mutableSetOf<LocalDate>()\n\n        while (d <= endInclusive) {\n            result += d\n            d += DatePeriod(days = 1)\n        }\n\n        return result\n    }\n\n    fun update(panel: MonthPanel, day: LocalDate) {\n        this.day = day\n\n        val text = "${day.dayOfMonth}"\n\n        val styledText = when {\n            day == today && panel.startDate.month == day.month -> Color.Red     (text)\n            panel.selected(day)                                -> Color.Black   (text)\n            day.month != panel.startDate.month                 -> Color.Darkgray(text)\n            else                                               -> Color.White   (text)\n        }\n\n        backgroundColor = when {\n            panel.selected(day) -> Color.Lightgray\n            else                -> null\n        }\n\n        label.styledText = styledText\n    }\n}\n\nprivate class NamedMonthPanel(\n    date: LocalDate,\n    itemVisualizer: ItemVisualizer<LocalDate, MonthPanel> = itemVisualizer { day, previous, panel ->\n        val text = "${day.dayOfMonth}"\n\n        when (previous) {\n            is Label -> previous.apply { fitText = emptySet(); this.text = text }\n            else     -> Label(text).apply { fitText = emptySet() }\n        }.also {\n            it.enabled = day.month == panel.startDate.month\n        }\n    },\n    selectionModel: SelectionModel<LocalDate>? = null\n): View() {\n    private val header = Label()\n    val monthPanel = MonthPanel(date, itemVisualizer, selectionModel).apply {\n        monthChanged += {\n            updateHeader()\n        }\n\n        acceptsThemes = false\n    }\n\n    private fun updateHeader() {\n        header.styledText = Color.White("${monthPanel.startDate.month.name.lowercase().replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }} ${monthPanel.startDate.year}")\n    }\n\n    init {\n        updateHeader()\n\n        children += listOf(header, monthPanel)\n\n        layout = constrain(header, monthPanel) { h, m ->\n            h.top     eq  0\n            h.left    eq 10\n            h.height.preserve\n            m.top     eq h.bottom\n            m.width   eq parent.width\n            (m.bottom eq parent.bottom) .. Strength.Strong\n        }\n    }\n}\n\nprivate class MonthModel(private val dates: ClosedRange<LocalDate>): ListModel<LocalDate> {\n    private val LocalDate.firstDayOfMonth: LocalDate get() = LocalDate(year = year, month = month, dayOfMonth = 1)\n\n    override val size = dates.start.firstDayOfMonth.monthsUntil(dates.endInclusive.firstDayOfMonth) + 1\n\n    override fun contains(value: LocalDate) = value in dates\n\n    override fun get(index: Int): Result<LocalDate> {\n        if (index < 0 || index > size) return Result.failure(IndexOutOfBoundsException())\n\n        return Result.success(dates.start.firstDayOfMonth + DatePeriod(months = index))\n    }\n\n    override fun section(range: ClosedRange<Int>): List<LocalDate> {\n        TODO("Not yet implemented")\n    }\n\n    override fun iterator(): Iterator<LocalDate> = object: Iterator<LocalDate> {\n        private var index = 0\n\n        override fun hasNext() = index < size\n\n        override fun next() = this@MonthModel[index++].getOrThrow()\n    }\n}\n\n//sampleStart\nclass CalendarApp(display: Display, themeManager: ThemeManager, theme: Theme): Application {\n    private val offsetMonths = 20\n\n    private val monthList by lazy {\n        val today                = Clock.System.now().toLocalDateTime(TimeZone.currentSystemDefault()).date\n        val sharedSelectionModel = SingleItemSelectionModel<LocalDate>()\n\n        io.nacular.doodle.controls.list.List(\n            model = MonthModel(today - DatePeriod(months = offsetMonths)..today + DatePeriod(months = offsetMonths)),\n            itemVisualizer = itemVisualizer { item, previous, _ ->\n                when (previous) {\n                    is NamedMonthPanel -> previous.also { it.monthPanel.setDate(item) }\n                    else               -> NamedMonthPanel(\n                        item,\n                        itemVisualizer { day, previous, panel ->\n                            when (previous) {\n                                is CalendarDay -> previous.apply { update(panel, day) }\n                                else           -> CalendarDay(today, day, panel)\n                            }\n                        },\n                        selectionModel = sharedSelectionModel\n                    )\n                }\n            },\n            fitContent = setOf(Dimension.Height),\n        ).apply {\n            behavior      = basicVerticalListBehavior(itemHeight = 300.0, numColumns = 1, evenItemColor = Color.Transparent, oddItemColor = Color.Transparent)\n            cellAlignment = fill\n            acceptsThemes = false\n\n            displayChange += { _, _, _ ->\n                scrollTo(offsetMonths)\n            }\n        }\n    }\n\n    init {\n        themeManager.selected = theme\n\n        display += object: View() {\n            init {\n                clipCanvasToBounds = false\n\n                val scrollPanel = ScrollPanel(monthList).apply {\n                    size = Size(300, 300)\n                    contentWidthConstraints = { it eq width - verticalScrollBarWidth }\n                    scrollBarDimensionsChanged += {\n                        relayout()\n                    }\n                }\n\n                children += listOf(DaysOfTheWeekPanel(), scrollPanel)\n\n                layout = constrain(children[0], children[1]) { header, scroll ->\n                    header.top     eq 0\n                    header.width   eq parent.width - scrollPanel.verticalScrollBarWidth\n                    header.height  eq 50\n                    scroll.top     eq header.bottom\n                    scroll.width   eq parent.width\n                    (scroll.bottom eq parent.bottom) .. Strength.Strong\n                }\n\n                bounds = Rectangle(300, 350)\n                Resizer(this).apply {\n                    movable = false\n                }\n            }\n\n            override fun render(canvas: Canvas) {\n                canvas.outerShadow(vertical = 10.0, blurRadius = 10.0, color = Black.opacity(0.5f)) {\n                    rect(bounds.atOrigin, color = Color(0xccccccu).inverted)\n                }\n            }\n        }\n\n        display.layout = constrain(display.first(), center)\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd',Rn="package controls.calendar\n\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.drawing.Color.Companion.Transparent\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.text.StyledText\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicDaysOfTheWeekPanelBehavior\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicLabelBehavior\nimport io.nacular.doodle.theme.basic.BasicTheme.Companion.basicMonthPanelBehavior\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeScrollPanelBehavior\nimport org.kodein.di.instance\n\n//sampleStart\nfun main() {\n    val appModules = listOf(\n        basicLabelBehavior(),\n        basicMonthPanelBehavior(),\n        nativeScrollPanelBehavior(),\n        basicDaysOfTheWeekPanelBehavior(\n            background        = Transparent.paint,\n            defaultVisualizer = itemVisualizer { day, previous, _ ->\n                val text = StyledText(day.name.take(1), foreground = White.paint)\n\n                when (previous) {\n                    is Label -> previous.apply { fitText = emptySet(); this.styledText = text }\n                    else     -> Label(text).apply { fitText = emptySet() }\n                }\n            }\n        )\n    )\n\n    application(modules = appModules) {\n        CalendarApp(\n            display      = instance(),\n            themeManager = instance(),\n            theme        = instance()\n        )\n    }\n}\n//sampleEnd";function Nn(e){const n={code:"code",p:"p",...(0,t.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This shows the ",(0,i.jsx)(n.code,{children:"MonthPanel"})," and ",(0,i.jsx)(n.code,{children:"DaysOfTheWeekPanel"})," being used to create a simple vertical calendar with one column. This calendar uses a ",(0,i.jsx)(n.code,{children:"List<LocalDate>"}),"\nwith a model that contains the months of the current year. Each date in the list is visualized using a custom View that simply holds a label and\n",(0,i.jsx)(n.code,{children:"MonthPanel"}),". These are updated as the list scrolls and items are recycled."]}),"\n",(0,i.jsxs)(n.p,{children:["The custom View provides a visualizer to the ",(0,i.jsx)(n.code,{children:"MonthPanel"})," that controls the colors for each day as well as the background selection rendering."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"calendar",height:"450"})}),(0,i.jsxs)(r.c,{value:"Code",children:[(0,i.jsx)(d.A,{children:An}),(0,i.jsx)(n.p,{children:"This app uses many UI controls that can be styled using various behavior modules. The following shows how it is configured."}),(0,i.jsx)(d.A,{children:Rn})]})]})]})}function On(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Nn,{...e})}):Nn(e)}var Un=o(5600);function _n(e){const n={admonition:"admonition",p:"p",...(0,t.M)(),...e.components};return c.m||Hn("api",!1),c.m.FieldFunc||Hn("api.FieldFunc",!0),c.m.FieldVisualizer||Hn("api.FieldVisualizer",!0),c.m.View||Hn("api.View",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Forms provide a way of collecting structured data from a user. This is generally quite complex given the wide range of visual representations, data types, and validation steps usually involved. Doodle simplifies this entire flow with a single control that offers full customization and type safety."}),"\n",(0,i.jsx)(n.p,{children:"This example shows the use of validating text inputs, a radio list, and a sub form to gather some data about a person."}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"form",height:"600"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Un.c})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Form fields can bind to any type and use any ",(0,i.jsx)(c.m.View,{})," for display. This is done using a ",(0,i.jsx)(c.m.FieldVisualizer,{})," or the ",(0,i.jsx)(c.m.FieldFunc,{})," dsl."]})})]})}function qn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(_n,{...e})}):_n(e)}function Hn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}var Wn=o(9712);const Gn='package controls\n\nimport io.nacular.doodle.controls.popupmenu.MenuBehavior.ItemInfo\nimport io.nacular.doodle.controls.popupmenu.MenuFactory\nimport io.nacular.doodle.core.Icon\n\n/**\n * Be sure to install a `MenuBehavior` (i.e. `basicMenuBehavior`, or your own) to so the Menu renders.\n */\nfun example(menus: MenuFactory, someIcon: Icon<ItemInfo>) {\n//sampleStart\n    val menu = menus(close = { /* close menu */ }) {\n        menu("Sub menu") {\n            prompt   ("Prompt"                       ) { /* handle */ }\n            separator(                               )\n            action   ("Do something", icon = someIcon) { /* handle */ }.apply { enabled = false }\n            menu     ("Sub-sub menu"                 ) {\n                action   ("Some action"   ) { /* handle */ }\n                separator(                )\n                action   ("Another action") { /* handle */ }\n            }\n        }\n        action("Execute action") { /* handle */ }\n    }\n//sampleEnd\n}',Yn='package controls\n\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.controls.modal.ModalManager\nimport io.nacular.doodle.controls.modal.ModalManager.RelativeModal\nimport io.nacular.doodle.controls.popupmenu.MenuFactory\nimport io.nacular.doodle.controls.popupmenu.MenuItem\nimport io.nacular.doodle.event.PointerListener.Companion.clicked\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.layout.constraints.Strength.Companion.Strong\nimport io.nacular.doodle.utils.Resizer\nimport kotlinx.coroutines.CoroutineDispatcher\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\n\n/**\n * Be sure to install a `MenuBehavior` (i.e. `basicMenuBehavior`, or your own) to so the Menu renders.\n */\nfun popupMenu(\n    appScope    : CoroutineScope,\n    uiDispatcher: CoroutineDispatcher,\n    modal       : ModalManager,\n    menu        : MenuFactory,\n    toast       : (MenuItem) -> Unit\n) {\n//sampleStart\n    val button = PushButton("Menu").apply {\n        bounds = Rectangle(20, 20, 100, 30)\n\n        // Show menu as modal\n        fired += {\n            appScope.launch(uiDispatcher) {\n                modal {\n                    val popup = menu(close = { completed(Unit) }) {\n                        menu     ("New"                      ) {\n                            prompt   ("Project"                      ) { toast(it) }\n                            prompt   ("Project from Existing Sources") { toast(it) }\n                            prompt   ("Project from Version Control" ) { toast(it) }\n                            prompt   ("Module"                       ) { toast(it) }\n                            prompt   ("Module from Existing Sources" ) { toast(it) }\n                            separator(                               )\n                            action   ("Kotlin Class/File"            ) { toast(it) }\n                            action   ("File"                         ) { toast(it) }\n                            action   ("Scratch File"                 ) { toast(it) }\n                            action   ("Directory"                    ) { toast(it) }\n                            separator(                               )\n                            action   ("Driver and Data Source"       ) { toast(it) }\n                            action   ("Driver"                       ) { toast(it) }\n                            menu     ("ignore File"                  ) {\n                                action(".gitignore File (Git)"            ) { toast(it) }\n                                action(".bzrignore File (Bazaar)"         ) { toast(it) }\n                                action(".cfignore File (CloudFoundry)"    ) { toast(it) }\n                                action(".chefignore File (Chef)"          ) { toast(it) }\n                                action(".cvsignore File (CVs)"            ) { toast(it) }\n                                action(".boringignore File (Darcs)"       ) { toast(it) }\n                                action(".dockerignore File (Docker)"      ) { toast(it) }\n                                action(".ebignore File (ElasticBeanstalk)") { toast(it) }\n                            }\n                        }\n                        prompt   ("Open"                     ) { toast(it) }\n                        prompt   ("Open Source Code from URL") { toast(it) }\n                        action   ("Open Recent"              ) { toast(it) }\n                        separator(                           )\n                        menu     ("File Properties"          ) {\n                            action("File Encoding"           ) { toast(it) }\n                            action("Remove BOM"              ) { toast(it) }.apply { enabled = false }\n                            action("Add BOM"                 ) { toast(it) }\n                            prompt("Associate with File Type") { toast(it) }\n                            action("Make File Read-Only"     ) { toast(it) }\n                            menu  ("Line Separators"         ) {\n                                action("CRLF - Windows (rin)"    ) { toast(it) }\n                                action("LF - Unix and macOS (In)") { toast(it) }.apply { enabled = false }\n                                action("CR - Classic Mac OS (r)" ) { toast(it) }\n                            }\n                        }\n                        separator(                           )\n                        action   ("Save"                     ) { toast(it) }\n                        prompt   ("Save As"                  ) { toast(it) }\n                        action   ("Reload File from Disk"    ) { toast(it) }\n                        separator(                           )\n                        prompt   ("Print"                    ) { toast(it) }\n                    }\n\n                    allowPointerThrough         = true\n                    pointerOutsideModalChanged += clicked { completed(Unit) }\n\n                    // Show popup menu relative to button and keep it visible in the Display\n                    // as much as possible\n                    RelativeModal(popup, this@apply) { modal, button ->\n                        (modal.top     eq        button.bottom + 10) .. Strong\n                        (modal.top     greaterEq 5                 ) .. Strong\n                        (modal.left    greaterEq 5                 ) .. Strong\n                        (modal.bottom  lessEq    parent.bottom - 5 ) .. Strong\n                        (modal.centerX eq        button.center.x   ) .. Strong\n\n                        modal.right lessEq parent.right  - 5\n\n                        when {\n                            parent.height.readOnly - button.bottom > modal.height.readOnly + 15 -> modal.bottom lessEq parent.bottom -  5\n                            else                                                                -> modal.bottom lessEq button.y      - 10\n                        }\n\n                        modal.width.preserve\n                        modal.height.preserve\n                    }\n                }\n            }\n        }\n\n        Resizer(this)\n    }\n//sampleEnd\n}',$n="package controls\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.MenuFactoryModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.controls.popupmenu.MenuFactory\nimport io.nacular.doodle.core.Display\nimport org.kodein.di.instance\n\nclass MenuApp(display: Display, menus: MenuFactory): Application {\n    override fun shutdown() {}\n}\n\nfun menusModule() {\n//sampleStart\n    application(modules = listOf(MenuFactoryModule)) {\n        MenuApp(display = instance(), menus = instance())\n    }\n//sampleEnd\n}",Kn=[...Wn.SI];function Xn(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.M)(),...e.components};return c.m||Zn("api",!1),c.m.BasicMenuBehaviorModule||Zn("api.BasicMenuBehaviorModule",!0),c.m.BasicTheme||Zn("api.BasicTheme",!0),c.m.MenuBehavior||Zn("api.MenuBehavior",!0),c.m.MenuFactory||Zn("api.MenuFactory",!0),c.m.MenuFactoryModule||Zn("api.MenuFactoryModule",!0),c.m.ModalManager||Zn("api.ModalManager",!0),c.m.PopupManager||Zn("api.PopupManager",!0),c.m.Theme||Zn("api.Theme",!0),c.m.View||Zn("api.View",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Menu"})," is a ",(0,i.jsx)(c.m.View,{}),' that contains a vertical list of interactive items. These items notify whenever the user interacts with them using a pointer or the keyboard. This control support a couple types of action items and one that shows a new "sub" menu when the user interacts with it. You specify the contents of a ',(0,i.jsx)(n.code,{children:"Menu"})," using the ",(0,i.jsx)(c.m.MenuFactory,{}),", which provides a declarative DSL for defining the structure and behavior of Menus."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"Menu"})," implementation does not handle showing it as a popup. But this is easy to create using the ",(0,i.jsx)(c.m.PopupManager,{})," or ",(0,i.jsx)(c.m.ModalManager,{}),". The following app does just this. It has a button that shows a menu as a ",(0,i.jsx)(n.a,{href:"/docs/modals#modals",children:"modal"})," when clicked."]}),"\n",(0,i.jsx)(Wn.cp,{link:(0,i.jsx)(c.m.MenuFactoryModule,{}),module:$n}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsxs)(r.c,{value:"Demo",children:[(0,i.jsx)(s.u,{functionName:"menu",height:"400"}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Move the button around to see how the ",(0,i.jsx)(n.code,{children:"Menu"})," adjusts the location of its popups to keep them visible as much as possible."]})})]}),(0,i.jsxs)(r.c,{value:"Usage",children:[(0,i.jsx)(d.A,{children:Gn}),(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You also need to provide a ",(0,i.jsx)(c.m.MenuBehavior,{})," or use a ",(0,i.jsx)(c.m.Theme,{})," with one since ",(0,i.jsx)(n.code,{children:"Menu"})," delegates rendering. The example above uses ",(0,i.jsx)(c.m.BasicMenuBehaviorModule,{})," which is also available as a module within ",(0,i.jsx)(c.m.BasicTheme,{}),"."]})})]})]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"intellijMenu",height:"700"})}),(0,i.jsx)(r.c,{value:"Code",children:(0,i.jsx)(d.A,{children:Yn})})]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Menus work really well when shown as ",(0,i.jsx)(n.a,{href:"../modals#modals",children:"modals"})," via the ",(0,i.jsx)(c.m.ModalManager,{})]})})]})}function Jn(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(Xn,{...e})}):Xn(e)}function Zn(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const Qn='package controls\n\nimport io.nacular.doodle.accessibility.ImageRole\nimport io.nacular.doodle.controls.ListModel\nimport io.nacular.doodle.controls.SimpleListModel\nimport io.nacular.doodle.controls.carousel.Carousel\nimport io.nacular.doodle.controls.itemVisualizer\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.event.KeyCode.Companion.ArrowLeft\nimport io.nacular.doodle.event.KeyCode.Companion.ArrowRight\nimport io.nacular.doodle.event.KeyListener\nimport io.nacular.doodle.event.PointerListener\nimport io.nacular.doodle.event.PointerMotionListener\nimport io.nacular.doodle.focus.FocusManager\nimport io.nacular.doodle.geometry.Point.Companion.Origin\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.image.Image\nimport io.nacular.doodle.image.ImageLoader\nimport io.nacular.doodle.utils.Resizer\nimport io.nacular.doodle.utils.observable\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\n\nprivate class Photo(image: Image): View(accessibilityRole = ImageRole()) {\n    var image: Image by observable(image) { _,_ ->\n        update()\n    }\n\n    init {\n        enabled = false\n        update()\n    }\n\n    private fun update() {\n        size = image.size\n    }\n\n    override fun render(canvas: Canvas) {\n        canvas.image(image, destination = bounds.atOrigin)\n    }\n\n    override fun toString() = image.source\n}\n\n\nfun carouselExample(scope: CoroutineScope, images: ImageLoader, focusManager: FocusManager) {\n//sampleStart\n    scope.launch {\n        val model = SimpleListModel(listOf(1, 2, 3, 4,).map {\n            images.load("/images/carousel$it.jpg")!!\n        })\n\n        val carousel = Carousel<Image, ListModel<Image>>(model, itemVisualizer { item,previous,_ ->\n            when (previous) {\n                is Photo -> previous.apply    { image = item }\n                else     -> Photo(item).apply { image = item }\n            }\n        }).apply {\n            size = model[0].getOrThrow().size.run { Size(width * 0.85, height * 0.85) }\n\n            keyChanged += KeyListener.pressed {\n                when (it.code) {\n                    ArrowLeft  -> skip(-1)\n                    ArrowRight -> skip(1 )\n                }\n            }\n\n            var touchLocation = Origin\n\n            pointerChanged += PointerListener.on(\n                pressed = {\n                    touchLocation = toLocal(it.location, it.target)\n                    startManualMove()\n                    it.consume()\n                },\n                released = { completeManualMove()            },\n                clicked  = { focusManager.requestFocus(this) }\n            )\n\n            pointerMotionChanged += PointerMotionListener.dragged {\n                if (it.source == this) {\n                    moveManually(toLocal(it.location, it.target) - touchLocation)\n                    it.consume()\n                }\n            }\n\n            Resizer(this).apply {\n                movable = false\n            }\n        }\n    }\n//sampleEnd\n}';function eo(e){const n={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return c.m||oo("api",!1),c.m.CarouselBehavior||oo("api.CarouselBehavior",!0),c.m.CubePresenter||oo("api.CubePresenter",!0),c.m.DissolvePresenter||oo("api.DissolvePresenter",!0),c.m.DynamicCarousel||oo("api.DynamicCarousel",!0),c.m.DynamicListModel||oo("api.DynamicListModel",!0),c.m.FlipPresenter||oo("api.FlipPresenter",!0),c.m.ItemVisualizer||oo("api.ItemVisualizer",!0),c.m.LinearPresenter||oo("api.LinearPresenter",!0),c.m.ListModel||oo("api.ListModel",!0),c.m.Presenter||oo("api.Presenter",!0),c.m.ReflectionPresenter||oo("api.ReflectionPresenter",!0),c.m.SlicerPresenter||oo("api.SlicerPresenter",!0),c.m.Transitioner||oo("api.Transitioner",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Carousel"})," control is a visual analog to the list data structure. It is a ",(0,i.jsx)(n.strong,{children:"readonly"})," (see ",(0,i.jsx)(c.m.DynamicCarousel,{})," if you want one that responds to changes in a ",(0,i.jsx)(c.m.DynamicListModel,{}),"), ordered, generic collection of items with random\naccess to its members. It provides memory optimization by only rendering the contents displayed by its ",(0,i.jsx)(n.code,{children:"Presenter"}),", and recycling views as it scrolls. The result is that Carousels can hold extremely large data sets without impacting performance."]}),"\n",(0,i.jsxs)(n.p,{children:["You need ",(0,i.jsx)(n.strong,{children:"3 things"})," to create a Carousel: a ",(0,i.jsx)(c.m.ListModel,{}),", ",(0,i.jsx)(c.m.ItemVisualizer,{})," and ",(0,i.jsx)(c.m.CarouselBehavior,{}),". The model represents the data within the Carousel, and the visualizer provides a way to translate each item in the model to a ",(0,i.jsx)(n.code,{children:"View"})," that will be rendered within the Carousel. The behavior provides a ",(0,i.jsx)(c.m.Presenter,{})," and ",(0,i.jsx)(c.m.Transitioner,{}),", both of which are required to render the contents of a Carousel."]}),"\n",(0,i.jsxs)(n.p,{children:["Carousels are very flexible containers that can be fully customized via their ",(0,i.jsx)(n.code,{children:"Presenter"})," and ",(0,i.jsx)(n.code,{children:"Transitioner"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Presenter"}),"s decide what items are shown in the Carousel and specify their ",(0,i.jsx)(n.code,{children:"bounds"}),", ",(0,i.jsx)(n.code,{children:"transform"}),", ",(0,i.jsx)(n.code,{children:"opacity"}),", ",(0,i.jsx)(n.code,{children:"zOrder"})," etc.."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Transitioner"}),"s control how a Carousel moves between items."]}),"\n"]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"carousel",height:"500"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:Qn})})]}),"\n",(0,i.jsx)(n.p,{children:"Adjust the presenter used for the Carousel above to see examples of some very different behaviors that can be achieved. This demo uses the following built-in Presenters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(c.m.LinearPresenter,{}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(c.m.SlicerPresenter,{}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(c.m.FlipPresenter,{}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(c.m.CubePresenter,{}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(c.m.ReflectionPresenter,{}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(c.m.DissolvePresenter,{}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Presenter"}),"s can also add ",(0,i.jsx)(n.strong,{children:"Supplemental Views"})," to the Carousel to support the items generated from the model. The ",(0,i.jsx)(n.code,{children:"ReflectionPresenter"}),' does this to represent the "floor" where the items are reflected.']})}),"\n",(0,i.jsx)(n.h3,{id:"carousel-based-calendar",children:"Carousel-based Calendar"}),"\n",(0,i.jsxs)(n.p,{children:["The following shows a simple calendar built with a Carousel. The data model is a list of ",(0,i.jsx)(n.code,{children:"LocalDate"})," values at the start of each month. In this case a total of 10 years into the future is represented. The ",(0,i.jsx)(c.m.LinearPresenter,{})," is used with constraints that show 2 months side-by-side when the calendar is wide enough and only 1 month when it is too small."]}),"\n",(0,i.jsxs)(a.c,{children:[(0,i.jsx)(r.c,{value:"Demo",children:(0,i.jsx)(s.u,{functionName:"horizontalCalendar",height:"500"})}),(0,i.jsx)(r.c,{value:"Usage",children:(0,i.jsx)(d.A,{children:"\nval carousel = Carousel(\n    MonthModel(startDate .. endDate),\n    itemVisualizer { item, recycled, _ ->\n        // buttons and days-of-week are Views overlaid on the Carousel for simplicity\n        when (recycled) {\n            is NamedMonthPanel -> recycled.also { it.monthPanel.setDate(item) }\n            else               -> NamedMonthPanel(\n                item,\n                itemVisualizer { day, recycled, month ->\n                    when (recycled) {\n                        is CalendarDay -> recycled.apply { update(month, day) }\n                        else           -> CalendarDay(today, day, month, selectionModel)\n                    }\n                },\n                selectionModel = selectionModel, // Months all share the same SelectionModel\n            )\n        }\n    }\n).apply {\n    behavior = object: CarouselBehavior<LocalDate> {\n        // LinearPresenter controls how months are shown\n        override val presenter = LinearPresenter<LocalDate>(spacing = { MEDIUM_GAP }) {\n            it.left   eq 0\n            it.height eq parent.height\n\n            when {\n                parent.width.readOnly > singleMonthSize -> it.width eq kotlin.math.max(0.0, (parent.width - MEDIUM_GAP) / 2)\n                else                                    -> it.width eq parent.width\n            }\n        }\n\n\n        // tween animation between frames\n        override val transitioner = object: Transitioner<LocalDate> {\n            override fun transition(\n                carousel : Carousel<LocalDate, *>,\n                startItem: Int,\n                endItem  : Int,\n                update   : (progress: Float) -> Unit\n            ): Pausable = animate.invoke(0f to 1f, using = tweenFloat(easeInOutCubic, duration = 250 * milliseconds)) {\n                update(it)\n            }\n        }\n    }\n}\n"})})]})]})}function no(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(eo,{...e})}):eo(e)}function oo(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}const io={hide_title:!0,title:"Catalog"},to=void 0,ao={id:"ui_components/overview",title:"Catalog",description:"UI components",source:"@site/docs/ui_components/overview.mdx",sourceDirName:"ui_components",slug:"/ui_components/overview",permalink:"/doodle/docs/ui_components/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Catalog"},sidebar:"tutorialSidebar",previous:{title:"Themes",permalink:"/doodle/docs/themes"},next:{title:"Forms",permalink:"/doodle/docs/ui_components/form"}},ro={},lo=[{value:"UI components",id:"ui-components",level:2},...l.SI,{value:"<api.Label>Label</api.Label>",id:"label",level:2},{value:"<api.TextField>TextField</api.TextField>",id:"textfield",level:2},{value:"<api.PushButton>PushButton</api.PushButton>",id:"pushbutton",level:2},{value:"<api.ToggleButton>ToggleButton</api.ToggleButton>",id:"togglebutton",level:2},{value:"<api.CheckBox>CheckBox</api.CheckBox>",id:"checkbox",level:2},{value:"<api.RadioButton>RadioButton</api.RadioButton>",id:"radiobutton",level:2},{value:"<api.Switch>Switch</api.Switch>",id:"switch",level:2},{value:"<api.HyperLink>HyperLink</api.HyperLink>",id:"hyperlink",level:2},{value:"<api.FileSelector>FileSelector</api.FileSelector>",id:"fileselector",level:2},{value:"<api.Photo>Photo</api.Photo>",id:"photo",level:2},{value:"<api.LazyPhoto>LazyPhoto</api.LazyPhoto>",id:"lazyphoto",level:2},{value:"<api.ProgressBar>ProgressBar</api.ProgressBar>",id:"progressbar",level:2},{value:"<api.Slider>Slider</api.Slider>",id:"slider",level:2},{value:"Non-linearity",id:"non-linearity",level:4},{value:"<api.CircularSlider>CircularSlider</api.CircularSlider>",id:"circularslider",level:2},{value:"<api.RangeSlider>RangeSlider</api.RangeSlider>",id:"rangeslider",level:2},{value:"<api.CircularRangeSlider>CircularRangeSlider</api.CircularRangeSlider>",id:"circularrangeslider",level:2},{value:"<api.SpinButton>SpinButton</api.SpinButton>",id:"spinbutton",level:2},{value:"<api.SelectBox>SelectBox</api.SelectBox>",id:"selectbox",level:2},{value:"<api.Menu>Menu</api.Menu>",id:"menu",level:2},...Kn,{value:"<api.Carousel>Carousel</api.Carousel>",id:"carousel",level:2},{value:"Carousel-based Calendar",id:"carousel-based-calendar",level:3},{value:"<api.StarRater>StarRater</api.StarRater>",id:"starrater",level:2},{value:"<api.List>List</api.List>",id:"list",level:2},{value:"<api.Table>Table</api.Table>",id:"table",level:2},{value:"<api.MutableTable>MutableTable</api.MutableTable>",id:"mutabletable",level:2},{value:"<api.KeyValueTable>KeyValueTable</api.KeyValueTable>",id:"keyvaluetable",level:2},{value:"<api.Tree>Tree</api.Tree>",id:"tree",level:2},{value:"<api.TreeTable>TreeTable</api.TreeTable>",id:"treetable",level:2},{value:"<api.GridPanel>GridPanel</api.GridPanel>",id:"gridpanel",level:2},{value:"<api.SplitPanel>SplitPanel</api.SplitPanel>",id:"splitpanel",level:2},{value:"<api.TabbedPanel>TabbedPanel</api.TabbedPanel>",id:"tabbedpanel",level:2},{value:"<api.ColorPicker>ColorPicker</api.ColorPicker>",id:"colorpicker",level:2},{value:"<api.MonthPanel>MonthPanel</api.MonthPanel>",id:"monthpanel",level:2},{value:"<api.DaysOfTheWeekPanel>DaysOfTheWeekPanel</api.DaysOfTheWeekPanel>",id:"daysoftheweekpanel",level:2},{value:"Custom Calendar",id:"custom-calendar",level:2},{value:"<api.Form>Form</api.Form>",id:"form",level:2}];function so(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",strong:"strong",...(0,t.M)(),...e.components};return c.m||po("api",!1),c.m.Behavior||po("api.Behavior",!0),c.m.Carousel||po("api.Carousel",!0),c.m.CheckBox||po("api.CheckBox",!0),c.m.CircularRangeSlider||po("api.CircularRangeSlider",!0),c.m.CircularSlider||po("api.CircularSlider",!0),c.m.ColorPicker||po("api.ColorPicker",!0),c.m.ControlsLibrary||po("api.ControlsLibrary",!0),c.m.DaysOfTheWeekPanel||po("api.DaysOfTheWeekPanel",!0),c.m.FileSelector||po("api.FileSelector",!0),c.m.Form||po("api.Form",!0),c.m.GridPanel||po("api.GridPanel",!0),c.m.HyperLink||po("api.HyperLink",!0),c.m.KeyValueTable||po("api.KeyValueTable",!0),c.m.Label||po("api.Label",!0),c.m.LazyPhoto||po("api.LazyPhoto",!0),c.m.List||po("api.List",!0),c.m.Menu||po("api.Menu",!0),c.m.MonthPanel||po("api.MonthPanel",!0),c.m.MutableTable||po("api.MutableTable",!0),c.m.Photo||po("api.Photo",!0),c.m.ProgressBar||po("api.ProgressBar",!0),c.m.PushButton||po("api.PushButton",!0),c.m.RadioButton||po("api.RadioButton",!0),c.m.RangeSlider||po("api.RangeSlider",!0),c.m.SelectBox||po("api.SelectBox",!0),c.m.Slider||po("api.Slider",!0),c.m.SpinButton||po("api.SpinButton",!0),c.m.SplitPanel||po("api.SplitPanel",!0),c.m.StarRater||po("api.StarRater",!0),c.m.Switch||po("api.Switch",!0),c.m.TabbedPanel||po("api.TabbedPanel",!0),c.m.Table||po("api.Table",!0),c.m.TextField||po("api.TextField",!0),c.m.ToggleButton||po("api.ToggleButton",!0),c.m.Tree||po("api.Tree",!0),c.m.TreeTable||po("api.TreeTable",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"ui-components",children:"UI components"}),"\n",(0,i.jsxs)(n.p,{children:["Doodle has several UI components in the ",(0,i.jsx)(n.code,{children:"controls"})," library that range from the simple (buttons, text-fields), to the complex (like lists and carousels). Below is a selection of the most common ones."]}),"\n",(0,i.jsx)(l.cp,{link:(0,i.jsx)(c.m.ControlsLibrary,{}),kotlin:m.c,groovy:p.c}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Most of these components rely entirely on their ",(0,i.jsx)(c.m.Behavior,{})," for rendering. And, they do not implement default behavior themselves to minimize bundle size. So you need to specify behaviors explicitly or use a ",(0,i.jsx)(n.a,{href:"/doodle/docs/themes",children:(0,i.jsx)(n.strong,{children:"Theme"})})," that provides them for the controls you use."]})}),"\n",(0,i.jsx)(n.h2,{id:"label",children:(0,i.jsx)(c.m.Label,{children:"Label"})}),"\n",(0,i.jsx)(g,{}),"\n",(0,i.jsx)(n.h2,{id:"textfield",children:(0,i.jsx)(c.m.TextField,{children:"TextField"})}),"\n",(0,i.jsx)(w,{}),"\n",(0,i.jsx)(n.h2,{id:"pushbutton",children:(0,i.jsx)(c.m.PushButton,{children:"PushButton"})}),"\n",(0,i.jsx)(M,{}),"\n",(0,i.jsx)(n.h2,{id:"togglebutton",children:(0,i.jsx)(c.m.ToggleButton,{children:"ToggleButton"})}),"\n",(0,i.jsx)(z,{}),"\n",(0,i.jsx)(n.h2,{id:"checkbox",children:(0,i.jsx)(c.m.CheckBox,{children:"CheckBox"})}),"\n",(0,i.jsx)(D,{}),"\n",(0,i.jsx)(n.h2,{id:"radiobutton",children:(0,i.jsx)(c.m.RadioButton,{children:"RadioButton"})}),"\n",(0,i.jsx)(A,{}),"\n",(0,i.jsx)(n.h2,{id:"switch",children:(0,i.jsx)(c.m.Switch,{children:"Switch"})}),"\n",(0,i.jsx)(U,{}),"\n",(0,i.jsx)(n.h2,{id:"hyperlink",children:(0,i.jsx)(c.m.HyperLink,{children:"HyperLink"})}),"\n",(0,i.jsx)(G,{}),"\n",(0,i.jsx)(n.h2,{id:"fileselector",children:(0,i.jsx)(c.m.FileSelector,{children:"FileSelector"})}),"\n",(0,i.jsx)(Z,{}),"\n",(0,i.jsx)(n.h2,{id:"photo",children:(0,i.jsx)(c.m.Photo,{children:"Photo"})}),"\n",(0,i.jsx)(oe,{}),"\n",(0,i.jsx)(n.h2,{id:"lazyphoto",children:(0,i.jsx)(c.m.LazyPhoto,{children:"LazyPhoto"})}),"\n",(0,i.jsx)(ae,{}),"\n",(0,i.jsx)(n.h2,{id:"progressbar",children:(0,i.jsx)(c.m.ProgressBar,{children:"ProgressBar"})}),"\n",(0,i.jsx)(pe,{}),"\n",(0,i.jsx)(n.h2,{id:"slider",children:(0,i.jsx)(c.m.Slider,{children:"Slider"})}),"\n",(0,i.jsx)(ge,{}),"\n",(0,i.jsx)(n.h2,{id:"circularslider",children:(0,i.jsx)(c.m.CircularSlider,{children:"CircularSlider"})}),"\n",(0,i.jsx)(fe,{}),"\n",(0,i.jsx)(n.h2,{id:"rangeslider",children:(0,i.jsx)(c.m.RangeSlider,{children:"RangeSlider"})}),"\n",(0,i.jsx)(Te,{}),"\n",(0,i.jsx)(n.h2,{id:"circularrangeslider",children:(0,i.jsx)(c.m.CircularRangeSlider,{children:"CircularRangeSlider"})}),"\n",(0,i.jsx)(Ce,{}),"\n",(0,i.jsx)(n.h2,{id:"spinbutton",children:(0,i.jsx)(c.m.SpinButton,{children:"SpinButton"})}),"\n",(0,i.jsx)(De,{}),"\n",(0,i.jsx)(n.h2,{id:"selectbox",children:(0,i.jsx)(c.m.SelectBox,{children:"SelectBox"})}),"\n",(0,i.jsx)(Re,{}),"\n",(0,i.jsx)(n.h2,{id:"menu",children:(0,i.jsx)(c.m.Menu,{children:"Menu"})}),"\n",(0,i.jsx)(Jn,{}),"\n",(0,i.jsx)(n.h2,{id:"carousel",children:(0,i.jsx)(c.m.Carousel,{children:"Carousel"})}),"\n",(0,i.jsx)(no,{}),"\n",(0,i.jsx)(n.h2,{id:"starrater",children:(0,i.jsx)(c.m.StarRater,{children:"StarRater"})}),"\n",(0,i.jsx)(_e,{}),"\n",(0,i.jsx)(n.h2,{id:"list",children:(0,i.jsx)(c.m.List,{children:"List"})}),"\n",(0,i.jsx)(Ye,{}),"\n",(0,i.jsx)(n.h2,{id:"table",children:(0,i.jsx)(c.m.Table,{children:"Table"})}),"\n",(0,i.jsx)(rn,{}),"\n",(0,i.jsx)(n.h2,{id:"mutabletable",children:(0,i.jsx)(c.m.MutableTable,{children:"MutableTable"})}),"\n",(0,i.jsx)(cn,{}),"\n",(0,i.jsx)(n.h2,{id:"keyvaluetable",children:(0,i.jsx)(c.m.KeyValueTable,{children:"KeyValueTable"})}),"\n",(0,i.jsx)(hn,{}),"\n",(0,i.jsx)(n.h2,{id:"tree",children:(0,i.jsx)(c.m.Tree,{children:"Tree"})}),"\n",(0,i.jsx)(Je,{}),"\n",(0,i.jsx)(n.h2,{id:"treetable",children:(0,i.jsx)(c.m.TreeTable,{children:"TreeTable"})}),"\n",(0,i.jsx)(nn,{}),"\n",(0,i.jsx)(n.h2,{id:"gridpanel",children:(0,i.jsx)(c.m.GridPanel,{children:"GridPanel"})}),"\n",(0,i.jsx)(jn,{}),"\n",(0,i.jsx)(n.h2,{id:"splitpanel",children:(0,i.jsx)(c.m.SplitPanel,{children:"SplitPanel"})}),"\n",(0,i.jsx)(wn,{}),"\n",(0,i.jsx)(n.h2,{id:"tabbedpanel",children:(0,i.jsx)(c.m.TabbedPanel,{children:"TabbedPanel"})}),"\n",(0,i.jsx)(Mn,{}),"\n",(0,i.jsx)(n.h2,{id:"colorpicker",children:(0,i.jsx)(c.m.ColorPicker,{children:"ColorPicker"})}),"\n",(0,i.jsx)(zn,{}),"\n",(0,i.jsx)(n.h2,{id:"monthpanel",children:(0,i.jsx)(c.m.MonthPanel,{children:"MonthPanel"})}),"\n",(0,i.jsx)(Dn,{}),"\n",(0,i.jsx)(n.h2,{id:"daysoftheweekpanel",children:(0,i.jsx)(c.m.DaysOfTheWeekPanel,{children:"DaysOfTheWeekPanel"})}),"\n",(0,i.jsx)(En,{}),"\n",(0,i.jsx)(n.h2,{id:"custom-calendar",children:"Custom Calendar"}),"\n",(0,i.jsx)(On,{}),"\n",(0,i.jsx)(n.h2,{id:"form",children:(0,i.jsx)(c.m.Form,{children:"Form"})}),"\n",(0,i.jsx)(qn,{})]})}function co(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(so,{...e})}):so(e)}function po(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},5600:(e,n,o)=>{o.d(n,{c:()=>i});const i='package controls\n\nimport controls.Gender.Female\nimport controls.Gender.Male\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.controls.form.Form\nimport io.nacular.doodle.controls.form.LabeledConfig\nimport io.nacular.doodle.controls.form.TextFieldConfig\nimport io.nacular.doodle.controls.form.form\nimport io.nacular.doodle.controls.form.labeled\nimport io.nacular.doodle.controls.form.radioList\nimport io.nacular.doodle.controls.form.textField\nimport io.nacular.doodle.controls.form.verticalLayout\nimport io.nacular.doodle.controls.text.TextField.Purpose\nimport io.nacular.doodle.controls.text.TextField.Purpose.Integer\nimport io.nacular.doodle.controls.text.TextField.Purpose.Text\nimport io.nacular.doodle.drawing.Color.Companion.Red\nimport io.nacular.doodle.drawing.Font\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.text.StyledText\nimport io.nacular.doodle.text.invoke\nimport io.nacular.doodle.utils.ToStringIntEncoder\n\nenum class Gender { Male, Female }\n\nfun form(smallFont: Font) {\n    fun <T> LabeledConfig.textFieldConfig(\n        placeHolder: String      = "",\n        purpose    : Purpose     = Text,\n        errorText  : StyledText? = null\n    ): TextFieldConfig<T>.() -> Unit = {\n        val initialHelperText = help.styledText\n\n        help.font             = smallFont\n        textField.placeHolder = placeHolder\n        textField.purpose     = purpose\n        onValid               = { help.styledText = initialHelperText }\n        onInvalid             = {\n            if (!textField.hasFocus) {\n                help.styledText = errorText ?: it.message?.let { Red(it) } ?: help.styledText\n            }\n        }\n    }\n\n    val submit = PushButton("Submit").apply {\n        enabled = false\n        size = Size(100, 32)\n    }\n\n    val twoDigitNumber = Regex("^1[0-5]\\\\d|^[1-9]\\\\d|^[1-9]")\n\n//sampleStart\n    val form = Form { this(\n        +labeled("Name", help = "3+ letters") {\n            textField(Regex(".{3,}"), config = textFieldConfig("Enter your name"))\n        },\n        +labeled("Age", help = "1 or 2 digit number") {\n            textField(twoDigitNumber, ToStringIntEncoder, config = textFieldConfig(purpose = Integer))\n        },\n        Female to labeled("Gender") { radioList(Male, Female) { spacing = 12.0 } },\n        +form { this(\n            +labeled("Text [Sub-form]", help = "Can be blank") {\n                textField(Regex(".*"), config = textFieldConfig())\n            },\n            +labeled("Number [Sub-form]", help = "1 to 10") {\n                textField(\n                    twoDigitNumber,\n                    ToStringIntEncoder,\n                    validator = { it <= 10 },\n                    config    = textFieldConfig(purpose = Integer)\n                )\n            }\n        ) { first, second ->\n            // nested Form creates a Pair<String, Int>\n            first to second\n        } },\n        onInvalid = { submit.enabled = false },\n    ) { name, age, gender, pair ->\n        submit.enabled = true\n        println("[Form valid] Name: $name, Age: $age, Gender: $gender, Sub-form: $pair") // <---- check console for output\n    } }.apply {\n        // configure the Form view itself\n        size      = Size(300, 100)\n        layout    = verticalLayout(this, spacing = 12.0, itemHeight = 32.0)\n        focusable = false\n    }\n//sampleEnd\n}'},9656:(e,n,o)=>{o.d(n,{c:()=>i});const i="package controls\n\nimport io.nacular.doodle.controls.range.InvertibleFunction\nimport io.nacular.doodle.controls.range.Slider\nimport kotlin.math.log\nimport kotlin.math.pow\n\n//sampleStart\n/**\n * Logarithmic function and inverse https://www.desmos.com/calculator/qq59ey0bub\n */\nprivate object LogFunction: InvertibleFunction {\n    override fun invoke (value: Float) = log((10f - 1) * value + 1, 10f)\n    override fun inverse(value: Float) = (10f.pow(value) - 1)/(10 - 1)\n}\n\nval logarithmicSlider = Slider(0.0 .. 1.0, function = LogFunction)\n//sampleEnd"},9504:(e,n,o)=>{o.d(n,{c:()=>i});const i='//sampleStart\ndependencies {\n    implementation "io.nacular.doodle:controls:$doodle_version"\n}\n//sampleEnd'},7112:(e,n,o)=>{o.d(n,{c:()=>i});const i='dependencies {\n    implementation ("io.nacular.doodle:controls:$doodleVersion")\n}'}}]);