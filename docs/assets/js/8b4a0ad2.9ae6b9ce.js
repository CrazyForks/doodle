"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[407],{8482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>w,frontMatter:()=>s,metadata:()=>m,toc:()=>v});var o=n(7462),i=(n(7294),n(3905)),r=(n(8209),n(1912)),a=n(1166);const p="package pointerinput\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.event.PointerEvent\nimport io.nacular.doodle.event.PointerMotionListener\nimport io.nacular.doodle.event.PointerMotionListener.Companion.moved\nimport io.nacular.doodle.event.PointerMotionListener.Companion.on\n\nfun pointerMotion(view: View) {\n//sampleStart\n    // Listen to moved/dragged via interface override\n    view.pointerMotionChanged += object: PointerMotionListener {\n        override fun moved(event: PointerEvent) {\n            // ..\n        }\n\n        override fun dragged(event: PointerEvent) {\n            // ..\n        }\n    }\n\n    // Listener to moved via DSL\n    view.pointerMotionChanged += moved { event -> /* .. */ }\n\n    // Listen to moved/dragged via DSL\n    view.pointerMotionChanged += on(\n        moved   = { event -> /* .. */ },\n        dragged = { event -> /* .. */ },\n    )\n//sampleEnd\n}",d="package pointerinput\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.event.PointerMotionListener.Companion.moved\n\nfun motionFilter(view: View) {\n//sampleStart\n    view.pointerMotionFilter += moved { event ->\n        // called whenever a pointer is pressed on this\n        // View or its children, before the target child\n        // is notified\n    }\n//sampleEnd\n}\n",s={hide_title:!0},l="Pointer Motion Events",m={unversionedId:"pointer_input/pointermotion",id:"pointer_input/pointermotion",title:"Pointer Motion Events",description:"Pointer motion events occur whenever a pointer moves within a View. They are treated separately from pointer events because of their high frequency. The PointerModule is also required to enable them. And hit detection follows the same rules as with pointer events.",source:"@site/docs/pointer_input/pointermotion.mdx",sourceDirName:"pointer_input",slug:"/pointer_input/pointermotion",permalink:"/doodle/docs/pointer_input/pointermotion",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/doodle/docs/pointer_input/overview"},next:{title:"Multi-touch Support",permalink:"/doodle/docs/pointer_input/multitouch"}},u={},v=[],c={toc:v},h="wrapper";function w(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pointer-motion-events"},"Pointer Motion Events"),(0,i.kt)("p",null,"Pointer motion events occur whenever a pointer moves within a View. They are treated separately from ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview"},(0,i.kt)("strong",{parentName:"a"},"pointer events"))," because of their high frequency. The ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview"},(0,i.kt)("inlineCode",{parentName:"a"},"PointerModule"))," is also required to enable them. And ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview#hit-detection"},(0,i.kt)("strong",{parentName:"a"},"hit detection"))," follows the same rules as with pointer events."),(0,i.kt)("p",null,"Registration is different though. You use listen to ",(0,i.kt)(a.i0n,null)," and implement ",(0,i.kt)(a.JTf,null),"."),(0,i.kt)("p",null,"Pointer motion listeners are notified whenever a pointer:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Moves")," within a View"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Drags")," anywhere while pressed, if the press started in a View")),(0,i.kt)(r.O,{mdxType:"KPlayground"},p),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also ",(0,i.kt)("a",{parentName:"p",href:"overview#event-filtering"},(0,i.kt)("strong",{parentName:"a"},"filter"))," motion events in a similar way to regular pointer events."),(0,i.kt)(r.O,{mdxType:"KPlayground"},d)))}w.isMDXComponent=!0}}]);