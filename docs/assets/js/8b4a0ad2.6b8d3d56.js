"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[407],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3018:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return s}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],p={hide_title:!0},l="Pointer Motion Events",u={unversionedId:"pointer_input/pointermotion",id:"pointer_input/pointermotion",title:"Pointer Motion Events",description:"Pointer motion events occur whenever a pointer moves within a View. They are treated separately from pointer events",source:"@site/docs/pointer_input/pointermotion.mdx",sourceDirName:"pointer_input",slug:"/pointer_input/pointermotion",permalink:"/doodle/docs/pointer_input/pointermotion",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Pointer Input Overview",permalink:"/doodle/docs/pointer_input/overview"},next:{title:"Multi-touch Support",permalink:"/doodle/docs/pointer_input/multitouch"}},c={},s=[],d={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pointer-motion-events"},"Pointer Motion Events"),(0,i.kt)("p",null,"Pointer motion events occur whenever a pointer moves within a View. They are treated separately from ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview"},(0,i.kt)("strong",{parentName:"a"},"pointer events")),"\nbecause of their high frequency. The ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview"},(0,i.kt)("inlineCode",{parentName:"a"},"PointerModule"))," is also required to enable them.\nAnd ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview#hit-detection"},(0,i.kt)("strong",{parentName:"a"},"hit detection"))," follows the same rules as with pointer events."),(0,i.kt)("p",null,"Registration is different though. You use listen to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L309"},(0,i.kt)("inlineCode",{parentName:"a"},"pointerMotionChanged")),"\nproperty and implement ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/event/PointerMotionListener.kt#L4"},(0,i.kt)("inlineCode",{parentName:"a"},"PointerMotionListener")),"."),(0,i.kt)("p",null,"Pointer motion listeners are notified whenever a pointer:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Moves")," within a View"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Drags")," anywhere while pressed, if the press started in a View")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"view.pointerMotionChanged += object: PointerMotionListener {\n    override fun pointerMoved(event: PointerEvent) {\n        // ..\n    }\n\n    override fun pointerDragged(event: PointerEvent) {\n        // ..\n    }\n}\n")),(0,i.kt)("p",null,"There are also short-hand functions for cases where you only consume one of the events."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"view.pointerMotionChanged += moved { event: PointerEvent ->\n    // ..\n}\n")))}m.isMDXComponent=!0}}]);