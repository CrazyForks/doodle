package com.nectar.doodle.deviceinputimport com.nectar.doodle.controls.panels.ScrollPanelimport com.nectar.doodle.core.Displayimport com.nectar.doodle.core.Viewimport com.nectar.doodle.event.PointerEventimport com.nectar.doodle.event.withimport com.nectar.doodle.system.Cursorimport com.nectar.doodle.system.Cursor.Companion.Defaultimport com.nectar.doodle.system.PointerInputServiceimport com.nectar.doodle.system.SystemPointerEventimport com.nectar.doodle.system.SystemPointerEvent.Typeimport com.nectar.doodle.system.SystemPointerEvent.Type.Clickimport com.nectar.doodle.system.SystemPointerEvent.Type.Downimport com.nectar.doodle.system.SystemPointerEvent.Type.Dragimport com.nectar.doodle.system.SystemPointerEvent.Type.Enterimport com.nectar.doodle.system.SystemPointerEvent.Type.Exitimport com.nectar.doodle.system.SystemPointerEvent.Type.Moveimport com.nectar.doodle.system.SystemPointerEvent.Type.Upinterface PointerInputManager {    fun shutdown()}@Suppress("NestedLambdaShadowedImplicitParameter")class PointerInputManagerImpl(private val display: Display, private val inputService: PointerInputService, private val viewFinder: ViewFinder): PointerInputManager, PointerInputService.Listener {    private var pointerDown   = false    private var clickedView = null as View?    private var coveredView = null as View?        set(new) {            if (new == field) {                return            }            field?.let { unregisterCursorListeners(it) }            field = new            field?.let { registerCursorListeners  (it) }        }    private var cursor = null as Cursor?        set(new) {            field = new            inputService.cursor = cursor ?: display.cursor ?: Default        }    private var toolTipText = ""        set(new) {            field = new            inputService.toolTipText = field        }    private val displayCursorChanged = { _: Display, _: Cursor?, new: Cursor? -> cursor = new }    private val viewCursorChanged = { view: View, _: Cursor?, _: Cursor? ->        cursor = cursor(of = view)    }    init {        inputService += this        display.cursorChanged += displayCursorChanged        cursor = display.cursor    }    override fun shutdown() {        inputService -= this        display.cursorChanged -= displayCursorChanged    }    override fun changed(event: SystemPointerEvent) {        when (event.type) {            Up -> when(event.clickCount) {                1    -> pointerUp(event)                else -> doubleClick(event)            }            Move -> pointerMove(event)            Down -> pointerDown(event)            else -> {}        }    }    private fun pointerUp(event: SystemPointerEvent) {        val view = view(from = event)        if (clickedView != null || pointerDown) {            clickedView?.let {                deliver(createPointerEvent(event, it))                if (view === it) {                    deliver(createPointerEvent(event, it, Click))                }                event.consume()            }            if (view !== clickedView) {                clickedView?.let {                    // Avoid case where pointer-move hasn't been seen (possible if drag-drop happened)                    if (coveredView == it) {                        coveredView = null                        deliver(createPointerEvent(event, it, Exit))                    }                }                if (view != null) {                    coveredView = view                    deliver(createPointerEvent(event, view, Enter))                    deliver(createPointerEvent(event, view, Up   ))                    cursor = cursor(of = view)                    event.consume()                } else {                    cursor = display.cursor                }            } else {                cursor = cursor(of = view)            }            clickedView = null        } else if (view != null) {            deliver(createPointerEvent(event, view, Enter))            deliver(createPointerEvent(event, view       ))            cursor = cursor(of = view)            event.consume()        } else {            cursor = display.cursor        }        pointerDown = false    }    private fun pointerDown(event: SystemPointerEvent) {        toolTipText = ""        view(from = event)?.let { view ->            if (view != coveredView) {                createPointerEvent(event, view, Enter).also {                    deliver(it)                    toolTipText = view.toolTipText(it)                }                coveredView = view                cursor      = cursor(of = coveredView)            }            deliver(createPointerEvent(event, view))            clickedView = view            event.consume()        }        pointerDown = true    }    private fun doubleClick(event: SystemPointerEvent) {        toolTipText = ""        view(from = event)?.let {            deliver(createPointerEvent(event, it, Up   ))            deliver(createPointerEvent(event, it, Click))            event.consume()        }    }    private fun pointerMove(event: SystemPointerEvent) {        clickedView?.let {            deliver(createPointerEvent(event, it, Drag))            cursor = cursor(of = it)            event.consume()        }        val view = view(from = event)        if (view !== coveredView) {            coveredView?.let {                if (!pointerDown || it === clickedView) {                    deliver(createPointerEvent(event, it, Exit))                    event.consume()                }            }            coveredView = view            if (view != null) {                if (!pointerDown || view === clickedView) {                    createPointerEvent(event, view, Enter).also {                        deliver(it)                        toolTipText = view.toolTipText(it)                    }                    cursor = cursor(of = coveredView)                    event.consume()                }            } else if (clickedView == null) {                toolTipText = ""                cursor = null            }        } else if (!pointerDown) {            coveredView?.let {                deliver(createPointerEvent(event, it, Move))                event.consume()            }            if (coveredView == null) {                toolTipText = ""            }            cursor = cursor(of = coveredView)        }    }    private fun deliver(event: PointerEvent) {        val chain = mutableListOf(event.target)        var view = event.target.parent        while (view != null) {            if (view.enabled && view.visible) {                chain += view            }            view = view.parent        }        // Sinking        chain.asReversed().forEach {            val newEvent = event.with(source = it)            when (newEvent.type) {                Move, Drag -> it.filterPointerMotionEvent_(newEvent)                else       -> it.filterPointerEvent_      (newEvent)            }            if (newEvent.consumed) {                return            }        }        // Floating        chain.forEach {            val newEvent = event.with(source = it)            when (newEvent.type) {                Move, Drag -> it.handlePointerMotionEvent_(newEvent)                else       -> it.handlePointerEvent_      (newEvent)            }            if (newEvent.consumed) {                return            }        }    }    private fun registerCursorListeners(view: View) {        var value: View? = view        while (value != null) {            value.cursorChanged += viewCursorChanged            if (value.cursor != null) {                break            } else {                value = value.parent            }        }    }    private fun unregisterCursorListeners(view: View) {        var value: View? = view        while (value != null) {            value.cursorChanged -= viewCursorChanged            value = value.parent        }    }    private fun cursor(of: View?) = when (display.cursor) {        null -> of?.cursor        else -> display.cursor    }    private fun view(from: SystemPointerEvent): View? {        var view = viewFinder.find(from.location)        return view?.let {            if (from.nativeScrollPanel) {                while(view != null && view !is ScrollPanel) {                    view = view?.parent                }            }            view        }    }    private fun createPointerEvent(event: SystemPointerEvent, target: View, type: Type = event.type) = PointerEvent(            target,            target,            type,            target.fromAbsolute(event.location),            event.buttons,            event.clickCount,            event.modifiers)}