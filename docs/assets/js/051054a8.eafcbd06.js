"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[862],{2978:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>m,default:()=>y,frontMatter:()=>u,metadata:()=>c,toc:()=>w});var o=t(7462),i=(t(7294),t(3905)),a=(t(8209),t(4866),t(5162),t(4903)),s=t(1912),l=t(1166);const r="import io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.geometry.Size\n\nfun positioning(display: Display) {\n//sampleStart\n    val panel = view { size = Size(100) }\n\n    display += panel // panel's position is 0,0\n//sampleEnd\n}",d="import io.nacular.doodle.core.View\nimport io.nacular.doodle.geometry.Rectangle\nimport io.nacular.doodle.utils.Resizer\n\nfun resizer(view: View) {\n//sampleStart\n    view.apply {\n        bounds = Rectangle(100, 100)\n        Resizer(this) // monitors the View and manages resize/move\n    }\n//sampleEnd\n}",p="\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.geometry.Point\n\nfun manualPositioning(view: View) {\n//sampleStart\n    view.x        = 10.0          // move to       [10, 0]\n    view.position = Point(13, -2) // reposition to [13,-2]\n//sampleEnd\n}",u={hide_title:!0},m="Positioning",c={unversionedId:"layout/overview",id:"layout/overview",title:"Positioning",description:"Every View has an ,  position (in pixels) relative to its parent. This is exactly where the View will be rendered--unless it (or an ancestor) also has a . Doodle ensures that there is never a disconnect between a View's ,  and render coordinates.",source:"@site/docs/layout/overview.mdx",sourceDirName:"layout",slug:"/layout/overview",permalink:"/doodle/docs/layout/overview",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Behaviors",permalink:"/doodle/docs/rendering/behaviors"},next:{title:"Using Layouts",permalink:"/doodle/docs/layout/layouts"}},h={},w=[{value:"Manual positioning",id:"manual-positioning",level:2},{value:"Transforms",id:"transforms",level:2}],k={toc:w},v="wrapper";function y(e){let{components:n,...t}=e;return(0,i.kt)(v,(0,o.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"positioning"},"Positioning"),(0,i.kt)("p",null,"Every View has an ",(0,i.kt)(l.V1i,null),", ",(0,i.kt)(l.km8,null)," position (in pixels) relative to its parent. This is exactly where the View will be rendered--unless it (or an ancestor) also has a ",(0,i.kt)(l.X8Q,null),". Doodle ensures that there is never a disconnect between a View's ",(0,i.kt)(l.kCW,null),", ",(0,i.kt)(l.X8Q,null)," and render coordinates."),(0,i.kt)(s.O,{mdxType:"KPlayground"},r),(0,i.kt)("h2",{id:"manual-positioning"},"Manual positioning"),(0,i.kt)("p",null,"You can set the View's ",(0,i.kt)(l.V1i,null),", ",(0,i.kt)(l.km8,null),", or ",(0,i.kt)(l.kCW,null)," directly to move it around. These are proxies to the View's ",(0,i.kt)(l.fzW,null),", which represents its rectangular boundary relative to its parent."),(0,i.kt)(s.O,{mdxType:"KPlayground"},p),(0,i.kt)(a.l,{functionName:"positioning",height:"400",mdxType:"DoodleApp"}),(0,i.kt)("p",null,"This demo shows how the pointer can be used to position Views easily. In this case, we use the ",(0,i.kt)(l.w_I,null)," utility to provide simple resize/move operations. The Resizer simply monitors the View for Pointer events and updates its ",(0,i.kt)("inlineCode",{parentName:"p"},"bounds")," accordingly."),(0,i.kt)(s.O,{mdxType:"KPlayground"},d),(0,i.kt)("h2",{id:"transforms"},"Transforms"),(0,i.kt)("p",null,"Views can also have\n",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/transforms"},"transformations")," to change how they are displayed. A transformed View still retains the same ",(0,i.kt)(l.fzW,null),", but its ",(0,i.kt)(l.OPh,null)," changes, since it reflects the smallest rectangle that encloses the View's ",(0,i.kt)("strong",{parentName:"p"},"transformed")," bounds."),(0,i.kt)(a.l,{functionName:"transforms",height:"400",mdxType:"DoodleApp"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"boundingBox")," == ",(0,i.kt)("inlineCode",{parentName:"p"},"bounds")," when ",(0,i.kt)(l.X8Q,null)," == ",(0,i.kt)(l.iJz,null),".")))}y.isMDXComponent=!0}}]);