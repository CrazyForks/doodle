"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[677],{3588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var i=n(7462),a=(n(7294),n(3905)),o=(n(8209),n(5488),n(5162),n(4996),n(4903));const l={hide_title:!0,title:"Where's My View?",description:"Top-level Views are shown using the Display object"},s="Where's my view?",r={unversionedId:"display/gotchas",id:"display/gotchas",title:"Where's My View?",description:"Top-level Views are shown using the Display object",source:"@site/docs/display/gotchas.mdx",sourceDirName:"display",slug:"/display/gotchas",permalink:"/doodle/docs/display/gotchas",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Where's My View?",description:"Top-level Views are shown using the Display object"},sidebar:"tutorialSidebar",previous:{title:"The Display",permalink:"/doodle/docs/display/overview"},next:{title:"Positioning",permalink:"/doodle/docs/layout/overview"}},d={},p=[{value:"Where is my Button?",id:"where-is-my-button",level:2},{value:"Setting a Behavior fixes the button",id:"setting-a-behavior-fixes-the-button",level:2},{value:"A Theme could also be used",id:"a-theme-could-also-be-used",level:2}],h={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wheres-my-view"},"Where's my view?"),(0,a.kt)("p",null,"The following app has a single top-level view that fills the Display and draws a centered circle."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SimpleCircle(display: Display): Application {\n    init {\n        display += view {\n            size   = display.size\n            render = {\n                circle(Circle(\n                    center = display.center,\n                    radius = min(display.width, display.height) / 2 - 10\n                ), fill = Red.paint)\n            }\n        }\n\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application {\n        SimpleCircle(display = instance())\n    }\n}\n")),(0,a.kt)(o.l,{functionName:"simpleCircle",height:"200",mdxType:"DoodleApp"}),(0,a.kt)("h2",{id:"where-is-my-button"},"Where is my Button?"),(0,a.kt)("p",null,"Now we try the same thing with a ","[",(0,a.kt)("inlineCode",{parentName:"p"},"PushButton"),"]",". The following code feels like it should work; but it doesn't."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class InvisibleButton(display: Display): Application {\n    init {\n        display += PushButton().apply { size = Size(40, 20) }\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application {\n        InvisibleButton(display = instance())\n    }\n}\n")),(0,a.kt)(o.l,{functionName:"invisibleButton",height:"200",mdxType:"DoodleApp"}),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"The above examples does not render anything because ",(0,a.kt)("inlineCode",{parentName:"p"},"PushButton")," delegates all rendering to its ",(0,a.kt)("inlineCode",{parentName:"p"},"behavior")," and the button has none specified.")),(0,a.kt)("h2",{id:"setting-a-behavior-fixes-the-button"},"Setting a ",(0,a.kt)("a",{parentName:"h2",href:"/doodle/docs/rendering/behaviors"},"Behavior")," fixes the button"),(0,a.kt)("p",null,"The above example does not render anything because the button has no ",(0,a.kt)("inlineCode",{parentName:"p"},"behavior")," installed. ",(0,a.kt)("inlineCode",{parentName:"p"},"PushButton")," (like many Views in the ",(0,a.kt)("inlineCode",{parentName:"p"},"controls")," library) does not render directly itself, but relies on its ",(0,a.kt)("inlineCode",{parentName:"p"},"behavior")," for all drawing."),(0,a.kt)("p",null,"So we can fix the above app by explicitly adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"behavior")," to the button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class ButtonWithBehavior(display: Display): Application {\n    init {\n        display += PushButton("Hi").apply {\n            size = Size(80, 40)\n\n            // Assign a Behavior to the button that handles rendering\n            behavior = simpleButtonRenderer { button, canvas ->\n                var color = Lightgray\n\n                if (button.model.pressed    ) color = color.darker(0.25f)\n                if (button.model.pointerOver) color = color.darker(0.25f)\n\n                canvas.rect(rectangle = button.bounds.atOrigin, radius = 10.0, fill = color.paint)\n            }\n\n//            acceptsThemes = false // use along with themes to avoid the custom behavior being overridden\n        }\n        display.layout = constrain(display.first(), center)\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    // PointerModule required to support mouse/touch\n    application(modules = listOf(PointerModule)) {\n        ButtonWithBehavior(display = instance())\n    }\n}\n')),(0,a.kt)(o.l,{functionName:"buttonWithBehavior",height:"200",mdxType:"DoodleApp"}),(0,a.kt)("h2",{id:"a-theme-could-also-be-used"},"A ",(0,a.kt)("a",{parentName:"h2",href:"/doodle/docs/themes"},"Theme")," could also be used"),(0,a.kt)("p",null,"Themes are a great way to assign behaviors to your entire app all at once. In this version we register the ",(0,a.kt)("inlineCode",{parentName:"p"},"basicButtonBehavior")," module which makes a ",(0,a.kt)("inlineCode",{parentName:"p"},"DynamicTheme")," available that will assign ",(0,a.kt)("inlineCode",{parentName:"p"},"BasicButtonBehavior")," to all buttons in the app by default. This theme is injected into the app along with the ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeManager")," which is used to select the theme. The result is that our button now has a behavior and delegates all rendering to it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class ButtonWithBasicTheme(display: Display, themeManager: ThemeManager, theme: DynamicTheme): Application {\n    init {\n        // install theme that provides a button behavior,\n        // thus automatically giving any button in the app a behavior\n        themeManager.selected = theme\n\n        display += PushButton().apply { size = Size(80, 40) }\n        display.layout = constrain(display.first(), center)\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    // PointerModule required to support mouse/touch\n    // nativeButtonBehavior provides a behavior for buttons (via dynamic theme)\n    application(modules = listOf(PointerModule, nativeButtonBehavior())) {\n        ButtonWithBasicTheme(display = instance(), themeManager = instance(), theme = instance())\n    }\n}\n")),(0,a.kt)(o.l,{functionName:"buttonWithTheme",height:"200",mdxType:"DoodleApp"}))}u.isMDXComponent=!0}}]);