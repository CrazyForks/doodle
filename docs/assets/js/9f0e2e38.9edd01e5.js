"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[950],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},492:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=t(3117),i=t(102),o=(t(7294),t(3905)),r=["components"],l={hide_title:!0},s="Behaviors",c={unversionedId:"rendering/behaviors",id:"rendering/behaviors",title:"Behaviors",description:"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc.",source:"@site/docs/rendering/behaviors.mdx",sourceDirName:"rendering",slug:"/rendering/behaviors",permalink:"/doodle/docs/rendering/behaviors",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Colors",permalink:"/doodle/docs/rendering/colors"},next:{title:"Pointer Input Overview",permalink:"/doodle/docs/pointer_input/overview"}},d={},p=[{value:"Deeper customization",id:"deeper-customization",level:2},{value:"Implementing a Behavior",id:"implementing-a-behavior",level:3},{value:"Delegating to a Behavior",id:"delegating-to-a-behavior",level:3},{value:"Specialized Behaviors",id:"specialized-behaviors",level:2}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"behaviors"},"Behaviors"),(0,o.kt)("p",null,"It is common to make a View's behavior and presentation configurable. In many cases this happens through properties like colors, fonts, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val textField = TextField().apply {\n    backgroundColor = Darkgray\n    foregroundColor = White\n    borderVisible   = false\n}\n")),(0,o.kt)("h2",{id:"deeper-customization"},"Deeper customization"),(0,o.kt)("p",null,"Sometimes a View needs to support more complex customization. Take a ",(0,o.kt)("a",{parentName:"p",href:"../ui_components/overview#tabbedpanel"},"TabbedPanel")," for example. The number of configurations is\nfairly open-ended; and the API would be needlessly complex if it tried to encompass everything."),(0,o.kt)("p",null,"This is where a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L6"},(0,o.kt)("inlineCode",{parentName:"a"},"Behavior")),"\ncomes in handy. Views can offer deep customization by delegating rendering, hit detection and anything else to Behaviors. TabbedPanel--along\nwith ",(0,o.kt)("a",{parentName:"p",href:"../ui_components/overview#textfield"},"TextField")," and many other controls--actually does this."),(0,o.kt)("h3",{id:"implementing-a-behavior"},"Implementing a Behavior"),(0,o.kt)("p",null,"Behaviors offer a few common capabilities that help with View customization. You create one by implementing the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/Behavior.kt#L6"},(0,o.kt)("inlineCode",{parentName:"a"},"Behavior")),"\ninterface, or a sub-type of it depending on the target View."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyBehavior: Behavior<Button> {\n    override fun install(view: Button) {}\n    override fun render(view: Button, canvas: Canvas) {}\n    override fun contains(view: Button, point: Point) = point in view.bounds\n    override fun clipCanvasToBounds(view: Button) = true\n    override fun mirrorWhenRightToLeft(view: T) = view.mirrorWhenRightLeft\n    override fun uninstall(view: Button) {}\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The methods on ",(0,o.kt)("inlineCode",{parentName:"p"},"Behavior")," are all optional"))),(0,o.kt)("p",null,"Behaviors support installation and uninstallation to and from Views. This gives each Behavior a chance to configure the target\nView upon first assignment and cleanup when removed."),(0,o.kt)("h3",{id:"delegating-to-a-behavior"},"Delegating to a Behavior"),(0,o.kt)("p",null,"View subtypes need to manage behaviors directly. Kotlin does not have self types, so the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," base class cannot have a\n",(0,o.kt)("inlineCode",{parentName:"p"},"behavior<Self>")," to make this easier."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyView: View() {\n// ...\n    var behavior: Behavior<MyView>? by behavior()\n}\n")),(0,o.kt)("p",null,"However, View subtypes can use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L914"},(0,o.kt)("inlineCode",{parentName:"a"},"behvaior")),"\ndelegate to guarantee proper installation and uninstallation. This delegate also ensures a Behavior's overrides for things like\n",(0,o.kt)("inlineCode",{parentName:"p"},"clipCanvasToBounds")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"mirrorWhenRightToLeft")," are not missed during installation."),(0,o.kt)("h2",{id:"specialized-behaviors"},"Specialized Behaviors"),(0,o.kt)("p",null,"As mentioned before, TabbedPanel delegates a lot to its Behavior. It actually exposes the fact that it is a container to it. This is done\nusing the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Controls/src/commonMain/kotlin/io/nacular/doodle/controls/panels/TabbedPanel.kt#L15"},(0,o.kt)("inlineCode",{parentName:"a"},"TabbedPanelBehavior")),"\nsub interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=io.nacular.doodle.controls.panels.TabbedPanel.kt",title:"io.nacular.doodle.controls.panels.TabbedPanel.kt"},"abstract class TabbedPanelBehavior<T>: Behavior<TabbedPanel<T>> {\n    //\n    val TabbedPanel<T>.children         get() = this._children\n    var TabbedPanel<T>.insets           get() = this._insets;           set(new) { _insets           = new }\n    var TabbedPanel<T>.layout           get() = this._layout;           set(new) { _layout           = new }\n    var TabbedPanel<T>.isFocusCycleRoot get() = this._isFocusCycleRoot; set(new) { _isFocusCycleRoot = new }\n\n    inline operator fun TabbedPanel<T>.plusAssign (view: View) = children.plusAssign (view)\n    inline operator fun TabbedPanel<T>.minusAssign(view: View) = children.minusAssign(view)\n}\n\nclass TabbedPanel<T> {\n    //...\n\n    // Expose container APIs for behavior\n    internal val _children         get() = children\n    internal var _insets           get() = insets; set(new) { insets = new }\n    internal var _layout           get() = layout; set(new) { layout = new }\n    internal var _isFocusCycleRoot get() = isFocusCycleRoot; set(new) { isFocusCycleRoot = new }\n\n    // ...\n}\n")),(0,o.kt)("p",null,"Classes that implement ",(0,o.kt)("inlineCode",{parentName:"p"},"TabbedPanelBehavior")," are able to directly modify their panel's children and layout."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyTabbedPanelBehavior: TabbedPanelBehavior<Any> {\n    override fun install(view: TabbedPanel<Any>) {\n        // accessible to TabbedPanelBehavior sub classes\n        view += view {}\n        view.layout = object: Layout {\n            override fun layout(container: PositionableContainer) {}\n        }\n    }\n\n    override fun uninstall(view: TabbedPanel<Any>) {\n        view.children.clear()\n        view.layout = null\n    }\n\n    // ...\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val tabbedPanel = TabbedPanel(/*...*/).apply {\n    behavior = MyTabbedPanelBehavior()\n}\n")),(0,o.kt)("p",null,"This provides great flexibility when defining the presentation and behavior for TabbedPanels. You can do similar things with\nViews in your app."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can automatically style Views using ",(0,o.kt)("a",{parentName:"p",href:"/doodle/docs/themes"},(0,o.kt)("strong",{parentName:"a"},"Themes"))))))}m.isMDXComponent=!0}}]);