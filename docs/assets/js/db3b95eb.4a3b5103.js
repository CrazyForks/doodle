"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[496],{1572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>u,default:()=>y,frontMatter:()=>h,metadata:()=>m,toc:()=>w});var a=t(7462),i=(t(7294),t(3905)),o=(t(8209),t(4866),t(5162),t(4903)),l=t(1912),r=t(1166);const s="package applications\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass MyApp(display: Display): Application {\n    init {\n        display += view {}\n    }\n    // ...\n\n    override fun shutdown() { /*...*/ }\n}\n//sampleEnd",d='import io.nacular.doodle.core.View\nimport io.nacular.doodle.core.renderProperty\nimport io.nacular.doodle.drawing.Canvas\nimport io.nacular.doodle.drawing.Color.Companion.Black\nimport io.nacular.doodle.drawing.TextMetrics\nimport io.nacular.doodle.drawing.text\nimport io.nacular.doodle.geometry.Point\n\n//sampleStart\nclass UserInfo(textMetrics: TextMetrics, name: String, age: Int): View() {\n    var name by renderProperty(name) // causes repaint whenever changed\n    var age  by renderProperty(age )\n    private val nameHeight = textMetrics.height(name)\n\n    override fun render(canvas: Canvas) {\n        canvas.text("name: $name", color = Black)\n        canvas.text("age : $age", at = Point(y = nameHeight), color = Black)\n    }\n}\n//sampleEnd',p="import io.nacular.doodle.core.View\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass VSplitPanel: View() {\n    var left: View? = null\n        set(new) {\n            if (new == field) { return }\n\n            field?.let { children -= it }\n            field = new\n            field?.let { children += it }\n\n            // notify of change\n        }\n\n    val right: View? = null\n    // ...\n\n    private val handle = view {} // private View for splitter\n\n    init {\n        children += handle // add handle to children\n    }\n\n    // ...\n}\n//sampleEnd",c="package viewcreation\n\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass MyView: View() {\n    // ...\n}\n\nval view1 = object: View() {\n    // ...\n}\n\nval view2 = view {\n    // ...\n}\n//sampleEnd",h={hide_title:!0},u="Views",m={unversionedId:"views",id:"views",title:"Views",description:"App building blocks",source:"@site/docs/views.mdx",sourceDirName:".",slug:"/views",permalink:"/doodle/docs/views",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Applications",permalink:"/doodle/docs/applications"},next:{title:"The Display",permalink:"/doodle/docs/display/overview"}},v={},w=[{value:"App building blocks",id:"app-building-blocks",level:2},{value:"State and rendering",id:"state-and-rendering",level:2},{value:"View Hierarchy",id:"view-hierarchy",level:2},{value:"Apps can have any number of top-level Views",id:"apps-can-have-any-number-of-top-level-views",level:3},{value:"Views can also have children",id:"views-can-also-have-children",level:3}],k={toc:w},g="wrapper";function y(e){let{components:n,...t}=e;return(0,i.kt)(g,(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"views"},"Views"),(0,i.kt)("h2",{id:"app-building-blocks"},"App building blocks"),(0,i.kt)("p",null,"Views are the building blocks of Doodle apps. They encapsulate state, display content on the screen and respond to user input. Apps\ntypically contain many ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," classes and instances at runtime. You create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," by extending the ",(0,i.kt)(r.G7x,null)," base class, instantiating an inline object directly or through the ",(0,i.kt)(r.NMf,null)," DSL."),(0,i.kt)(l.O,{mdxType:"KPlayground"},c),(0,i.kt)("h2",{id:"state-and-rendering"},"State and rendering"),(0,i.kt)("p",null,"Here is more useful example of a ",(0,i.kt)(r.G7x,null)," that holds some user data (a name and age). It tracks this state and monitors it for changes. It\nalso keeps the user informed of its state by rendering any changes to its internal state."),(0,i.kt)(o.l,{functionName:"userInfo",height:"120",mdxType:"DoodleApp"}),(0,i.kt)(l.O,{mdxType:"KPlayground"},d),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Don't worry about the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method yet; we cover that ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/rendering/overview"},"later"),".")),(0,i.kt)("h2",{id:"view-hierarchy"},"View Hierarchy"),(0,i.kt)("h3",{id:"apps-can-have-any-number-of-top-level-views"},"Apps can have any number of top-level Views"),(0,i.kt)("p",null,"Doodle apps contain a hierarchy of Views working together; with the ",(0,i.kt)("a",{parentName:"p",href:"/doodle/docs/display/overview#the-display-is-an-apps-root-container"},(0,i.kt)("strong",{parentName:"a"},"Display")),"\nbeing the root ancestor--though it is not a ",(0,i.kt)(r.G7x,null),". You display a top-level ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," like this:"),(0,i.kt)(l.O,{mdxType:"KPlayground"},s),(0,i.kt)("h3",{id:"views-can-also-have-children"},"Views can also have children"),(0,i.kt)("p",null,"Most apps consist of hierarchies with Views nested inside one another. Doodle apps are no different: Views support nesting ",(0,i.kt)(r.vR,null),". However, this list--and other traits related to being a container--is ",(0,i.kt)("inlineCode",{parentName:"p"},"protected")," to improve encapsulation and API control."),(0,i.kt)("p",null,"Consider a split panel. It is reasonable to think about it as having a left and right child (ignoring orientation for now).\nHowever, an implementation of this concept might choose to have an additional child to represent the splitter. This choice is an\ninternal detail of the implementation that would be leaked if the ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," list were public. Worse, a caller could remove the splitter\nor add more children than expected and break the behavior."),(0,i.kt)("p",null,"Doodle helps with these design challenges by letting you selectively expose a View's internals to callers."),(0,i.kt)(l.O,{mdxType:"KPlayground"},p),(0,i.kt)("p",null,"This design prevents direct access to the panel's ",(0,i.kt)("inlineCode",{parentName:"p"},"children"),", which side-steps many issues. It also presents are more\nintuitive and reliable API. ",(0,i.kt)("inlineCode",{parentName:"p"},"left")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"right")," are fairly self-documenting compared to ",(0,i.kt)("inlineCode",{parentName:"p"},"children[n]")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"children[m]"),". Moreover,\nthe panel is able to encapsulate the fact that it uses additional Views for presentation."))}y.isMDXComponent=!0}}]);