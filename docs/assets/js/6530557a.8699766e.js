"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[9392],{1560:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>y,contentTitle:()=>h,default:()=>v,frontMatter:()=>c,metadata:()=>w,toc:()=>m});var o=n(7624),a=n(4552),s=n(7492),t=n(3220);const l="package display\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport org.kodein.di.instance\n\n//sampleStart\nclass MyApp(display: Display): Application {\n    init {\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application {\n        MyApp(display = instance())\n    }\n}\n//sampleEnd",d='package display\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.WindowGroup\nimport io.nacular.doodle.core.view\nimport org.kodein.di.instance\n\n//sampleStart\nclass MyApp(windows: WindowGroup): Application {\n    init {\n        windows.main.display += view {}\n\n        windows {\n            title = "New Window"\n            display += view {}\n        }\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application {\n        MyApp(instance())\n    }\n}\n//sampleEnd',p="package display\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.view\n\n//sampleStart\nclass SampleApp(display: Display): Application {\n    init {\n        val view1 = view {}\n        val view2 = view {}\n\n        // add top-level views\n        display += view1\n        display += view2\n\n        // remove top-level views\n        display += view1\n        display += view2\n    }\n\n    override fun shutdown() { /*...*/ }\n}\n//sampleEnd",r="package display\n\nimport io.nacular.doodle.application.application\nimport org.kodein.di.DI\nimport org.kodein.di.instance\nimport org.w3c.dom.HTMLElement\n\nfun topLevelLaunch(element: HTMLElement, moduleA: DI.Module, moduleB: DI.Module) {\n//sampleStart\n    // Launch top-level app (in body for Web)\n    application(modules = listOf(moduleA, moduleB)) {\n        MyApp(display = instance())\n    }\n\n    // Launch app within element\n    application(element, modules = listOf(moduleA, moduleB)) {\n        MyApp(display = instance())\n    }\n//sampleEnd\n}",c={hide_title:!0,title:"Displays"},h=void 0,w={id:"display",title:"Displays",description:"An app's root container",source:"@site/docs/display.mdx",sourceDirName:".",slug:"/display",permalink:"/doodle/docs/display",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Displays"},sidebar:"tutorialSidebar",previous:{title:"Views",permalink:"/doodle/docs/views"},next:{title:"Overview",permalink:"/doodle/docs/rendering/overview"}},y={},m=[{value:"An app&#39;s root container",id:"an-apps-root-container",level:2},{value:"Adding Views to the Display",id:"adding-views-to-the-display",level:2},{value:"Different Displays for Web",id:"different-displays-for-web",level:2},{value:"Multiple Displays on Desktop",id:"multiple-displays-on-desktop",level:2}];function u(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",strong:"strong",...(0,a.M)(),...e.components};return t.m||f("api",!1),t.m.Display||f("api.Display",!0),t.m.DisplayChildren||f("api.DisplayChildren",!0),t.m.View||f("api.View",!0),t.m.Window||f("api.Window",!0),t.m.view||f("api.view",!1),t.m.view.displayed||f("api.view.displayed",!0),t.m.view.parent||f("api.view.parent",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h2,{id:"an-apps-root-container",children:"An app's root container"}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(t.m.Display,{})," holds an app's ",(0,o.jsx)(t.m.View,{})," hierarchy within a window, and behaves like a basic container. It is not a View however, so many of the capabilities of Views are not available for the Display."]}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"Display"})," is available for injection by default."]}),"\n",(0,o.jsx)(s.A,{children:l}),"\n",(0,o.jsx)(i.admonition,{type:"tip",children:(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.a,{href:"/doodle/docs/layouts/overview",children:"Layouts"})," can be applied to the Display as well."]})}),"\n",(0,o.jsx)(i.h2,{id:"adding-views-to-the-display",children:"Adding Views to the Display"}),"\n",(0,o.jsxs)(i.p,{children:["An app can have any number of top-level Views that are the ancestors of all other Views. These are added (and removed) to the ",(0,o.jsx)(i.code,{children:"Display"})," directly using the its ",(0,o.jsx)(t.m.DisplayChildren,{})," property. These top-level have no ",(0,o.jsx)(t.m.view.parent,{}),", since they ",(0,o.jsx)(i.code,{children:"Display"})," is not a ",(0,o.jsx)(i.code,{children:"View"})," itself."]}),"\n",(0,o.jsx)(s.A,{children:p}),"\n",(0,o.jsx)(i.admonition,{type:"caution",children:(0,o.jsxs)(i.p,{children:["A ",(0,o.jsx)(i.code,{children:"View"}),"'s ",(0,o.jsx)(t.m.view.parent,{})," property does not indicate whether it is displayed or not. Use the ",(0,o.jsx)(t.m.view.displayed,{})," property instead."]})}),"\n",(0,o.jsx)(i.h2,{id:"different-displays-for-web",children:"Different Displays for Web"}),"\n",(0,o.jsxs)(i.p,{children:["A ",(0,o.jsx)(i.a,{href:"/doodle/docs/applications#top-level-applications",children:(0,o.jsx)(i.strong,{children:"Stand-Alone"})})," Web app that uses the entire page will have its ",(0,o.jsx)(i.code,{children:"Display"})," tied to the page ",(0,o.jsx)(i.code,{children:"body"}),". While one hosted in an element will have a ",(0,o.jsx)(i.code,{children:"Display"})," that is tied to that element. This difference is transparent to the app."]}),"\n",(0,o.jsxs)(i.p,{children:["The Display for a ",(0,o.jsx)(i.a,{href:"platform_specific/web#nested-apps",children:(0,o.jsx)(i.strong,{children:"Nested app"})})," sits within the ",(0,o.jsx)(i.code,{children:"View"})," hosting it. This means changes to that View's size will change the Display size."]}),"\n",(0,o.jsx)(s.A,{children:r}),"\n",(0,o.jsx)(i.h2,{id:"multiple-displays-on-desktop",children:"Multiple Displays on Desktop"}),"\n",(0,o.jsxs)(i.p,{children:["Single-window apps work the same on Desktop as they do for the Browser. But Desktop apps can also take advantage of multiple windows to display content. Doing this results in the creation of multiple ",(0,o.jsx)(t.m.Display,{}),"s (one for each window)."]}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"Display"}),"s work just like they do for single-window apps: they contain the ",(0,o.jsx)(t.m.View,{})," hierarchy, and behave like containers. The difference is they perform those duties only for the ",(0,o.jsx)(t.m.Window,{})," they are attached to. And ",(0,o.jsx)(i.code,{children:"View"}),"s in a ",(0,o.jsx)(i.code,{children:"Display"})," are shown in the Window for that ",(0,o.jsx)(i.code,{children:"Display"}),"."]}),"\n",(0,o.jsx)(s.A,{children:d}),"\n",(0,o.jsx)(i.admonition,{type:"tip",children:(0,o.jsxs)(i.p,{children:["Each Window (including ",(0,o.jsx)(i.code,{children:"main"}),") provides a reference to its ",(0,o.jsx)(i.code,{children:"Display"}),"."]})})]})}function v(e={}){const{wrapper:i}={...(0,a.M)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}function f(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);