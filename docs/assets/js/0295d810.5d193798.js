"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[888],{515:function(e,a,t){t.r(a),t.d(a,{assets:function(){return h},contentTitle:function(){return m},default:function(){return u},frontMatter:function(){return r},metadata:function(){return d},toc:function(){return p}});var n=t(3117),i=t(102),o=(t(7294),t(3905)),s=t(3138),l=["components"],r={hide_title:!0},m="Themes",d={unversionedId:"themes",id:"themes",title:"Themes",description:"Doodle apps can use Themes",source:"@site/docs/themes.mdx",sourceDirName:".",slug:"/themes",permalink:"/doodle/docs/themes",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Form Controls",permalink:"/doodle/docs/ui_components/form_controls"},next:{title:"Accessibility",permalink:"/doodle/docs/accessibility"}},h={},p=[{value:"How Themes work",id:"how-themes-work",level:2},{value:"ThemeManager",id:"thememanager",level:2},{value:"Bundle Size",id:"bundle-size",level:2},{value:"Dynamic Themes",id:"dynamic-themes",level:2}],c={toc:p};function u(e){var a=e.components,t=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"themes"},"Themes"),(0,o.kt)("p",null,"Doodle apps can use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/theme/Theme.kt#L16"},(0,o.kt)("inlineCode",{parentName:"a"},"Themes")),"\nto create a consistent look and behavior across their Views. Doodle has built-in support for a Native and Basic theme\n(which has a light and dark variant). The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/theme/native/NativeTheme.kt#L47"},(0,o.kt)("inlineCode",{parentName:"a"},"NativeTheme")),"\nstyles controls like buttons, text fields, and scroll panels using the system\ndefault styles and behaviors. The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/basic/BasicTheme.kt#L125"},(0,o.kt)("inlineCode",{parentName:"a"},"BasicTheme")),"\nprovides a customizable foundation to further build on."),(0,o.kt)(s.B,{functionName:"themes",height:"400",mdxType:"DoodleCodeBlock"}),(0,o.kt)("h2",{id:"how-themes-work"},"How Themes work"),(0,o.kt)("p",null,"Themes implement a simple interface that allows them to process the entire View graph and apply style and behavior changes.\nThe API is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface Theme {\n    fun install(display: Display, all: Sequence<View>)\n}\n")),(0,o.kt)("p",null,"Doodle calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"install")," method when applying a Theme for the first time, and when Views are added to the Display after\ninstallation. It provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"Display")," and a sequence of displayed Views. The Theme is free to customize both."),(0,o.kt)("h2",{id:"thememanager"},"ThemeManager"),(0,o.kt)("p",null,"Themes are handles by the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/theme/Theme.kt#L31"},(0,o.kt)("inlineCode",{parentName:"a"},"ThemeManager")),".\nIt provides an API for selecting the active Theme. Inject it into your app to work with Themes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyApp.kt"',title:'"MyApp.kt"'},"import io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.native.NativeTheme\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.NativeTheme\nimport org.kodein.di.instance\n\nclass MyApp(display: Display, manager: ThemeManager, theme: NativeTheme): Application {\n\n    init {\n        manager.selected = theme\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="main.kt"',title:'"main.kt"'},"fun main() {\n    application(modules = listOf(NativeTheme)) {\n        MyApp(display = instance(), manager = instance(), theme = instance())\n    }\n}\n")),(0,o.kt)("p",null,"This app installs the NativeTheme, which is available in a bundle of the same name. That bundle also includes the\ncommon ThemeModule, which provides access to the ThemeManager."),(0,o.kt)("h2",{id:"bundle-size"},"Bundle Size"),(0,o.kt)("p",null,"Themes can lead to larger bundle sizes than expected depending on how they are implemented. Take the following\nfor example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CustomTheme: Theme {\n    fun install(display: Display, all: Sequence<View>) = all.forEach {\n        when (it) {\n            is Slider      -> { it.behavior = /*...*/ }\n            is PushButton  -> { it.behavior = /*...*/ }\n            is ProgressBar -> { it.behavior = /*...*/ }\n            // ...\n        }\n    }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Themes defined this way are not very portable due to their heavy bundle cost"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyApp(display: Display, manager: ThemeManager, theme: CustomTheme): Application {\n\n    init {\n        manager.selected = theme\n\n        display += PushButton()\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CustomTheme"),"'s static implementation leads to lots of dependencies that are not used in ",(0,o.kt)("inlineCode",{parentName:"p"},"MyApp"),". This includes the View\nand Behavior classes it uses."),(0,o.kt)("h2",{id:"dynamic-themes"},"Dynamic Themes"),(0,o.kt)("p",null,"Doodle addresses this concern with the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/adhoc/DynamicTheme.kt#L9"},(0,o.kt)("inlineCode",{parentName:"a"},"DynamicTheme")),".\nThis Theme uses dependency injection to discover the set of\nBehaviors that have been installed via Kodein Modules. It can filter that list down to those Behaviors associated\nwith it. This avoids hard dependencies on Views or Behaviors as a result."),(0,o.kt)("p",null,"DynamicThemes require explicit Behavior registration to work. The built-in Themes define a Module per Behavior to allow\narbitrary groupings within apps. These modules are defined using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Themes/src/commonMain/kotlin/io/nacular/doodle/theme/Modules.kt#L44"},(0,o.kt)("inlineCode",{parentName:"a"},"bindBehavior(...)")),",\nwhich takes a Theme class and binds a DynamicTheme that includes behaviors associated with that class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MyApp.kt"',title:'"MyApp.kt"'},"import io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.adhoc.DynamicTheme\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeButtonBehavior\nimport org.kodein.di.instance\n\nclass MyApp(display: Display, manager: ThemeManager, theme: DynamicTheme): Application {\n\n    init {\n        manager.selected = theme\n        // use buttons\n    }\n\n    override fun shutdown() {}\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="main.kt"',title:'"main.kt"'},"fun main() {\n    // DynamicThemes require a list of Behavior modules since the\n    // Theme itself is essentially a Behavior filter.\n    application(modules = listOf(nativeButtonBehavior())) {\n        MyApp(display = instance(), manager = instance(), theme = instance())\n    }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Include behavior modules at launch, so they can be used with a registered DynamicTheme."))),(0,o.kt)("p",null,"This app no longer has extraneous dependencies on things like ProgressBar and its Behavior."))}u.isMDXComponent=!0}}]);