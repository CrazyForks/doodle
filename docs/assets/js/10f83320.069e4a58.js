"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[562],{6251:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var o=n(7462),a=(n(7294),n(3905)),i=(n(8209),n(5488)),l=n(5162);const r={hide_title:!0},s="Text",d={unversionedId:"rendering/text",id:"rendering/text",title:"Text",description:'Doodle is explicit about text rendering, and requires a location for all text drawn to a Canvas. The following View draw\'s "hello" at 0,0.',source:"@site/docs/rendering/text.mdx",sourceDirName:"rendering",slug:"/rendering/text",permalink:"/doodle/docs/rendering/text",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/doodle/docs/rendering/overview"},next:{title:"Images",permalink:"/doodle/docs/rendering/images"}},c={},p=[{value:"Text alignment",id:"text-alignment",level:2},{value:"Fonts",id:"fonts",level:2},{value:"System Fonts",id:"system-fonts",level:3},{value:"Font Files",id:"font-files",level:3},{value:"Handling Timeouts",id:"handling-timeouts",level:3}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"text"},"Text"),(0,a.kt)("p",null,"Doodle is explicit about text rendering, and requires a location for all text drawn to a ",(0,a.kt)("a",{parentName:"p",href:"overview#the-canvas"},"Canvas"),'. The following View draw\'s "hello" at ',(0,a.kt)("inlineCode",{parentName:"p"},"0,0"),"."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"code1",label:"Example",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TextView: View() {\n    override fun render(canvas: Canvas) {\n        canvas.text("hello", Origin, color = Black)\n    }\n}\n'))),(0,a.kt)(l.Z,{value:"code2",label:"Using View DSL",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val textView = view {\n    render = {\n        text("hello", Origin, color = Black)\n    }\n}\n')))),(0,a.kt)("h2",{id:"text-alignment"},"Text alignment"),(0,a.kt)("p",null,"You need to measure text in order to align it in any way other than top-left-aligned at ",(0,a.kt)("inlineCode",{parentName:"p"},"x,y"),". Doodle provides\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"TextMetrics")," component for this. Simply inject it into your app and Views."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyApp(/*..,*/ textMetrics: TextMetrics): Application {\n    //...\n}\n")),(0,a.kt)("p",null,"Here is a View that draws some centered text."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class CenteredTextView(textMetrics: TextMetrics): View() {\n    private val textSize = textMetrics.size("hello") // cache text size\n\n    override fun render(canvas: Canvas) {\n        // compute each time to account for changes in View\'s width/height\n        canvas.text("hello",\n                Point((width - textSize.width) / 2, (height - textSize.height) / 2),\n                Black.paint)\n    }\n}\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This View could also compute the text location on size changes.")),(0,a.kt)("h2",{id:"fonts"},"Fonts"),(0,a.kt)("p",null,"You can specify a font when drawing text or have Doodle fallback to the default. Fonts can be tricky, since\nthey may not be present on the system at render time. This presents a race-condition for drawing text."),(0,a.kt)("p",null,"Doodle provides ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/FontLoader.kt#L18"},(0,a.kt)("inlineCode",{parentName:"a"},"FontLoader")),"\nto help with this."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L124"},(0,a.kt)("inlineCode",{parentName:"a"},"FontModule")),"\nto get access to ",(0,a.kt)("inlineCode",{parentName:"p"},"FontLoader"))),(0,a.kt)("h3",{id:"system-fonts"},"System Fonts"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"FontLoader")," to check the system asynchronously for a given font. This allows you to check for OS fonts, or fonts that have\nbeen loaded previously."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.GlobalScope\n\nclass MyApp(fonts: FontLoader): Application {\n    init {\n        // launch a new coroutine for async font lookup\n        val font = GlobalScope.async {\n            fonts {\n                family = "Roboto"\n                size   = 14\n                weight = 400\n            }\n        }\n\n        //...\n\n        font.await()\n    }\n\n    //...\n}\n')),(0,a.kt)("h3",{id:"font-files"},"Font Files"),(0,a.kt)("p",null,"You can also load a font from a file using ",(0,a.kt)("inlineCode",{parentName:"p"},"FontLoader"),". This is similar to finding a loaded font, but it takes a font file url."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val font = GlobalScope.async {\n            // Load this front from the file at "urlToFont"\n            fonts("urlToFont") {\n                family = "Roboto"\n                size   = 14\n                weight = 400\n            }\n        }\n\n//...\n\nfont.await()\n')),(0,a.kt)("h3",{id:"handling-timeouts"},"Handling Timeouts"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FontLoader")," uses Kotlin's ",(0,a.kt)("inlineCode",{parentName:"p"},"suspend")," functions for its async methods. ",(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/reference/coroutines-overview.html"},"Coroutines"),"\nare a flexible way of dealing with async/await semantics. You can support timeouts using ",(0,a.kt)("inlineCode",{parentName:"p"},"launch")," and canceling the resulting Job\nafter some duration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.GlobalScope\n\nclass MyApp(fonts: FontLoader, scheduler: Scheduler): Application {\n    init {\n        val view = view {}\n\n        // launch a new coroutine for async font lookup\n        val fontJob = GlobalScope.launch {\n            // assigns the font when the job resolves\n            view.font = fonts {\n                family = "Roboto"\n                size   = 14\n                weight = 400\n            }\n        }\n\n        // Cancel the job after 5 seconds\n        scheduler.after(5 * seconds) {\n            fontJob.cancel()\n        }\n    }\n\n    //...\n}\n')))}m.isMDXComponent=!0}}]);