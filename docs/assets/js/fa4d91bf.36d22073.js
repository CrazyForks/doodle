"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[2802],{3191:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>g,contentTitle:()=>u,default:()=>j,frontMatter:()=>h,metadata:()=>i,toc:()=>x});const i=JSON.parse('{"id":"installation","title":"Installation","description":"Supporting a single platform","source":"@site/docs/installation.mdx","sourceDirName":".","slug":"/installation","permalink":"/doodle/docs/installation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"Installation"},"sidebar":"tutorialSidebar","previous":{"title":"Migrating to 0.11.0","permalink":"/doodle/docs/migrating/0.10.x_0.11.0"},"next":{"title":"Applications","permalink":"/doodle/docs/applications"}}');var t=o(4848),a=o(8453),r=o(5537),l=o(9329),s=o(4069);const d='plugins {\n    id ("org.jetbrains.kotlin.multiplatform") version "2.1.10"\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    js {\n        browser {\n            binaries.executable()\n        }\n    }\n\n    val doodleVersion = "0.11.3" // <--- Latest Doodle version\n\n    dependencies {\n        implementation ("io.nacular.doodle:browser:$doodleVersion")\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n}',p='plugins {\n    id ("org.jetbrains.kotlin.multiplatform") version "2.1.10"\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n    wasmJs {\n        browser {\n            binaries.executable()\n        }\n    }\n\n    val doodleVersion = "0.11.3" // <--- Latest Doodle version\n\n    dependencies {\n        implementation ("io.nacular.doodle:browser:$doodleVersion")\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n}',m='plugins {\n    id ("org.jetbrains.kotlin.jvm") version "2.1.10"\n    application\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev")\n    }\n}\n\nkotlin {\n    compilerOptions {\n        jvmTarget.set(JVM_11) // JVM 11 is needed for Desktop\n    }\n    withJava()\n\n    val doodleVersion = "0.11.3" // <--- Latest Doodle version\n\n    dependencies {\n        // helper to derive OS/architecture pair\n        when (osTarget()) {\n            "macos-x64"     -> implementation("io.nacular.doodle:desktop-jvm-macos-x64:$doodleVersion"    )\n            "macos-arm64"   -> implementation("io.nacular.doodle:desktop-jvm-macos-arm64:$doodleVersion"  )\n            "linux-x64"     -> implementation("io.nacular.doodle:desktop-jvm-linux-x64:$doodleVersion"    )\n            "linux-arm64"   -> implementation("io.nacular.doodle:desktop-jvm-linux-arm64:$doodleVersion"  )\n            "windows-x64"   -> implementation("io.nacular.doodle:desktop-jvm-windows-x64:$doodleVersion"  )\n            "windows-arm64" -> implementation("io.nacular.doodle:desktop-jvm-windows-arm64:$doodleVersion")\n        }\n\n        // Optional\n        // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n        // implementation ("io.nacular.doodle:animation:$doodleVersion")\n        // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n    }\n\n    // could be moved to buildSrc, but kept here for clarity\n    fun osTarget(): String {\n        val osName = System.getProperty("os.name")\n        val targetOs = when {\n            osName == "Mac OS X"       -> "macos"\n            osName.startsWith("Win"  ) -> "windows"\n            osName.startsWith("Linux") -> "linux"\n            else                       -> error("Unsupported OS: $osName")\n        }\n\n        val targetArch = when (val osArch = System.getProperty("os.arch")) {\n            "x86_64", "amd64" -> "x64"\n            "aarch64"         -> "arm64"\n            else              -> error("Unsupported arch: $osArch")\n        }\n\n        return "${targetOs}-${targetArch}"\n    }\n}\n\napplication {\n    mainClass.set("YOUR_CLASS")\n}',c='plugins {\n    id ("org.jetbrains.kotlin.multiplatform") version "2.1.10"\n    application\n}\n\nversion = "1.0.0"\ngroup   = "com.my.cool.app"\n\nrepositories {\n    mavenCentral()\n    maven {\n        url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev")\n    }\n}\n\nkotlin {\n    js {\n        browser {\n            binaries.executable()\n        }\n    }\n\n    wasmJs {\n        browser {\n            binaries.executable()\n        }\n    }\n\n    jvm {\n        compilerOptions {\n            jvmTarget.set(JVM_11) // JVM 11 is needed for Desktop\n        }\n        withJava()\n    }\n\n    val doodleVersion = "0.11.3" // <--- Latest Doodle version\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                // Optional\n                // implementation ("io.nacular.doodle:controls:$doodleVersion" )\n                // implementation ("io.nacular.doodle:animation:$doodleVersion")\n                // implementation ("io.nacular.doodle:themes:$doodleVersion"   )\n            }\n        }\n\n        val jsMain.dependencies {\n            implementation ("io.nacular.doodle:browser:$doodleVersion")\n        }\n\n        jvmMain.dependencies {\n            // helper to derive OS/architecture pair\n            when (osTarget()) {\n                "macos-x64"     -> implementation("io.nacular.doodle:desktop-jvm-macos-x64:$doodleVersion"    )\n                "macos-arm64"   -> implementation("io.nacular.doodle:desktop-jvm-macos-arm64:$doodleVersion"  )\n                "linux-x64"     -> implementation("io.nacular.doodle:desktop-jvm-linux-x64:$doodleVersion"    )\n                "linux-arm64"   -> implementation("io.nacular.doodle:desktop-jvm-linux-arm64:$doodleVersion"  )\n                "windows-x64"   -> implementation("io.nacular.doodle:desktop-jvm-windows-x64:$doodleVersion"  )\n                "windows-arm64" -> implementation("io.nacular.doodle:desktop-jvm-windows-arm64:$doodleVersion")\n            }\n        }\n\n        // could be moved to buildSrc, but kept here for clarity\n        fun osTarget(): String {\n            val osName = System.getProperty("os.name")\n            val targetOs = when {\n                osName == "Mac OS X"       -> "macos"\n                osName.startsWith("Win"  ) -> "windows"\n                osName.startsWith("Linux") -> "linux"\n                else                       -> error("Unsupported OS: $osName")\n            }\n\n            val targetArch = when (val osArch = System.getProperty("os.arch")) {\n                "x86_64", "amd64" -> "x64"\n                "aarch64"         -> "arm64"\n                else              -> error("Unsupported arch: $osArch")\n            }\n\n            return "${targetOs}-${targetArch}"\n        }\n    }\n}\n\napplication {\n    mainClass.set("YOUR_CLASS")\n}',h={hide_title:!0,title:"Installation"},u="Installation",g={},x=[{value:"Supporting a single platform",id:"supporting-a-single-platform",level:2},{value:"Target multiple platforms",id:"target-multiple-platforms",level:2}];function v(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"installation",children:"Installation"})}),"\n",(0,t.jsx)(e.h2,{id:"supporting-a-single-platform",children:"Supporting a single platform"}),"\n",(0,t.jsxs)(e.p,{children:["Doodle apps are built using ",(0,t.jsx)(e.a,{href:"http://www.gradle.org",children:"Gradle"})," like other ",(0,t.jsx)(e.a,{href:"https://kotlinlang.org/docs/getting-started.html",children:"Kotlin apps"}),". These apps can be developed to target multiple platforms, with various build configurations depending on the mix of platforms supported."]}),"\n",(0,t.jsx)(e.p,{children:"The following shows how to configure your app for various targets."}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsxs)(l.A,{value:"Browser (JavaScript)",children:[(0,t.jsx)(e.p,{children:"You can set up an app that runs in the Browser using JavaScript with the following build script."}),(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"build.gradle.kts"})}),(0,t.jsx)(s.v,{children:d}),(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["Learn more about ",(0,t.jsx)(e.a,{href:"https://kotlinlang.org/docs/js-project-setup.html",children:"Kotlin for Javascript"}),"."]})})]}),(0,t.jsxs)(l.A,{value:"Browser (WasmJs)",children:[(0,t.jsx)(e.p,{children:"WasmJs apps run in the Browser and are configured as follows."}),(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"build.gradle.kts"})}),(0,t.jsx)(s.v,{children:p}),(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["Learn more about ",(0,t.jsx)(e.a,{href:"https://kotlinlang.org/docs/wasm-get-started.html",children:"Kotlin for WebAssembly"}),"."]})})]}),(0,t.jsxs)(l.A,{value:"Desktop (JVM)",children:[(0,t.jsx)(e.p,{children:"You can set up a pure JVM app that runs on Desktop with the following build scripts."}),(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"build.gradle.kts"})}),(0,t.jsx)(s.v,{children:m}),(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["Learn more about ",(0,t.jsx)(e.a,{href:"https://kotlinlang.org/docs/jvm-get-started.html",children:"Kotlin for the JVM"}),"."]})})]})]}),"\n",(0,t.jsx)(e.h2,{id:"target-multiple-platforms",children:"Target multiple platforms"}),"\n",(0,t.jsxs)(e.p,{children:["Doodle is a set of Kotlin ",(0,t.jsx)(e.a,{href:"https://kotlinlang.org/docs/multiplatform-get-started.html",children:"Multi-platform"})," libraries. Which means you can create an MPP for your app as well. The advantage of this is that you can write your app entirely (except for ",(0,t.jsx)(e.code,{children:"main"}),") in ",(0,t.jsx)(e.code,{children:"common"})," code and make it available on both Web (JS, WasmJS) and Desktop (JVM). The following shows how to create such an app."]}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["App ",(0,t.jsx)(e.a,{href:"applications#launching-an-application",children:(0,t.jsx)(e.strong,{children:"launch code"})})," is the only portion that needs to be in ",(0,t.jsx)(e.code,{children:"jsMain"})," or ",(0,t.jsx)(e.code,{children:"jvmMain"}),"."]})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"build.gradle.kts"})}),"\n",(0,t.jsx)(s.v,{children:c})]})}function j(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(v,{...n})}):v(n)}}}]);