"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[562],{6251:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),l=["components"],r={hide_title:!0},s="Text",c={unversionedId:"rendering/text",id:"rendering/text",isDocsHomePage:!1,title:"Text",description:'Doodle is explicit about text rendering, and requires a location for all text drawn to a Canvas. The following View draw\'s "hello" at 0,0.',source:"@site/docs/rendering/text.mdx",sourceDirName:"rendering",slug:"/rendering/text",permalink:"/docs/rendering/text",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Rendering Overview",permalink:"/docs/rendering/overview"},next:{title:"Images",permalink:"/docs/rendering/images"}},d=[{value:"Text alignment",id:"text-alignment",children:[],level:2},{value:"Fonts",id:"fonts",children:[{value:"System Fonts",id:"system-fonts",children:[],level:3},{value:"Font Files",id:"font-files",children:[],level:3},{value:"Handling Timeouts",id:"handling-timeouts",children:[],level:3}],level:2}],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"text"},"Text"),(0,i.kt)("p",null,'Doodle is explicit about text rendering, and requires a location for all text drawn to a Canvas. The following View draw\'s "hello" at ',(0,i.kt)("inlineCode",{parentName:"p"},"0,0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class TextView: View() {\n    override fun render(canvas: Canvas) {\n        canvas.text("hello", Origin, color = Black)\n    }\n}\n')),(0,i.kt)("p",null,"The above can also be achieved with the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val textView = view {\n    render = {\n        text("hello", Origin, color = Black)\n    }\n}\n')),(0,i.kt)("h2",{id:"text-alignment"},"Text alignment"),(0,i.kt)("p",null,"You need to measure text in order to align it in any way other than left-aligned at ",(0,i.kt)("inlineCode",{parentName:"p"},"x,y"),". Doodle provides\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"TextMetrics")," component for this. Simply inject it into your app and Views."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyApp(/*..,*/ textMetrics: TextMetrics): Application {\n    //...\n}\n")),(0,i.kt)("p",null,"Here is a View that draws some centered text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class CenteredTextView(textMetrics: TextMetrics): View() {\n    private val textSize = textMetrics.size("hello") // cache text size\n\n    override fun render(canvas: Canvas) {\n        // compute each time to account for changes in View\'s width/height\n        canvas.text("hello",\n                Point((width - textSize.width) / 2, (height - textSize.height) / 2),\n                Black.paint)\n    }\n}\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This View could also compute the text location on size changes."))),(0,i.kt)("h2",{id:"fonts"},"Fonts"),(0,i.kt)("p",null,"You can specify a font when drawing text or have Doodle fallback to the default. Fonts can be tricky, since\nthey may not be present on the system at render time. This presents a race-condition for drawing text."),(0,i.kt)("p",null,"Doodle provides ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/drawing/FontLoader.kt#L18"},(0,i.kt)("inlineCode",{parentName:"a"},"FontLoader")),"\nto help with this."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Browser/src/jsMain/kotlin/io/nacular/doodle/application/Modules.kt#L124"},(0,i.kt)("inlineCode",{parentName:"a"},"FontModule")),"\nto get access to ",(0,i.kt)("inlineCode",{parentName:"p"},"FontLoader")))),(0,i.kt)("h3",{id:"system-fonts"},"System Fonts"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FontLoader")," to check the system asynchronously for a given font. This allows you to check for OS fonts, or fonts that have\nbeen loaded previously."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.GlobalScope\n\nclass MyApp(fonts: FontLoader): Application {\n    init {\n        // launch a new coroutine for async font lookup\n        val font = GlobalScope.async {\n            fonts {\n                family = "Roboto"\n                size   = 14\n                weight = 400\n            }\n        }\n\n        //...\n\n        font.await()\n    }\n\n    //...\n}\n')),(0,i.kt)("h3",{id:"font-files"},"Font Files"),(0,i.kt)("p",null,"You can also load a font from a file using ",(0,i.kt)("inlineCode",{parentName:"p"},"FontLoader"),". This is similar to finding a loaded font, but it takes a font file url."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val font = GlobalScope.async {\n            // Load this front from the file at "urlToFont"\n            fonts("urlToFont") {\n                family = "Roboto"\n                size   = 14\n                weight = 400\n            }\n        }\n\n//...\n\nfont.await()\n')),(0,i.kt)("h3",{id:"handling-timeouts"},"Handling Timeouts"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"FontLoader")," uses Kotlin's ",(0,i.kt)("inlineCode",{parentName:"p"},"suspend")," functions for its async methods. ",(0,i.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/reference/coroutines-overview.html"},"Coroutines"),"\nare a flexible way of dealing with async/await semantics. You can support timeouts using ",(0,i.kt)("inlineCode",{parentName:"p"},"launch")," and canceling the resulting Job\nafter some duration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.GlobalScope\n\nclass MyApp(fonts: FontLoader, scheduler: Scheduler): Application {\n    init {\n        val view = view {}\n\n        // launch a new coroutine for async font lookup\n        val fontJob = GlobalScope.launch {\n            // assigns the font when the job resolves\n            view.font = fonts {\n                family = "Roboto"\n                size   = 14\n                weight = 400\n            }\n        }\n\n        // Cancel the job after 5 seconds\n        scheduler.after(5 * seconds) {\n            fontJob.cancel()\n        }\n    }\n\n    //...\n}\n')))}m.isMDXComponent=!0}}]);