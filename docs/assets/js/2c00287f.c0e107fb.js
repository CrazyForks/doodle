"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[929],{4546:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>h,default:()=>g,frontMatter:()=>u,metadata:()=>m,toc:()=>y});var i=t(7462),a=(t(7294),t(3905)),o=(t(8209),t(1912)),p=t(1166);const l="import io.nacular.doodle.application.Application\nimport io.nacular.doodle.core.Display\n\n//sampleStart\nclass InnerApp(display: Display): Application {\n    init {\n        // add stuff to display\n    }\n\n    // ...\n\n    override fun shutdown() { /*...*/ }\n}\n//sampleEnd",s="package outerapp\n\nimport InnerApp\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.ApplicationViewFactory\nimport io.nacular.doodle.application.ApplicationViewFactory.Companion.AppViewModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport org.kodein.di.instance\n\n//sampleStart\nclass OuterApp(display: Display, appView: ApplicationViewFactory): Application {\n    init {\n        display += appView {\n            InnerApp(display = instance()) // inner app initialization\n        }\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application(modules = listOf(AppViewModule)) {\n        OuterApp(display = instance(), appView = instance())\n    }\n}\n//sampleEnd",d='import io.nacular.doodle.application.Application\n\n//sampleStart\nclass UsefulApp: Application {\n    init {\n        println("Hi!")\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd',r='package applications\n\nimport io.nacular.doodle.application.Modules.Companion.PointerModule\nimport io.nacular.doodle.application.application\nimport org.kodein.di.DI.Module\nimport org.kodein.di.instance\n\n//sampleStart\nfun main() {\n    application(modules = listOf(\n        PointerModule,\n        // ...,\n        Module(name = "A Custom Module") {\n            // custom Kodein bind statements\n        },\n        /*...*/)) {\n        MyApp(instance())\n    }\n}\n//sampleEnd',c="package usefulapp\n\nimport UsefulApp\nimport io.nacular.doodle.application.application\n\n//sampleStart\nfun main() {\n    // launch full-screen\n    application {\n        UsefulApp()\n    }\n}\n//sampleEnd",u={hide_title:!0,title:"Applications"},h="Creating Applications",m={unversionedId:"applications",id:"applications",title:"Applications",description:"All Doodle apps run within an . It is the entry-point for your business logic, and often the first class you write. Doodle fully initializes your app at constructor time, so there is no additional run or start method to implement. You can provide custom tear-down logic via the shutdown method though.",source:"@site/docs/applications.mdx",sourceDirName:".",slug:"/applications",permalink:"/doodle/docs/applications",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Applications"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/doodle/docs/installation"},next:{title:"Views",permalink:"/doodle/docs/views"}},k={},y=[{value:"App Launch",id:"app-launch",level:2},{value:"Top-level Apps",id:"top-level-apps",level:3},{value:"Nested Apps",id:"nested-apps",level:3},{value:"InnerApp.kt",id:"innerappkt",level:4},{value:"OuterApp.kt",id:"outerappkt",level:4},{value:"Dependencies",id:"dependencies",level:2}],w={toc:y},f="wrapper";function g(e){let{components:n,...t}=e;return(0,a.kt)(f,(0,i.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-applications"},"Creating Applications"),(0,a.kt)("p",null,"All Doodle apps run within an ",(0,a.kt)(p.MxU,null),". It is the entry-point for your business logic, and often the first class you write. Doodle fully initializes your app at constructor time, so there is no additional ",(0,a.kt)("em",{parentName:"p"},"run")," or ",(0,a.kt)("em",{parentName:"p"},"start")," method to implement. You can provide custom tear-down logic via the ",(0,a.kt)("inlineCode",{parentName:"p"},"shutdown")," method though."),(0,a.kt)(o.O,{mdxType:"KPlayground"},d),(0,a.kt)("h2",{id:"app-launch"},"App Launch"),(0,a.kt)("p",null,"You can either launch an app ",(0,a.kt)("strong",{parentName:"p"},"top-level"),", or ",(0,a.kt)("strong",{parentName:"p"},"nested")," within another app. The Application class does not change regardless of the launch mode. That is because apps have no knowledge of the mode they will run in, making them independent of platform concepts by default."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Doodle does not expose any browser or desktop-specific concepts to apps. The launch step is the only place where HTML elements are directly accepted for Web apps, and this is only to support running Doodle apps within a non-Doodle page.")),(0,a.kt)("h3",{id:"top-level-apps"},"Top-level Apps"),(0,a.kt)("p",null,"Most apps will run independent of others and exist purely within the context of a page, or element within it (for Web apps). Use the ",(0,a.kt)(p.pIA,null)," function to launch apps this way. The result is a full-screen experience by default, with the app taking up the entire page and control all aspects of it. You can also provide an HTML element when launching a top-level Web app. This allows you to host Doodle apps in non-Doodle contexts. The apps in this documentation are top-level within specific elements."),(0,a.kt)("p",null,"Closing the page cleans up any apps within it. Removing the element hosting an app or explicitly calling ",(0,a.kt)("inlineCode",{parentName:"p"},"shutdown")," has the same effect."),(0,a.kt)(o.O,{mdxType:"KPlayground"},c),(0,a.kt)("h3",{id:"nested-apps"},"Nested Apps"),(0,a.kt)("p",null,"Doodle Web apps can also be run within other Doodle Web apps. This is done by placing the nested app in a ",(0,a.kt)("a",{parentName:"p",href:"/doodle/docs/views"},(0,a.kt)("strong",{parentName:"a"},"View"))," that the host app manages. An app launched this way has the same functionality as a top-level one. Its lifecycle however, is tied to the host View."),(0,a.kt)("h4",{id:"innerappkt"},"InnerApp.kt"),(0,a.kt)(o.O,{mdxType:"KPlayground"},l),(0,a.kt)("h4",{id:"outerappkt"},"OuterApp.kt"),(0,a.kt)(o.O,{mdxType:"KPlayground"},s),(0,a.kt)("p",null,"Use an ",(0,a.kt)(p.djP,null)," to create nested apps. This class is available via the ",(0,a.kt)(p.ROU,null),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Adding a nested app's View to the ",(0,a.kt)("a",{parentName:"p",href:"/doodle/docs/display/overview"},(0,a.kt)("strong",{parentName:"a"},"Display"))," triggers the app's initialization. Shutdown the app by removing the host View from the Display.")),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("p",null,"Doodle uses ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dependency_injection"},"dependency injection")," when creating apps. The lambda provided when launching an app is actually a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Kodein-Framework/Kodein-DI"},"Kodein")," binding context that lets you inject instances from Doodle modules, or your own."),(0,a.kt)(o.O,{mdxType:"KPlayground"},r))}g.isMDXComponent=!0}}]);