"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[407],{3018:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var o=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],p={hide_title:!0},s="Pointer Motion Events",l={unversionedId:"pointer_input/pointermotion",id:"pointer_input/pointermotion",isDocsHomePage:!1,title:"Pointer Motion Events",description:"Pointer motion events occur whenever the pointer moves within a View. They are treated separately from pointer events",source:"@site/docs/pointer_input/pointermotion.mdx",sourceDirName:"pointer_input",slug:"/pointer_input/pointermotion",permalink:"/doodle/docs/pointer_input/pointermotion",tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Pointer Input Overview",permalink:"/doodle/docs/pointer_input/overview"},next:{title:"Multi-touch Support",permalink:"/doodle/docs/pointer_input/multitouch"}},u=[],d={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pointer-motion-events"},"Pointer Motion Events"),(0,r.kt)("p",null,"Pointer motion events occur whenever the pointer moves within a View. They are treated separately from ",(0,r.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview"},(0,r.kt)("strong",{parentName:"a"},"pointer events")),"\nbecause of their high frequency. The ",(0,r.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview"},(0,r.kt)("inlineCode",{parentName:"a"},"PointerModule"))," is also\nrequired to enable them. And ",(0,r.kt)("a",{parentName:"p",href:"/doodle/docs/pointer_input/overview#hit-detection"},(0,r.kt)("strong",{parentName:"a"},"hit detection"))," follows the same rules as with pointer events."),(0,r.kt)("p",null,"Registration is different though. You use listen to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/core/View.kt#L309"},(0,r.kt)("inlineCode",{parentName:"a"},"pointerMotionChanged")),"\nproperty and implement ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nacular/doodle/blob/master/Core/src/commonMain/kotlin/io/nacular/doodle/event/PointerMotionListener.kt#L4"},(0,r.kt)("inlineCode",{parentName:"a"},"PointerMotionListener")),"."),(0,r.kt)("p",null,"Pointer motion listeners are notified whenever the pointer:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Moves")," within a View"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Drags")," anywhere while pressed, if the press started in a View")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"view.pointerMotionChanged += object: PointerMotionListener {\n    override fun pointerMoved(event: PointerEvent) {\n        // ..\n    }\n\n    override fun pointerDragged(event: PointerEvent) {\n        // ..\n    }\n}\n")),(0,r.kt)("p",null,"There are also short-hand functions for cases where you only consume one of the events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"view.pointerMotionChanged += moved { event: PointerEvent ->\n    // ..\n}\n")))}c.isMDXComponent=!0}}]);