"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[888],{2134:(e,n,a)=>{a.d(n,{ZP:()=>m});var t=a(7462),o=(a(7294),a(3905)),i=(a(8209),a(4866)),l=a(5162),s=a(1912);const d={toc:[]},r="wrapper";function m(e){let{components:n,...a}=e;return(0,o.kt)(r,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Library Required",type:"info"},(0,o.kt)("p",null,"You will need to add the ",(0,o.kt)("code",null,a.name)," library to your app's dependencies."),(0,o.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"Kotlin",mdxType:"TabItem"},(0,o.kt)("h4",{parentName:"admonition",id:"buildgradlekts"},"build.gradle.kts"),(0,o.kt)(s.O,{mdxType:"KPlayground"},a.kotlin)),(0,o.kt)(l.Z,{value:"Groovy",mdxType:"TabItem"},(0,o.kt)("h4",{parentName:"admonition",id:"buildgradle"},"build.gradle"),(0,o.kt)(s.O,{mdxType:"KPlayground"},a.groovy)))))}m.isMDXComponent=!0},6750:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>y,default:()=>D,frontMatter:()=>T,metadata:()=>v,toc:()=>f});var t=a(7462),o=(a(7294),a(3905)),i=(a(8209),a(4866),a(5162),a(2134)),l=a(4903),s=a(1912),d=a(1166);const r='// ...\n\ndependencies {\n    implementation ("io.nacular.doodle:themes:$doodleVersion")\n}\n\n// ...',m="package animation\n\ndoodle_version = '0.9.1'\n\n//sampleStart\n// ...\n\ndependencies {\n    implementation \"io.nacular.doodle:themes:$doodle_version\"\n}\n\n// ...\n//sampleEnd",p="package themes\n\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.theme.Theme\n\n//sampleStart\nclass MyTheme: Theme {\n    override fun install(display: Display, all: Sequence<View>) {\n        //\n    }\n}\n//sampleEnd",h="package themes\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.NativeTheme\nimport org.kodein.di.instance\n\n//sampleStart\nclass SomeApp(display: Display, manager: ThemeManager, theme: Theme): Application {\n    init {\n        manager.selected = theme\n\n        // ...\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application(modules = listOf(NativeTheme)) {\n        SomeApp(display = instance(), manager = instance(), theme = instance())\n    }\n}\n//sampleEnd",u="package themes\n\nimport io.nacular.doodle.controls.ProgressBar\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.controls.range.Slider\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.theme.Theme\n\n//sampleStart\nclass NaiveTheme: Theme {\n    override fun install(display: Display, all: Sequence<View>) = all.forEach {\n        when (it) {\n            is Slider<*>   -> { /* it.behavior = ... */ }\n            is PushButton  -> { /* it.behavior = ... */ }\n            is ProgressBar -> { /* it.behavior = ... */ }\n            // ...\n        }\n    }\n}\n//sampleEnd",c="package themes\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\n\n//sampleStart\n/**\n * [NaiveTheme]'s static implementation leads to lots of dependencies that are\n * not used in [SimpleApp]. This includes the View and Behavior classes it uses.\n */\nclass SimpleApp(display: Display, manager: ThemeManager, theme: Theme): Application {\n    init {\n        manager.selected = theme\n\n        display += PushButton()\n    }\n\n    override fun shutdown() {}\n}\n//sampleEnd",k="package themes.dynamic\n\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeButtonBehavior\nimport org.kodein.di.instance\nimport themes.SimpleApp\n\n//sampleStart\nfun main() {\n\n    // DynamicThemes require a list of Behavior modules since the\n    // Theme itself is essentially a Behavior filter.\n    // These modules are added to the list of app modules as follows\n\n    application(modules = listOf(nativeButtonBehavior(), /* other modules */)) {\n\n        // The nativeButtonBehavior module also makes ThemeManager and Theme\n        // available by default; so there's no need to use additional modules\n        // for them.\n\n        SimpleApp(display = instance(), manager = instance(), theme = instance())\n    }\n}\n//sampleEnd",T={hide_title:!0},y="Themes",v={unversionedId:"themes",id:"themes",title:"Themes",description:"Doodle apps can use s to create a consistent look and behavior across their Views. Doodle has built-in support for a Native and Basic theme (which has a light and dark variant). The  styles controls like buttons, text fields, and scroll panels using the system default styles and behaviors. The  provides a customizable foundation to further build on.",source:"@site/docs/themes.mdx",sourceDirName:".",slug:"/themes",permalink:"/doodle/docs/themes",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Popups \u2022 Modals",permalink:"/doodle/docs/modals"},next:{title:"Drag \u2022 Drop",permalink:"/doodle/docs/dragdrop"}},g={},f=[{value:"How Themes work",id:"how-themes-work",level:2},{value:"ThemeManager",id:"thememanager",level:2},{value:"Bundle Size",id:"bundle-size",level:2},{value:"Dynamic Themes",id:"dynamic-themes",level:2}],b={toc:f},w="wrapper";function D(e){let{components:n,...a}=e;return(0,o.kt)(w,(0,t.Z)({},b,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"themes"},"Themes"),(0,o.kt)("p",null,"Doodle apps can use ",(0,o.kt)(d.Q2A,null),"s to create a consistent look and behavior across their Views. Doodle has built-in support for a Native and Basic theme (which has a light and dark variant). The ",(0,o.kt)(d.MfS,null)," styles controls like buttons, text fields, and scroll panels using the system default styles and behaviors. The ",(0,o.kt)(d.YUL,null)," provides a customizable foundation to further build on."),(0,o.kt)(l.l,{functionName:"themes",height:"400",mdxType:"DoodleApp"}),(0,o.kt)(i.ZP,{name:"Themes",kotlin:r,groovy:m,mdxType:"LibraryRequired"}),(0,o.kt)("h2",{id:"how-themes-work"},"How Themes work"),(0,o.kt)("p",null,"Themes implement a simple interface that allows them to process the entire View graph and apply style and behavior changes. The API is as follows:"),(0,o.kt)(s.O,{mdxType:"KPlayground"},p),(0,o.kt)("p",null,"Doodle calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"install")," method when applying a Theme for the first time, and when Views are added to the Display after installation. It provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"Display")," and a sequence of displayed Views. The Theme is free to customize both."),(0,o.kt)("h2",{id:"thememanager"},"ThemeManager"),(0,o.kt)("p",null,"Themes are handles by the ",(0,o.kt)(d.Ve9,null),". It provides an API for selecting the active Theme. Inject it into your app to work with Themes."),(0,o.kt)(s.O,{mdxType:"KPlayground"},h),(0,o.kt)("p",null,"This app installs the ",(0,o.kt)("inlineCode",{parentName:"p"},"NativeTheme"),", which is available in a bundle of the same name. That bundle also includes the common ",(0,o.kt)(d.OPu,null),", which provides access to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ThemeManager"),"."),(0,o.kt)("h2",{id:"bundle-size"},"Bundle Size"),(0,o.kt)("p",null,"Themes can lead to larger bundle sizes than expected depending on how they are implemented. Take the following\nfor example."),(0,o.kt)(s.O,{mdxType:"KPlayground"},u),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Themes defined this way are not very portable due to their heavy bundle cost")),(0,o.kt)(s.O,{mdxType:"KPlayground"},c),(0,o.kt)("h2",{id:"dynamic-themes"},"Dynamic Themes"),(0,o.kt)("p",null,"Doodle addresses this concern with the ",(0,o.kt)(d.el1,null),". This Theme uses dependency injection to discover the set of Behaviors that have been installed via Kodein Modules. It can filter that list down to those Behaviors associated with it. This avoids hard dependencies on Views or Behaviors as a result."),(0,o.kt)("p",null,"DynamicThemes require explicit Behavior registration to work. The built-in Themes define a Module per Behavior to allow arbitrary groupings within apps. These modules are defined using ",(0,o.kt)(d.HVZ,null),", which takes a ",(0,o.kt)(d.Q2A,null)," class and binds a ",(0,o.kt)(d.el1,null)," that includes behaviors associated with that class."),(0,o.kt)(s.O,{mdxType:"KPlayground"},k),(0,o.kt)("p",null,"This app no longer has extraneous dependencies on things like ",(0,o.kt)("inlineCode",{parentName:"p"},"ProgressBar")," and its ",(0,o.kt)("inlineCode",{parentName:"p"},"Behavior"),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Include behavior modules like this so they can be used as part of a dynamic ",(0,o.kt)("inlineCode",{parentName:"p"},"Theme"),".")))}D.isMDXComponent=!0}}]);