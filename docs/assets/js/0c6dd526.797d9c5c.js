"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[1743],{3729:(e,i,s)=>{s.d(i,{Ay:()=>c,RM:()=>o});var t=s(4848),l=s(8453),n=(s(5537),s(9329),s(4069));const o=[];function a(e){const i={admonition:"admonition",p:"p",...(0,l.R)(),...e.components};return(0,t.jsxs)(i.admonition,{title:"Module Required",type:"info",children:[(0,t.jsxs)("p",{children:["You must include the ",e.link," in your application in order to use these features."]}),(0,t.jsx)(n.v,{children:e.module}),(0,t.jsx)(i.p,{children:"Doodle uses opt-in modules like this to improve bundle size."})]})}function c(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8907:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>m,contentTitle:()=>v,default:()=>f,frontMatter:()=>y,metadata:()=>t,toc:()=>w});const t=JSON.parse('{"id":"accessibility","title":"Accessibility","description":"Making truly accessible apps is complex and requires familiarity with a wide range of concepts. The","source":"@site/docs/accessibility.mdx","sourceDirName":".","slug":"/accessibility","permalink":"/doodle/docs/accessibility","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"Accessibility"},"sidebar":"tutorialSidebar","previous":{"title":"Theming","permalink":"/doodle/docs/theming"},"next":{"title":"Catalog","permalink":"/doodle/docs/ui_components/overview"}}');var l=s(4848),n=s(8453),o=(s(7269),s(4069)),a=s(9172),c=s(3729);const r="package accessibility.module\n\nimport io.nacular.doodle.application.Modules.Companion.AccessibilityModule\nimport io.nacular.doodle.application.application\nimport org.kodein.di.instance\nimport rendering.MyApp\n\nfun main() {\n//sampleStart\n    application(modules = listOf(AccessibilityModule)) {\n        MyApp(instance(), instance())\n    }\n//sampleEnd\n}",d="package accessibility\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.AccessibilityModule\nimport io.nacular.doodle.application.application\n\n//sampleStart\nclass MyApp(/*...*/): Application {\n    init {\n        // use accessibility features\n    }\n\n    override fun shutdown() {}\n}\n\nfun main () {\n    // Include the AccessibilityModule to enable features\n    application(modules = listOf(AccessibilityModule)) {\n        MyApp(/*...*/)\n    }\n}\n//sampleEnd",p='package accessibility\n\nimport io.nacular.doodle.controls.buttons.PushButton\n\n//sampleStart\nval button = PushButton("x").apply {\n    accessibilityLabel = "Close the window"\n}\n//sampleEnd',h='package accessibility\n\nimport io.nacular.doodle.controls.text.Label\nimport io.nacular.doodle.controls.text.TextField\n\n//sampleStart\nval label     = Label("Enter your name")\nval textField = TextField().apply {\n    accessibilityLabelProvider = label\n}\n//sampleEnd',b="package accessibility\n\nimport io.nacular.doodle.accessibility.ButtonRole\nimport io.nacular.doodle.core.View\n\n//sampleStart\nclass CustomButton: View(accessibilityRole = ButtonRole()) {\n    // ...\n}\n//sampleEnd",u="package accessibility\n\nimport io.nacular.doodle.accessibility.ToggleButtonRole\nimport io.nacular.doodle.core.View\nimport io.nacular.doodle.utils.observable\n\n//sampleStart\nclass CustomToggle(private val role: ToggleButtonRole = ToggleButtonRole()): View(accessibilityRole = role) {\n    var selected by observable(false) { old, new ->\n        role.pressed = new\n    }\n}\n//sampleEnd",y={hide_title:!0,title:"Accessibility"},v="Accessibility",m={},w=[...c.RM,{value:"Descriptive Text",id:"descriptive-text",level:2},{value:"<api.view.accessibilityLabel><code>accessibilityLabel</code></api.view.accessibilityLabel>",id:"accessibilitylabel",level:3},{value:"<api.view.accessibilityLabelProvider><code>accessibilityLabelProvider</code></api.view.accessibilityLabelProvider>",id:"accessibilitylabelprovider",level:3},{value:"<api.view.accessibilityDescriptionProvider><code>accessibilityDescriptionProvider</code></api.view.accessibilityDescriptionProvider>",id:"accessibilitydescriptionprovider",level:3},{value:"Accessibility Roles",id:"accessibility-roles",level:2}];function x(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,n.R)(),...e.components};return a.F||j("api",!1),a.F.AccessibilityModule||j("api.AccessibilityModule",!0),a.F.ButtonRole||j("api.ButtonRole",!0),a.F.ConfinedValueModel||j("api.ConfinedValueModel",!0),a.F.ValueSlider||j("api.ValueSlider",!0),a.F.view||j("api.view",!1),a.F.view.accessibilityDescriptionProvider||j("api.view.accessibilityDescriptionProvider",!0),a.F.view.accessibilityLabel||j("api.view.accessibilityLabel",!0),a.F.view.accessibilityLabelProvider||j("api.view.accessibilityLabelProvider",!0),a.F.view.accessibilityRole||j("api.view.accessibilityRole",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"accessibility",children:"Accessibility"})}),"\n",(0,l.jsxs)(i.p,{children:["Making truly accessible apps is complex and requires familiarity with a wide range of concepts. The\n",(0,l.jsx)(i.a,{href:"https://www.w3.org/WAI/intro/wcag",children:"Web Content Accessibility Guidelines"})," provide recommendations for web apps."]}),"\n",(0,l.jsx)(c.Ay,{link:(0,l.jsx)(a.F.AccessibilityModule,{}),module:r}),"\n",(0,l.jsx)(o.v,{children:d}),"\n",(0,l.jsx)(i.h2,{id:"descriptive-text",children:"Descriptive Text"}),"\n",(0,l.jsx)(i.h3,{id:"accessibilitylabel",children:(0,l.jsx)(a.F.view.accessibilityLabel,{children:(0,l.jsx)(i.code,{children:"accessibilityLabel"})})}),"\n",(0,l.jsx)(i.p,{children:"Authors can provide short, descriptive text that is used by assistive technologies to announce a View when it is selected. This property helps\nin cases where a View contains no meaningful text."}),"\n",(0,l.jsx)(o.v,{children:p}),"\n",(0,l.jsx)(i.h3,{id:"accessibilitylabelprovider",children:(0,l.jsx)(a.F.view.accessibilityLabelProvider,{children:(0,l.jsx)(i.code,{children:"accessibilityLabelProvider"})})}),"\n",(0,l.jsxs)(i.p,{children:["In many cases the app presents descriptive text to the user directly using other Views, like labels for a text fields. The ",(0,l.jsx)(i.code,{children:"accessibilityLabelProvider"}),' points to another View that should be used as a "label" for the current one.']}),"\n",(0,l.jsx)(o.v,{children:h}),"\n",(0,l.jsx)(i.admonition,{type:"info",children:(0,l.jsx)(i.p,{children:"Views can be linked this way at any time, even if they are not both currently displayed. Doodle will track the relationship, and surface it to assistive technologies if the Views are simultaneously displayed."})}),"\n",(0,l.jsx)(i.h3,{id:"accessibilitydescriptionprovider",children:(0,l.jsx)(a.F.view.accessibilityDescriptionProvider,{children:(0,l.jsx)(i.code,{children:"accessibilityDescriptionProvider"})})}),"\n",(0,l.jsxs)(i.p,{children:["Labels should be short descriptive names for a View. But it is possible to provide more detailed descriptions as well via the\n",(0,l.jsx)(i.code,{children:"accessibilityDescriptionProvider"}),". This property behaves like ",(0,l.jsx)(i.code,{children:"accessibilityLabelProvider"}),", but is intended for longer, more detailed text that describes the View."]}),"\n",(0,l.jsx)(i.h2,{id:"accessibility-roles",children:"Accessibility Roles"}),"\n",(0,l.jsxs)(i.p,{children:["Authors can indicate that a View plays a well-defined role in the app by tagging it with an accessibility role. This enables assistive technologies to change the presentation of the View to the user as she navigates a scene. This is done by setting the View's ",(0,l.jsx)(a.F.view.accessibilityRole,{}),"."]}),"\n",(0,l.jsxs)(i.p,{children:["Here is an example of creating a View that will serve as a ",(0,l.jsx)(a.F.ButtonRole,{}),"."]}),"\n",(0,l.jsx)(o.v,{children:b}),"\n",(0,l.jsxs)(i.p,{children:["This View will now be treated as a button by accessibility technologies (i.e. screen readers). The ",(0,l.jsx)(i.code,{children:"button"})," role itself does not have additional properties, so simply adopting it is sufficient."]}),"\n",(0,l.jsx)(i.p,{children:"Other roles have state and must be synchronized with the View to ensure proper assistive support."}),"\n",(0,l.jsx)(o.v,{children:u}),"\n",(0,l.jsxs)(i.p,{children:["Many of the widgets in the ",(0,l.jsx)(i.a,{href:"https://nacular.github.io/doodle-api/controls/",children:(0,l.jsx)(i.code,{children:"Controls"})})," library ship with accessibility support (though this continues to improve). The library also provides bindings for some roles and models, which makes it easier to synchronize roles with their widgets. ",(0,l.jsx)(a.F.ValueSlider,{}),", for example, binds its role to the ",(0,l.jsx)(a.F.ConfinedValueModel,{})," that underlies it. This way the role and View are always in sync."]})]})}function f(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(x,{...e})}):x(e)}function j(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);