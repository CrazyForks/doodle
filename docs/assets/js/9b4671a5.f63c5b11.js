"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[677],{7441:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>y,contentTitle:()=>h,default:()=>w,frontMatter:()=>u,metadata:()=>m,toc:()=>g});var i=o(7462),t=(o(7294),o(3905)),a=(o(8209),o(4866),o(5162),o(4996),o(4903)),l=o(1912),r=o(1166);const d="package simplecircle\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.core.center\nimport io.nacular.doodle.core.height\nimport io.nacular.doodle.core.view\nimport io.nacular.doodle.core.width\nimport io.nacular.doodle.drawing.Color.Companion.Red\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Circle\nimport org.kodein.di.instance\nimport kotlin.math.min\n\n//sampleStart\nclass SimpleCircle(display: Display): Application {\n    init {\n        display += view {\n            size   = display.size\n            render = {\n                circle(\n                    Circle(\n                    center = display.center,\n                    radius = min(display.width, display.height) / 2 - 10\n                ), fill = Red.paint)\n            }\n        }\n\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application {\n        SimpleCircle(display = instance())\n    }\n}\n//sampleEnd",s="package invisiblebutton\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport org.kodein.di.instance\n\n//sampleStart\nclass InvisibleButton(display: Display): Application {\n    init {\n        // NOTE: This does not render because the button has no\n        // Behavior installed\n        display += PushButton().apply { size = Size(40, 20) }\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application {\n        InvisibleButton(display = instance())\n    }\n}\n//sampleEnd",p='package buttonwiththeme\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.PointerModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.docs.apps.ButtonWithTheme\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport io.nacular.doodle.theme.Theme\nimport io.nacular.doodle.theme.ThemeManager\nimport io.nacular.doodle.theme.native.NativeTheme.Companion.nativeButtonBehavior\nimport org.kodein.di.instance\n\n//sampleStart\nclass ButtonWithTheme(display: Display, themeManager: ThemeManager, theme: Theme): Application {\n    init {\n        // install theme that provides a button behavior\n        themeManager.selected = theme\n\n        display += PushButton("Hi").apply { size = Size(80, 40) }\n        display.layout = constrain(display.first(), center)\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    application(modules = listOf(PointerModule, nativeButtonBehavior())) {\n        ButtonWithTheme(display = instance(), themeManager = instance(), theme = instance())\n    }\n}\n//sampleEnd',c='package buttonwithbehavior\n\nimport io.nacular.doodle.application.Application\nimport io.nacular.doodle.application.Modules.Companion.PointerModule\nimport io.nacular.doodle.application.application\nimport io.nacular.doodle.controls.buttons.PushButton\nimport io.nacular.doodle.controls.theme.simpleButtonRenderer\nimport io.nacular.doodle.core.Display\nimport io.nacular.doodle.drawing.Color.Companion.Lightgray\nimport io.nacular.doodle.drawing.Color.Companion.White\nimport io.nacular.doodle.drawing.darker\nimport io.nacular.doodle.drawing.paint\nimport io.nacular.doodle.geometry.Size\nimport io.nacular.doodle.layout.constraints.center\nimport io.nacular.doodle.layout.constraints.constrain\nimport org.kodein.di.instance\n\n//sampleStart\nclass ButtonWithBehavior(display: Display): Application {\n    init {\n        display += PushButton("Hi").apply {\n            size = Size(80, 40)\n\n            // Assign a Behavior to the button to handle rendering\n            behavior = simpleButtonRenderer { button, canvas ->\n                var color = Lightgray\n\n                if (button.model.pressed    ) color = color.darker(0.25f)\n                if (button.model.pointerOver) color = color.darker(0.25f)\n\n                canvas.rect(button.bounds.atOrigin, radius = 10.0, fill = color.paint)\n            }\n\n//            acceptsThemes = false // prevents any theme from overriding behavior\n        }\n        display.layout = constrain(display.first(), center)\n        display.fill(White.paint)\n    }\n\n    override fun shutdown() {}\n}\n\nfun main() {\n    // PointerModule required to support mouse/touch\n    application(modules = listOf(PointerModule)) {\n        ButtonWithBehavior(display = instance())\n    }\n}\n//sampleEnd',u={hide_title:!0,title:"Where's My View?",description:"Top-level Views are shown using the Display object"},h="Where's my view?",m={unversionedId:"display/gotchas",id:"display/gotchas",title:"Where's My View?",description:"Top-level Views are shown using the Display object",source:"@site/docs/display/gotchas.mdx",sourceDirName:"display",slug:"/display/gotchas",permalink:"/doodle/docs/display/gotchas",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0,title:"Where's My View?",description:"Top-level Views are shown using the Display object"},sidebar:"tutorialSidebar",previous:{title:"The Display",permalink:"/doodle/docs/display/overview"},next:{title:"Overview",permalink:"/doodle/docs/rendering/overview"}},y={},g=[{value:"Where is my Button?",id:"where-is-my-button",level:2},{value:"Setting a Behavior fixes the button",id:"setting-a-behavior-fixes-the-button",level:2},{value:"A Theme could also be used",id:"a-theme-could-also-be-used",level:2}],v={toc:g},b="wrapper";function w(e){let{components:n,...o}=e;return(0,t.kt)(b,(0,i.Z)({},v,o,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"wheres-my-view"},"Where's my view?"),(0,t.kt)("p",null,"The following app has a single top-level view that fills the Display and draws a centered circle."),(0,t.kt)(l.O,{mdxType:"KPlayground"},d),(0,t.kt)(a.l,{functionName:"simpleCircle",height:"200",mdxType:"DoodleApp"}),(0,t.kt)("h2",{id:"where-is-my-button"},"Where is my Button?"),(0,t.kt)("p",null,"Now we try the same thing with a ",(0,t.kt)(r.rih,null),". The following code feels like it should work; but it doesn't."),(0,t.kt)(l.O,{mdxType:"KPlayground"},s),(0,t.kt)(a.l,{functionName:"invisibleButton",height:"200",mdxType:"DoodleApp"}),(0,t.kt)("admonition",{type:"warning"},(0,t.kt)("p",{parentName:"admonition"},"The above examples does not render anything because ",(0,t.kt)(r.rih,null)," delegates all rendering to its ",(0,t.kt)(r.xDH,null)," and the button has none specified.")),(0,t.kt)("h2",{id:"setting-a-behavior-fixes-the-button"},"Setting a ",(0,t.kt)("a",{parentName:"h2",href:"/doodle/docs/rendering/behaviors"},"Behavior")," fixes the button"),(0,t.kt)("p",null,"The above example does not render anything because the button has no ",(0,t.kt)(r.cgf,null)," installed. ",(0,t.kt)(r.rih,null)," (like many Views in the ",(0,t.kt)("inlineCode",{parentName:"p"},"controls")," library) does not render directly itself, but relies on its ",(0,t.kt)(r.xDH,null)," for all drawing."),(0,t.kt)("p",null,"So we can fix the above app by explicitly adding a ",(0,t.kt)(r.cgf,null)," to the button."),(0,t.kt)(l.O,{mdxType:"KPlayground"},c),(0,t.kt)(a.l,{functionName:"buttonWithBehavior",height:"200",mdxType:"DoodleApp"}),(0,t.kt)("h2",{id:"a-theme-could-also-be-used"},"A ",(0,t.kt)("a",{parentName:"h2",href:"/doodle/docs/themes"},"Theme")," could also be used"),(0,t.kt)("p",null,"Themes are a great way to assign behaviors to your entire app all at once. In this version we register the ",(0,t.kt)(r.G7C,null)," module which makes a ",(0,t.kt)(r.Q2A,null)," available that will assign a native button behavior to all buttons in the app by default. This theme is injected into the app along with the ",(0,t.kt)(r.Ve9,null)," which is used to select the theme. The result is that our button now has a behavior and delegates all rendering to it."),(0,t.kt)(l.O,{mdxType:"KPlayground"},p),(0,t.kt)(a.l,{functionName:"buttonWithTheme",height:"200",mdxType:"DoodleApp"}))}w.isMDXComponent=!0}}]);